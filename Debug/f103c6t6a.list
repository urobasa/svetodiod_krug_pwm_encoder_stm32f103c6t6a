
f103c6t6a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000466c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08004778  08004778  00005778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004978  08004978  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004978  08004978  00005978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004980  08004980  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004980  08004980  00005980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004984  08004984  00005984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004988  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000005c  080049e4  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080049e4  000062a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdc9  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c8d  00000000  00000000  00011e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00013ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b0  00000000  00000000  00014730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176c0  00000000  00000000  000150e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6e5  00000000  00000000  0002c7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000885b9  00000000  00000000  0003ae85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c343e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003818  00000000  00000000  000c3484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c6c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004760 	.word	0x08004760

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004760 	.word	0x08004760

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fc49 	bl	80009f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f891 	bl	800028c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_RCC_PWR_CLK_ENABLE();
 800016a:	4b44      	ldr	r3, [pc, #272]	@ (800027c <main+0x120>)
 800016c:	69db      	ldr	r3, [r3, #28]
 800016e:	4a43      	ldr	r2, [pc, #268]	@ (800027c <main+0x120>)
 8000170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000174:	61d3      	str	r3, [r2, #28]
 8000176:	4b41      	ldr	r3, [pc, #260]	@ (800027c <main+0x120>)
 8000178:	69db      	ldr	r3, [r3, #28]
 800017a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800017e:	603b      	str	r3, [r7, #0]
 8000180:	683b      	ldr	r3, [r7, #0]
  /* Check if the system was resumed from Standby mode */
  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8000182:	4b3f      	ldr	r3, [pc, #252]	@ (8000280 <main+0x124>)
 8000184:	685b      	ldr	r3, [r3, #4]
 8000186:	f003 0302 	and.w	r3, r3, #2
 800018a:	2b02      	cmp	r3, #2
 800018c:	d111      	bne.n	80001b2 <main+0x56>
  {
    /* Clear Standby flag */
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 800018e:	4b3c      	ldr	r3, [pc, #240]	@ (8000280 <main+0x124>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a3b      	ldr	r2, [pc, #236]	@ (8000280 <main+0x124>)
 8000194:	f043 0308 	orr.w	r3, r3, #8
 8000198:	6013      	str	r3, [r2, #0]

    /* Check and Clear the Wakeup flag */
    if (__HAL_PWR_GET_FLAG(PWR_FLAG_WU) != RESET)
 800019a:	4b39      	ldr	r3, [pc, #228]	@ (8000280 <main+0x124>)
 800019c:	685b      	ldr	r3, [r3, #4]
 800019e:	f003 0301 	and.w	r3, r3, #1
 80001a2:	2b01      	cmp	r3, #1
 80001a4:	d105      	bne.n	80001b2 <main+0x56>
    {
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80001a6:	4b36      	ldr	r3, [pc, #216]	@ (8000280 <main+0x124>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4a35      	ldr	r2, [pc, #212]	@ (8000280 <main+0x124>)
 80001ac:	f043 0304 	orr.w	r3, r3, #4
 80001b0:	6013      	str	r3, [r2, #0]
    }
  }
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b2:	f000 f9b1 	bl	8000518 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001b6:	f000 f8a5 	bl	8000304 <MX_TIM2_Init>
  MX_TIM3_Init();
 80001ba:	f000 f92f 	bl	800041c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80001be:	f000 f981 	bl	80004c4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80001c2:	2104      	movs	r1, #4
 80001c4:	482f      	ldr	r0, [pc, #188]	@ (8000284 <main+0x128>)
 80001c6:	f001 ff5b 	bl	8002080 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80001ca:	2108      	movs	r1, #8
 80001cc:	482d      	ldr	r0, [pc, #180]	@ (8000284 <main+0x128>)
 80001ce:	f001 ff57 	bl	8002080 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80001d2:	210c      	movs	r1, #12
 80001d4:	482b      	ldr	r0, [pc, #172]	@ (8000284 <main+0x128>)
 80001d6:	f001 ff53 	bl	8002080 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80001da:	2100      	movs	r1, #0
 80001dc:	482a      	ldr	r0, [pc, #168]	@ (8000288 <main+0x12c>)
 80001de:	f002 f9b3 	bl	8002548 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80001e2:	2104      	movs	r1, #4
 80001e4:	4828      	ldr	r0, [pc, #160]	@ (8000288 <main+0x12c>)
 80001e6:	f002 f9af 	bl	8002548 <HAL_TIM_Encoder_Start>
//  __HAL_TIM_SET_COUNTER(&htim3, 0);
  uint32_t previousTime = 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int previousCount = 0;  // Предыдущее значение счётчика
 80001ee:	2300      	movs	r3, #0
 80001f0:	60bb      	str	r3, [r7, #8]
  while (1)
  {

	    // Получаем текущее значение счётчика энкодера
	    int encoderCount = __HAL_TIM_GET_COUNTER(&htim3);
 80001f2:	4b25      	ldr	r3, [pc, #148]	@ (8000288 <main+0x12c>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80001f8:	607b      	str	r3, [r7, #4]

	    // Проверяем переход с 0 на диапазон от 290 до 300
	    if (previousCount == 0 && encoderCount >= 290 && encoderCount <= 300) {
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d119      	bne.n	8000234 <main+0xd8>
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8000206:	db15      	blt.n	8000234 <main+0xd8>
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800020e:	dc11      	bgt.n	8000234 <main+0xd8>
	        encoderCount = 0;  // Устанавливаем значение на 0
 8000210:	2300      	movs	r3, #0
 8000212:	607b      	str	r3, [r7, #4]
	        __HAL_TIM_SET_COUNTER(&htim3, encoderCount);
 8000214:	4b1c      	ldr	r3, [pc, #112]	@ (8000288 <main+0x12c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	687a      	ldr	r2, [r7, #4]
 800021a:	625a      	str	r2, [r3, #36]	@ 0x24
	        HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 800021c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000220:	f000 ffe4 	bl	80011ec <HAL_PWR_EnableWakeUpPin>
	        __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000224:	4b16      	ldr	r3, [pc, #88]	@ (8000280 <main+0x124>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a15      	ldr	r2, [pc, #84]	@ (8000280 <main+0x124>)
 800022a:	f043 0304 	orr.w	r3, r3, #4
 800022e:	6013      	str	r3, [r2, #0]
	        HAL_PWR_EnterSTANDBYMode();
 8000230:	f001 f802 	bl	8001238 <HAL_PWR_EnterSTANDBYMode>
	    }

	    // Проверяем переход с 300 на диапазон от 0 до 10
	    if (previousCount == 300 && encoderCount <= 10) {
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800023a:	d109      	bne.n	8000250 <main+0xf4>
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	2b0a      	cmp	r3, #10
 8000240:	dc06      	bgt.n	8000250 <main+0xf4>
	        encoderCount = 300;  // Устанавливаем значение на 300
 8000242:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000246:	607b      	str	r3, [r7, #4]
	        __HAL_TIM_SET_COUNTER(&htim3, encoderCount);
 8000248:	4b0f      	ldr	r3, [pc, #60]	@ (8000288 <main+0x12c>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	625a      	str	r2, [r3, #36]	@ 0x24
	    }


      Set_color(encoderCount,encoderCount,encoderCount);
 8000250:	687a      	ldr	r2, [r7, #4]
 8000252:	6879      	ldr	r1, [r7, #4]
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f000 f9c7 	bl	80005e8 <Set_color>
      previousCount = encoderCount;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	60bb      	str	r3, [r7, #8]
	  if (HAL_GetTick() - previousTime >= 1000)
 800025e:	f000 fc23 	bl	8000aa8 <HAL_GetTick>
 8000262:	4602      	mov	r2, r0
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	1ad3      	subs	r3, r2, r3
 8000268:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800026c:	d3c1      	bcc.n	80001f2 <main+0x96>

      {
    	  previousTime = HAL_GetTick();  // Обновляем время
 800026e:	f000 fc1b 	bl	8000aa8 <HAL_GetTick>
 8000272:	60f8      	str	r0, [r7, #12]
          UART_SendText(encoderCount); // Отправка текста
 8000274:	6878      	ldr	r0, [r7, #4]
 8000276:	f000 f9d1 	bl	800061c <UART_SendText>
  {
 800027a:	e7ba      	b.n	80001f2 <main+0x96>
 800027c:	40021000 	.word	0x40021000
 8000280:	40007000 	.word	0x40007000
 8000284:	20000078 	.word	0x20000078
 8000288:	200000c0 	.word	0x200000c0

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b090      	sub	sp, #64	@ 0x40
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0318 	add.w	r3, r7, #24
 8000296:	2228      	movs	r2, #40	@ 0x28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f003 fdd0 	bl	8003e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]
 80002ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ae:	2302      	movs	r3, #2
 80002b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b2:	2301      	movs	r3, #1
 80002b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002b6:	2310      	movs	r3, #16
 80002b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ba:	2300      	movs	r3, #0
 80002bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 ffd0 	bl	8001268 <HAL_RCC_OscConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ce:	f000 f9c9 	bl	8000664 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d2:	230f      	movs	r3, #15
 80002d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002d6:	2300      	movs	r3, #0
 80002d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 fb2a 	bl	8001944 <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002f6:	f000 f9b5 	bl	8000664 <Error_Handler>
  }
}
 80002fa:	bf00      	nop
 80002fc:	3740      	adds	r7, #64	@ 0x40
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b08e      	sub	sp, #56	@ 0x38
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800030a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000318:	f107 0320 	add.w	r3, r7, #32
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	605a      	str	r2, [r3, #4]
 800032a:	609a      	str	r2, [r3, #8]
 800032c:	60da      	str	r2, [r3, #12]
 800032e:	611a      	str	r2, [r3, #16]
 8000330:	615a      	str	r2, [r3, #20]
 8000332:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000334:	4b38      	ldr	r3, [pc, #224]	@ (8000418 <MX_TIM2_Init+0x114>)
 8000336:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800033a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 800033c:	4b36      	ldr	r3, [pc, #216]	@ (8000418 <MX_TIM2_Init+0x114>)
 800033e:	220e      	movs	r2, #14
 8000340:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000342:	4b35      	ldr	r3, [pc, #212]	@ (8000418 <MX_TIM2_Init+0x114>)
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 300;
 8000348:	4b33      	ldr	r3, [pc, #204]	@ (8000418 <MX_TIM2_Init+0x114>)
 800034a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800034e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000350:	4b31      	ldr	r3, [pc, #196]	@ (8000418 <MX_TIM2_Init+0x114>)
 8000352:	2200      	movs	r2, #0
 8000354:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000356:	4b30      	ldr	r3, [pc, #192]	@ (8000418 <MX_TIM2_Init+0x114>)
 8000358:	2280      	movs	r2, #128	@ 0x80
 800035a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800035c:	482e      	ldr	r0, [pc, #184]	@ (8000418 <MX_TIM2_Init+0x114>)
 800035e:	f001 fd25 	bl	8001dac <HAL_TIM_Base_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000368:	f000 f97c 	bl	8000664 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800036c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000370:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000372:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000376:	4619      	mov	r1, r3
 8000378:	4827      	ldr	r0, [pc, #156]	@ (8000418 <MX_TIM2_Init+0x114>)
 800037a:	f002 fbd1 	bl	8002b20 <HAL_TIM_ConfigClockSource>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000384:	f000 f96e 	bl	8000664 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000388:	4823      	ldr	r0, [pc, #140]	@ (8000418 <MX_TIM2_Init+0x114>)
 800038a:	f001 fdbf 	bl	8001f0c <HAL_TIM_PWM_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000394:	f000 f966 	bl	8000664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000398:	2300      	movs	r3, #0
 800039a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800039c:	2300      	movs	r3, #0
 800039e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003a0:	f107 0320 	add.w	r3, r7, #32
 80003a4:	4619      	mov	r1, r3
 80003a6:	481c      	ldr	r0, [pc, #112]	@ (8000418 <MX_TIM2_Init+0x114>)
 80003a8:	f003 f9c6 	bl	8003738 <HAL_TIMEx_MasterConfigSynchronization>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80003b2:	f000 f957 	bl	8000664 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003b6:	2360      	movs	r3, #96	@ 0x60
 80003b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 150;
 80003ba:	2396      	movs	r3, #150	@ 0x96
 80003bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80003be:	2302      	movs	r3, #2
 80003c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2204      	movs	r2, #4
 80003ca:	4619      	mov	r1, r3
 80003cc:	4812      	ldr	r0, [pc, #72]	@ (8000418 <MX_TIM2_Init+0x114>)
 80003ce:	f002 fa53 	bl	8002878 <HAL_TIM_PWM_ConfigChannel>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80003d8:	f000 f944 	bl	8000664 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2208      	movs	r2, #8
 80003e0:	4619      	mov	r1, r3
 80003e2:	480d      	ldr	r0, [pc, #52]	@ (8000418 <MX_TIM2_Init+0x114>)
 80003e4:	f002 fa48 	bl	8002878 <HAL_TIM_PWM_ConfigChannel>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80003ee:	f000 f939 	bl	8000664 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	220c      	movs	r2, #12
 80003f6:	4619      	mov	r1, r3
 80003f8:	4807      	ldr	r0, [pc, #28]	@ (8000418 <MX_TIM2_Init+0x114>)
 80003fa:	f002 fa3d 	bl	8002878 <HAL_TIM_PWM_ConfigChannel>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000404:	f000 f92e 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000408:	4803      	ldr	r0, [pc, #12]	@ (8000418 <MX_TIM2_Init+0x114>)
 800040a:	f000 f9d7 	bl	80007bc <HAL_TIM_MspPostInit>

}
 800040e:	bf00      	nop
 8000410:	3738      	adds	r7, #56	@ 0x38
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000078 	.word	0x20000078

0800041c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08c      	sub	sp, #48	@ 0x30
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000422:	f107 030c 	add.w	r3, r7, #12
 8000426:	2224      	movs	r2, #36	@ 0x24
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f003 fd08 	bl	8003e40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000438:	4b20      	ldr	r3, [pc, #128]	@ (80004bc <MX_TIM3_Init+0xa0>)
 800043a:	4a21      	ldr	r2, [pc, #132]	@ (80004c0 <MX_TIM3_Init+0xa4>)
 800043c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800043e:	4b1f      	ldr	r3, [pc, #124]	@ (80004bc <MX_TIM3_Init+0xa0>)
 8000440:	2200      	movs	r2, #0
 8000442:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000444:	4b1d      	ldr	r3, [pc, #116]	@ (80004bc <MX_TIM3_Init+0xa0>)
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 300;
 800044a:	4b1c      	ldr	r3, [pc, #112]	@ (80004bc <MX_TIM3_Init+0xa0>)
 800044c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000450:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000452:	4b1a      	ldr	r3, [pc, #104]	@ (80004bc <MX_TIM3_Init+0xa0>)
 8000454:	2200      	movs	r2, #0
 8000456:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000458:	4b18      	ldr	r3, [pc, #96]	@ (80004bc <MX_TIM3_Init+0xa0>)
 800045a:	2200      	movs	r2, #0
 800045c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800045e:	2303      	movs	r3, #3
 8000460:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000462:	2300      	movs	r3, #0
 8000464:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000466:	2301      	movs	r3, #1
 8000468:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 800046e:	2301      	movs	r3, #1
 8000470:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000472:	2300      	movs	r3, #0
 8000474:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000476:	2301      	movs	r3, #1
 8000478:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 1;
 800047e:	2301      	movs	r3, #1
 8000480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000482:	f107 030c 	add.w	r3, r7, #12
 8000486:	4619      	mov	r1, r3
 8000488:	480c      	ldr	r0, [pc, #48]	@ (80004bc <MX_TIM3_Init+0xa0>)
 800048a:	f001 fecf 	bl	800222c <HAL_TIM_Encoder_Init>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d001      	beq.n	8000498 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000494:	f000 f8e6 	bl	8000664 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000498:	2300      	movs	r3, #0
 800049a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800049c:	2300      	movs	r3, #0
 800049e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	4619      	mov	r1, r3
 80004a4:	4805      	ldr	r0, [pc, #20]	@ (80004bc <MX_TIM3_Init+0xa0>)
 80004a6:	f003 f947 	bl	8003738 <HAL_TIMEx_MasterConfigSynchronization>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80004b0:	f000 f8d8 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80004b4:	bf00      	nop
 80004b6:	3730      	adds	r7, #48	@ 0x30
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	200000c0 	.word	0x200000c0
 80004c0:	40000400 	.word	0x40000400

080004c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004c8:	4b11      	ldr	r3, [pc, #68]	@ (8000510 <MX_USART1_UART_Init+0x4c>)
 80004ca:	4a12      	ldr	r2, [pc, #72]	@ (8000514 <MX_USART1_UART_Init+0x50>)
 80004cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004ce:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <MX_USART1_UART_Init+0x4c>)
 80004d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000510 <MX_USART1_UART_Init+0x4c>)
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <MX_USART1_UART_Init+0x4c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000510 <MX_USART1_UART_Init+0x4c>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004e8:	4b09      	ldr	r3, [pc, #36]	@ (8000510 <MX_USART1_UART_Init+0x4c>)
 80004ea:	220c      	movs	r2, #12
 80004ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ee:	4b08      	ldr	r3, [pc, #32]	@ (8000510 <MX_USART1_UART_Init+0x4c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004f4:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <MX_USART1_UART_Init+0x4c>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004fa:	4805      	ldr	r0, [pc, #20]	@ (8000510 <MX_USART1_UART_Init+0x4c>)
 80004fc:	f003 f9cc 	bl	8003898 <HAL_UART_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000506:	f000 f8ad 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20000108 	.word	0x20000108
 8000514:	40013800 	.word	0x40013800

08000518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 0310 	add.w	r3, r7, #16
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052c:	4b2a      	ldr	r3, [pc, #168]	@ (80005d8 <MX_GPIO_Init+0xc0>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a29      	ldr	r2, [pc, #164]	@ (80005d8 <MX_GPIO_Init+0xc0>)
 8000532:	f043 0310 	orr.w	r3, r3, #16
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b27      	ldr	r3, [pc, #156]	@ (80005d8 <MX_GPIO_Init+0xc0>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0310 	and.w	r3, r3, #16
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000544:	4b24      	ldr	r3, [pc, #144]	@ (80005d8 <MX_GPIO_Init+0xc0>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a23      	ldr	r2, [pc, #140]	@ (80005d8 <MX_GPIO_Init+0xc0>)
 800054a:	f043 0320 	orr.w	r3, r3, #32
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b21      	ldr	r3, [pc, #132]	@ (80005d8 <MX_GPIO_Init+0xc0>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0320 	and.w	r3, r3, #32
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055c:	4b1e      	ldr	r3, [pc, #120]	@ (80005d8 <MX_GPIO_Init+0xc0>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a1d      	ldr	r2, [pc, #116]	@ (80005d8 <MX_GPIO_Init+0xc0>)
 8000562:	f043 0304 	orr.w	r3, r3, #4
 8000566:	6193      	str	r3, [r2, #24]
 8000568:	4b1b      	ldr	r3, [pc, #108]	@ (80005d8 <MX_GPIO_Init+0xc0>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f003 0304 	and.w	r3, r3, #4
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000574:	4b18      	ldr	r3, [pc, #96]	@ (80005d8 <MX_GPIO_Init+0xc0>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a17      	ldr	r2, [pc, #92]	@ (80005d8 <MX_GPIO_Init+0xc0>)
 800057a:	f043 0308 	orr.w	r3, r3, #8
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <MX_GPIO_Init+0xc0>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f003 0308 	and.w	r3, r3, #8
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800058c:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000592:	2303      	movs	r3, #3
 8000594:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	4619      	mov	r1, r3
 800059c:	480f      	ldr	r0, [pc, #60]	@ (80005dc <MX_GPIO_Init+0xc4>)
 800059e:	f000 fbc9 	bl	8000d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA8 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_11
 80005a2:	f649 1330 	movw	r3, #39216	@ 0x9930
 80005a6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a8:	2303      	movs	r3, #3
 80005aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4619      	mov	r1, r3
 80005b2:	480b      	ldr	r0, [pc, #44]	@ (80005e0 <MX_GPIO_Init+0xc8>)
 80005b4:	f000 fbbe 	bl	8000d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80005b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005bc:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005be:	2303      	movs	r3, #3
 80005c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c2:	f107 0310 	add.w	r3, r7, #16
 80005c6:	4619      	mov	r1, r3
 80005c8:	4806      	ldr	r0, [pc, #24]	@ (80005e4 <MX_GPIO_Init+0xcc>)
 80005ca:	f000 fbb3 	bl	8000d34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ce:	bf00      	nop
 80005d0:	3720      	adds	r7, #32
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000
 80005dc:	40011000 	.word	0x40011000
 80005e0:	40010800 	.word	0x40010800
 80005e4:	40010c00 	.word	0x40010c00

080005e8 <Set_color>:

/* USER CODE BEGIN 4 */
void Set_color(int blu,int gre, int red)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, blu);
 80005f4:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <Set_color+0x30>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	68fa      	ldr	r2, [r7, #12]
 80005fa:	639a      	str	r2, [r3, #56]	@ 0x38
 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, red);
 80005fc:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <Set_color+0x30>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	63da      	str	r2, [r3, #60]	@ 0x3c
 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, gre);
 8000604:	4b04      	ldr	r3, [pc, #16]	@ (8000618 <Set_color+0x30>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	68ba      	ldr	r2, [r7, #8]
 800060a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000078 	.word	0x20000078

0800061c <UART_SendText>:

void UART_SendText(int number)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b09c      	sub	sp, #112	@ 0x70
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
    // Буфер для строки + \r\n (дополнительные 2 символа)
    char buffer[100];

    // Копируем текст в буфер и добавляем \r\n
//    snprintf(buffer, sizeof(buffer), "%s\r\n", text);
    sprintf(buffer, "%d\r\n", number);  // Преобразует число в строку
 8000624:	f107 0308 	add.w	r3, r7, #8
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	490c      	ldr	r1, [pc, #48]	@ (800065c <UART_SendText+0x40>)
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fbe7 	bl	8003e00 <siprintf>
    // Определяем длину строки с \r\n
    uint16_t length = strlen(buffer);
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff fd88 	bl	800014c <strlen>
 800063c:	4603      	mov	r3, r0
 800063e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

    // Отправляем строку через UART
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, length, HAL_MAX_DELAY);
 8000642:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000646:	f107 0108 	add.w	r1, r7, #8
 800064a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800064e:	4804      	ldr	r0, [pc, #16]	@ (8000660 <UART_SendText+0x44>)
 8000650:	f003 f9c2 	bl	80039d8 <HAL_UART_Transmit>
}
 8000654:	bf00      	nop
 8000656:	3770      	adds	r7, #112	@ 0x70
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	08004778 	.word	0x08004778
 8000660:	20000108 	.word	0x20000108

08000664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000668:	b672      	cpsid	i
}
 800066a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <Error_Handler+0x8>

08000670 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800068a:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <HAL_MspInit+0x5c>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4a14      	ldr	r2, [pc, #80]	@ (80006e0 <HAL_MspInit+0x5c>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6193      	str	r3, [r2, #24]
 8000696:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <HAL_MspInit+0x5c>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <HAL_MspInit+0x5c>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	4a0e      	ldr	r2, [pc, #56]	@ (80006e0 <HAL_MspInit+0x5c>)
 80006a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ac:	61d3      	str	r3, [r2, #28]
 80006ae:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <HAL_MspInit+0x5c>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006ba:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <HAL_MspInit+0x60>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	4a04      	ldr	r2, [pc, #16]	@ (80006e4 <HAL_MspInit+0x60>)
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40010000 	.word	0x40010000

080006e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80006f8:	d113      	bne.n	8000722 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006fa:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <HAL_TIM_Base_MspInit+0x44>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	4a0b      	ldr	r2, [pc, #44]	@ (800072c <HAL_TIM_Base_MspInit+0x44>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	61d3      	str	r3, [r2, #28]
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <HAL_TIM_Base_MspInit+0x44>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	201c      	movs	r0, #28
 8000718:	f000 fabc 	bl	8000c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800071c:	201c      	movs	r0, #28
 800071e:	f000 fae5 	bl	8000cec <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40021000 	.word	0x40021000

08000730 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a19      	ldr	r2, [pc, #100]	@ (80007b0 <HAL_TIM_Encoder_MspInit+0x80>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d12b      	bne.n	80007a8 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000750:	4b18      	ldr	r3, [pc, #96]	@ (80007b4 <HAL_TIM_Encoder_MspInit+0x84>)
 8000752:	69db      	ldr	r3, [r3, #28]
 8000754:	4a17      	ldr	r2, [pc, #92]	@ (80007b4 <HAL_TIM_Encoder_MspInit+0x84>)
 8000756:	f043 0302 	orr.w	r3, r3, #2
 800075a:	61d3      	str	r3, [r2, #28]
 800075c:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <HAL_TIM_Encoder_MspInit+0x84>)
 800075e:	69db      	ldr	r3, [r3, #28]
 8000760:	f003 0302 	and.w	r3, r3, #2
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000768:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <HAL_TIM_Encoder_MspInit+0x84>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a11      	ldr	r2, [pc, #68]	@ (80007b4 <HAL_TIM_Encoder_MspInit+0x84>)
 800076e:	f043 0304 	orr.w	r3, r3, #4
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_TIM_Encoder_MspInit+0x84>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f003 0304 	and.w	r3, r3, #4
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000780:	23c0      	movs	r3, #192	@ 0xc0
 8000782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	4619      	mov	r1, r3
 8000792:	4809      	ldr	r0, [pc, #36]	@ (80007b8 <HAL_TIM_Encoder_MspInit+0x88>)
 8000794:	f000 face 	bl	8000d34 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2100      	movs	r1, #0
 800079c:	201d      	movs	r0, #29
 800079e:	f000 fa79 	bl	8000c94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80007a2:	201d      	movs	r0, #29
 80007a4:	f000 faa2 	bl	8000cec <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80007a8:	bf00      	nop
 80007aa:	3720      	adds	r7, #32
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40000400 	.word	0x40000400
 80007b4:	40021000 	.word	0x40021000
 80007b8:	40010800 	.word	0x40010800

080007bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007da:	d117      	bne.n	800080c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <HAL_TIM_MspPostInit+0x58>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000814 <HAL_TIM_MspPostInit+0x58>)
 80007e2:	f043 0304 	orr.w	r3, r3, #4
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <HAL_TIM_MspPostInit+0x58>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = blu_pwm_Pin|red_pwm_Pin|gre_pwn_Pin;
 80007f4:	230e      	movs	r3, #14
 80007f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f8:	2302      	movs	r3, #2
 80007fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2302      	movs	r3, #2
 80007fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4619      	mov	r1, r3
 8000806:	4804      	ldr	r0, [pc, #16]	@ (8000818 <HAL_TIM_MspPostInit+0x5c>)
 8000808:	f000 fa94 	bl	8000d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40021000 	.word	0x40021000
 8000818:	40010800 	.word	0x40010800

0800081c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a1c      	ldr	r2, [pc, #112]	@ (80008a8 <HAL_UART_MspInit+0x8c>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d131      	bne.n	80008a0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800083c:	4b1b      	ldr	r3, [pc, #108]	@ (80008ac <HAL_UART_MspInit+0x90>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a1a      	ldr	r2, [pc, #104]	@ (80008ac <HAL_UART_MspInit+0x90>)
 8000842:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <HAL_UART_MspInit+0x90>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <HAL_UART_MspInit+0x90>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a14      	ldr	r2, [pc, #80]	@ (80008ac <HAL_UART_MspInit+0x90>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <HAL_UART_MspInit+0x90>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0304 	and.w	r3, r3, #4
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800086c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000870:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0310 	add.w	r3, r7, #16
 800087e:	4619      	mov	r1, r3
 8000880:	480b      	ldr	r0, [pc, #44]	@ (80008b0 <HAL_UART_MspInit+0x94>)
 8000882:	f000 fa57 	bl	8000d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000886:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800088a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0310 	add.w	r3, r7, #16
 8000898:	4619      	mov	r1, r3
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <HAL_UART_MspInit+0x94>)
 800089c:	f000 fa4a 	bl	8000d34 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40013800 	.word	0x40013800
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010800 	.word	0x40010800

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <NMI_Handler+0x4>

080008bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <MemManage_Handler+0x4>

080008cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <UsageFault_Handler+0x4>

080008dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr

080008f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 f8be 	bl	8000a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000910:	4802      	ldr	r0, [pc, #8]	@ (800091c <TIM2_IRQHandler+0x10>)
 8000912:	f001 fec1 	bl	8002698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20000078 	.word	0x20000078

08000920 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000924:	4802      	ldr	r0, [pc, #8]	@ (8000930 <TIM3_IRQHandler+0x10>)
 8000926:	f001 feb7 	bl	8002698 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000c0 	.word	0x200000c0

08000934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800093c:	4a14      	ldr	r2, [pc, #80]	@ (8000990 <_sbrk+0x5c>)
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <_sbrk+0x60>)
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000948:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d102      	bne.n	8000956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <_sbrk+0x64>)
 8000952:	4a12      	ldr	r2, [pc, #72]	@ (800099c <_sbrk+0x68>)
 8000954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	429a      	cmp	r2, r3
 8000962:	d207      	bcs.n	8000974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000964:	f003 fa74 	bl	8003e50 <__errno>
 8000968:	4603      	mov	r3, r0
 800096a:	220c      	movs	r2, #12
 800096c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000972:	e009      	b.n	8000988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000974:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097a:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	4a05      	ldr	r2, [pc, #20]	@ (8000998 <_sbrk+0x64>)
 8000984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000986:	68fb      	ldr	r3, [r7, #12]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20002800 	.word	0x20002800
 8000994:	00000400 	.word	0x00000400
 8000998:	20000150 	.word	0x20000150
 800099c:	200002a0 	.word	0x200002a0

080009a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009ac:	f7ff fff8 	bl	80009a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480b      	ldr	r0, [pc, #44]	@ (80009e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009b2:	490c      	ldr	r1, [pc, #48]	@ (80009e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009b4:	4a0c      	ldr	r2, [pc, #48]	@ (80009e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a09      	ldr	r2, [pc, #36]	@ (80009ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009c8:	4c09      	ldr	r4, [pc, #36]	@ (80009f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009d6:	f003 fa41 	bl	8003e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009da:	f7ff fbbf 	bl	800015c <main>
  bx lr
 80009de:	4770      	bx	lr
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80009e8:	08004988 	.word	0x08004988
  ldr r2, =_sbss
 80009ec:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80009f0:	200002a0 	.word	0x200002a0

080009f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f4:	e7fe      	b.n	80009f4 <ADC1_2_IRQHandler>
	...

080009f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009fc:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <HAL_Init+0x28>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a07      	ldr	r2, [pc, #28]	@ (8000a20 <HAL_Init+0x28>)
 8000a02:	f043 0310 	orr.w	r3, r3, #16
 8000a06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a08:	2003      	movs	r0, #3
 8000a0a:	f000 f923 	bl	8000c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0e:	200f      	movs	r0, #15
 8000a10:	f000 f808 	bl	8000a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a14:	f7ff fe36 	bl	8000684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40022000 	.word	0x40022000

08000a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <HAL_InitTick+0x54>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <HAL_InitTick+0x58>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f96a 	bl	8000d1c <HAL_SYSTICK_Config>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00e      	b.n	8000a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d80a      	bhi.n	8000a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a60:	f000 f918 	bl	8000c94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a64:	4a06      	ldr	r2, [pc, #24]	@ (8000a80 <HAL_InitTick+0x5c>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e000      	b.n	8000a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	20000004 	.word	0x20000004

08000a84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a88:	4b05      	ldr	r3, [pc, #20]	@ (8000aa0 <HAL_IncTick+0x1c>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b05      	ldr	r3, [pc, #20]	@ (8000aa4 <HAL_IncTick+0x20>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a03      	ldr	r2, [pc, #12]	@ (8000aa4 <HAL_IncTick+0x20>)
 8000a96:	6013      	str	r3, [r2, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000154 	.word	0x20000154

08000aa8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000aac:	4b02      	ldr	r3, [pc, #8]	@ (8000ab8 <HAL_GetTick+0x10>)
 8000aae:	681b      	ldr	r3, [r3, #0]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	20000154 	.word	0x20000154

08000abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000acc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aee:	4a04      	ldr	r2, [pc, #16]	@ (8000b00 <__NVIC_SetPriorityGrouping+0x44>)
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	60d3      	str	r3, [r2, #12]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b08:	4b04      	ldr	r3, [pc, #16]	@ (8000b1c <__NVIC_GetPriorityGrouping+0x18>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	0a1b      	lsrs	r3, r3, #8
 8000b0e:	f003 0307 	and.w	r3, r3, #7
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	db0b      	blt.n	8000b4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	f003 021f 	and.w	r2, r3, #31
 8000b38:	4906      	ldr	r1, [pc, #24]	@ (8000b54 <__NVIC_EnableIRQ+0x34>)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	095b      	lsrs	r3, r3, #5
 8000b40:	2001      	movs	r0, #1
 8000b42:	fa00 f202 	lsl.w	r2, r0, r2
 8000b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	e000e100 	.word	0xe000e100

08000b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	db0a      	blt.n	8000b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	490c      	ldr	r1, [pc, #48]	@ (8000ba4 <__NVIC_SetPriority+0x4c>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	0112      	lsls	r2, r2, #4
 8000b78:	b2d2      	uxtb	r2, r2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b80:	e00a      	b.n	8000b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4908      	ldr	r1, [pc, #32]	@ (8000ba8 <__NVIC_SetPriority+0x50>)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	3b04      	subs	r3, #4
 8000b90:	0112      	lsls	r2, r2, #4
 8000b92:	b2d2      	uxtb	r2, r2
 8000b94:	440b      	add	r3, r1
 8000b96:	761a      	strb	r2, [r3, #24]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000e100 	.word	0xe000e100
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	@ 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	f1c3 0307 	rsb	r3, r3, #7
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	bf28      	it	cs
 8000bca:	2304      	movcs	r3, #4
 8000bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	2b06      	cmp	r3, #6
 8000bd4:	d902      	bls.n	8000bdc <NVIC_EncodePriority+0x30>
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3b03      	subs	r3, #3
 8000bda:	e000      	b.n	8000bde <NVIC_EncodePriority+0x32>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43da      	mvns	r2, r3
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	401a      	ands	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	43d9      	mvns	r1, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	4313      	orrs	r3, r2
         );
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3724      	adds	r7, #36	@ 0x24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c20:	d301      	bcc.n	8000c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00f      	b.n	8000c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <SysTick_Config+0x40>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2e:	210f      	movs	r1, #15
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c34:	f7ff ff90 	bl	8000b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c38:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <SysTick_Config+0x40>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3e:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <SysTick_Config+0x40>)
 8000c40:	2207      	movs	r2, #7
 8000c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	e000e010 	.word	0xe000e010

08000c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b07      	cmp	r3, #7
 8000c60:	d00f      	beq.n	8000c82 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b06      	cmp	r3, #6
 8000c66:	d00c      	beq.n	8000c82 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b05      	cmp	r3, #5
 8000c6c:	d009      	beq.n	8000c82 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b04      	cmp	r3, #4
 8000c72:	d006      	beq.n	8000c82 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d003      	beq.n	8000c82 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c7a:	2191      	movs	r1, #145	@ 0x91
 8000c7c:	4804      	ldr	r0, [pc, #16]	@ (8000c90 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000c7e:	f7ff fcf7 	bl	8000670 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff ff1a 	bl	8000abc <__NVIC_SetPriorityGrouping>
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	08004780 	.word	0x08004780

08000c94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
 8000ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b0f      	cmp	r3, #15
 8000caa:	d903      	bls.n	8000cb4 <HAL_NVIC_SetPriority+0x20>
 8000cac:	21a9      	movs	r1, #169	@ 0xa9
 8000cae:	480e      	ldr	r0, [pc, #56]	@ (8000ce8 <HAL_NVIC_SetPriority+0x54>)
 8000cb0:	f7ff fcde 	bl	8000670 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	2b0f      	cmp	r3, #15
 8000cb8:	d903      	bls.n	8000cc2 <HAL_NVIC_SetPriority+0x2e>
 8000cba:	21aa      	movs	r1, #170	@ 0xaa
 8000cbc:	480a      	ldr	r0, [pc, #40]	@ (8000ce8 <HAL_NVIC_SetPriority+0x54>)
 8000cbe:	f7ff fcd7 	bl	8000670 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc2:	f7ff ff1f 	bl	8000b04 <__NVIC_GetPriorityGrouping>
 8000cc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	68b9      	ldr	r1, [r7, #8]
 8000ccc:	6978      	ldr	r0, [r7, #20]
 8000cce:	f7ff ff6d 	bl	8000bac <NVIC_EncodePriority>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff3c 	bl	8000b58 <__NVIC_SetPriority>
}
 8000ce0:	bf00      	nop
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	08004780 	.word	0x08004780

08000cec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	da03      	bge.n	8000d06 <HAL_NVIC_EnableIRQ+0x1a>
 8000cfe:	21bd      	movs	r1, #189	@ 0xbd
 8000d00:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <HAL_NVIC_EnableIRQ+0x2c>)
 8000d02:	f7ff fcb5 	bl	8000670 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff08 	bl	8000b20 <__NVIC_EnableIRQ>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	08004780 	.word	0x08004780

08000d1c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ff73 	bl	8000c10 <SysTick_Config>
 8000d2a:	4603      	mov	r3, r0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	@ 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a92      	ldr	r2, [pc, #584]	@ (8000f94 <HAL_GPIO_Init+0x260>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d00f      	beq.n	8000d6e <HAL_GPIO_Init+0x3a>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a91      	ldr	r2, [pc, #580]	@ (8000f98 <HAL_GPIO_Init+0x264>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d00b      	beq.n	8000d6e <HAL_GPIO_Init+0x3a>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a90      	ldr	r2, [pc, #576]	@ (8000f9c <HAL_GPIO_Init+0x268>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d007      	beq.n	8000d6e <HAL_GPIO_Init+0x3a>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a8f      	ldr	r2, [pc, #572]	@ (8000fa0 <HAL_GPIO_Init+0x26c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_Init+0x3a>
 8000d66:	21bd      	movs	r1, #189	@ 0xbd
 8000d68:	488e      	ldr	r0, [pc, #568]	@ (8000fa4 <HAL_GPIO_Init+0x270>)
 8000d6a:	f7ff fc81 	bl	8000670 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d004      	beq.n	8000d82 <HAL_GPIO_Init+0x4e>
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d80:	d303      	bcc.n	8000d8a <HAL_GPIO_Init+0x56>
 8000d82:	21be      	movs	r1, #190	@ 0xbe
 8000d84:	4887      	ldr	r0, [pc, #540]	@ (8000fa4 <HAL_GPIO_Init+0x270>)
 8000d86:	f7ff fc73 	bl	8000670 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 8211 	beq.w	80011b6 <HAL_GPIO_Init+0x482>
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	f000 820c 	beq.w	80011b6 <HAL_GPIO_Init+0x482>
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b11      	cmp	r3, #17
 8000da4:	f000 8207 	beq.w	80011b6 <HAL_GPIO_Init+0x482>
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	f000 8202 	beq.w	80011b6 <HAL_GPIO_Init+0x482>
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b12      	cmp	r3, #18
 8000db8:	f000 81fd 	beq.w	80011b6 <HAL_GPIO_Init+0x482>
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	4a79      	ldr	r2, [pc, #484]	@ (8000fa8 <HAL_GPIO_Init+0x274>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	f000 81f7 	beq.w	80011b6 <HAL_GPIO_Init+0x482>
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	4a77      	ldr	r2, [pc, #476]	@ (8000fac <HAL_GPIO_Init+0x278>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	f000 81f1 	beq.w	80011b6 <HAL_GPIO_Init+0x482>
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	4a75      	ldr	r2, [pc, #468]	@ (8000fb0 <HAL_GPIO_Init+0x27c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	f000 81eb 	beq.w	80011b6 <HAL_GPIO_Init+0x482>
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	4a73      	ldr	r2, [pc, #460]	@ (8000fb4 <HAL_GPIO_Init+0x280>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	f000 81e5 	beq.w	80011b6 <HAL_GPIO_Init+0x482>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	4a71      	ldr	r2, [pc, #452]	@ (8000fb8 <HAL_GPIO_Init+0x284>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	f000 81df 	beq.w	80011b6 <HAL_GPIO_Init+0x482>
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	4a6f      	ldr	r2, [pc, #444]	@ (8000fbc <HAL_GPIO_Init+0x288>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	f000 81d9 	beq.w	80011b6 <HAL_GPIO_Init+0x482>
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	f000 81d4 	beq.w	80011b6 <HAL_GPIO_Init+0x482>
 8000e0e:	21bf      	movs	r1, #191	@ 0xbf
 8000e10:	4864      	ldr	r0, [pc, #400]	@ (8000fa4 <HAL_GPIO_Init+0x270>)
 8000e12:	f7ff fc2d 	bl	8000670 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e16:	e1ce      	b.n	80011b6 <HAL_GPIO_Init+0x482>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	69fa      	ldr	r2, [r7, #28]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	f040 81bd 	bne.w	80011b0 <HAL_GPIO_Init+0x47c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a56      	ldr	r2, [pc, #344]	@ (8000f94 <HAL_GPIO_Init+0x260>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d00f      	beq.n	8000e5e <HAL_GPIO_Init+0x12a>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a55      	ldr	r2, [pc, #340]	@ (8000f98 <HAL_GPIO_Init+0x264>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d00b      	beq.n	8000e5e <HAL_GPIO_Init+0x12a>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a54      	ldr	r2, [pc, #336]	@ (8000f9c <HAL_GPIO_Init+0x268>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d007      	beq.n	8000e5e <HAL_GPIO_Init+0x12a>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a53      	ldr	r2, [pc, #332]	@ (8000fa0 <HAL_GPIO_Init+0x26c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0x12a>
 8000e56:	21cd      	movs	r1, #205	@ 0xcd
 8000e58:	4852      	ldr	r0, [pc, #328]	@ (8000fa4 <HAL_GPIO_Init+0x270>)
 8000e5a:	f7ff fc09 	bl	8000670 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	4a56      	ldr	r2, [pc, #344]	@ (8000fbc <HAL_GPIO_Init+0x288>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	f000 80c0 	beq.w	8000fea <HAL_GPIO_Init+0x2b6>
 8000e6a:	4a54      	ldr	r2, [pc, #336]	@ (8000fbc <HAL_GPIO_Init+0x288>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	f200 80e6 	bhi.w	800103e <HAL_GPIO_Init+0x30a>
 8000e72:	4a4f      	ldr	r2, [pc, #316]	@ (8000fb0 <HAL_GPIO_Init+0x27c>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	f000 80b8 	beq.w	8000fea <HAL_GPIO_Init+0x2b6>
 8000e7a:	4a4d      	ldr	r2, [pc, #308]	@ (8000fb0 <HAL_GPIO_Init+0x27c>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	f200 80de 	bhi.w	800103e <HAL_GPIO_Init+0x30a>
 8000e82:	4a4d      	ldr	r2, [pc, #308]	@ (8000fb8 <HAL_GPIO_Init+0x284>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	f000 80b0 	beq.w	8000fea <HAL_GPIO_Init+0x2b6>
 8000e8a:	4a4b      	ldr	r2, [pc, #300]	@ (8000fb8 <HAL_GPIO_Init+0x284>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	f200 80d6 	bhi.w	800103e <HAL_GPIO_Init+0x30a>
 8000e92:	4a46      	ldr	r2, [pc, #280]	@ (8000fac <HAL_GPIO_Init+0x278>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	f000 80a8 	beq.w	8000fea <HAL_GPIO_Init+0x2b6>
 8000e9a:	4a44      	ldr	r2, [pc, #272]	@ (8000fac <HAL_GPIO_Init+0x278>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	f200 80ce 	bhi.w	800103e <HAL_GPIO_Init+0x30a>
 8000ea2:	4a44      	ldr	r2, [pc, #272]	@ (8000fb4 <HAL_GPIO_Init+0x280>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	f000 80a0 	beq.w	8000fea <HAL_GPIO_Init+0x2b6>
 8000eaa:	4a42      	ldr	r2, [pc, #264]	@ (8000fb4 <HAL_GPIO_Init+0x280>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	f200 80c6 	bhi.w	800103e <HAL_GPIO_Init+0x30a>
 8000eb2:	2b12      	cmp	r3, #18
 8000eb4:	d82c      	bhi.n	8000f10 <HAL_GPIO_Init+0x1dc>
 8000eb6:	2b12      	cmp	r3, #18
 8000eb8:	f200 80c1 	bhi.w	800103e <HAL_GPIO_Init+0x30a>
 8000ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ec4 <HAL_GPIO_Init+0x190>)
 8000ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec2:	bf00      	nop
 8000ec4:	08000feb 	.word	0x08000feb
 8000ec8:	08000f19 	.word	0x08000f19
 8000ecc:	08000f6b 	.word	0x08000f6b
 8000ed0:	08001039 	.word	0x08001039
 8000ed4:	0800103f 	.word	0x0800103f
 8000ed8:	0800103f 	.word	0x0800103f
 8000edc:	0800103f 	.word	0x0800103f
 8000ee0:	0800103f 	.word	0x0800103f
 8000ee4:	0800103f 	.word	0x0800103f
 8000ee8:	0800103f 	.word	0x0800103f
 8000eec:	0800103f 	.word	0x0800103f
 8000ef0:	0800103f 	.word	0x0800103f
 8000ef4:	0800103f 	.word	0x0800103f
 8000ef8:	0800103f 	.word	0x0800103f
 8000efc:	0800103f 	.word	0x0800103f
 8000f00:	0800103f 	.word	0x0800103f
 8000f04:	0800103f 	.word	0x0800103f
 8000f08:	08000f41 	.word	0x08000f41
 8000f0c:	08000fc1 	.word	0x08000fc1
 8000f10:	4a25      	ldr	r2, [pc, #148]	@ (8000fa8 <HAL_GPIO_Init+0x274>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d069      	beq.n	8000fea <HAL_GPIO_Init+0x2b6>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f16:	e092      	b.n	800103e <HAL_GPIO_Init+0x30a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d00b      	beq.n	8000f38 <HAL_GPIO_Init+0x204>
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d007      	beq.n	8000f38 <HAL_GPIO_Init+0x204>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x204>
 8000f30:	21d5      	movs	r1, #213	@ 0xd5
 8000f32:	481c      	ldr	r0, [pc, #112]	@ (8000fa4 <HAL_GPIO_Init+0x270>)
 8000f34:	f7ff fb9c 	bl	8000670 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	623b      	str	r3, [r7, #32]
          break;
 8000f3e:	e07f      	b.n	8001040 <HAL_GPIO_Init+0x30c>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d00b      	beq.n	8000f60 <HAL_GPIO_Init+0x22c>
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d007      	beq.n	8000f60 <HAL_GPIO_Init+0x22c>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x22c>
 8000f58:	21dc      	movs	r1, #220	@ 0xdc
 8000f5a:	4812      	ldr	r0, [pc, #72]	@ (8000fa4 <HAL_GPIO_Init+0x270>)
 8000f5c:	f7ff fb88 	bl	8000670 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	3304      	adds	r3, #4
 8000f66:	623b      	str	r3, [r7, #32]
          break;
 8000f68:	e06a      	b.n	8001040 <HAL_GPIO_Init+0x30c>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d00b      	beq.n	8000f8a <HAL_GPIO_Init+0x256>
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d007      	beq.n	8000f8a <HAL_GPIO_Init+0x256>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x256>
 8000f82:	21e3      	movs	r1, #227	@ 0xe3
 8000f84:	4807      	ldr	r0, [pc, #28]	@ (8000fa4 <HAL_GPIO_Init+0x270>)
 8000f86:	f7ff fb73 	bl	8000670 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	3308      	adds	r3, #8
 8000f90:	623b      	str	r3, [r7, #32]
          break;
 8000f92:	e055      	b.n	8001040 <HAL_GPIO_Init+0x30c>
 8000f94:	40010800 	.word	0x40010800
 8000f98:	40010c00 	.word	0x40010c00
 8000f9c:	40011000 	.word	0x40011000
 8000fa0:	40011400 	.word	0x40011400
 8000fa4:	080047bc 	.word	0x080047bc
 8000fa8:	10110000 	.word	0x10110000
 8000fac:	10210000 	.word	0x10210000
 8000fb0:	10310000 	.word	0x10310000
 8000fb4:	10120000 	.word	0x10120000
 8000fb8:	10220000 	.word	0x10220000
 8000fbc:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d00b      	beq.n	8000fe0 <HAL_GPIO_Init+0x2ac>
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d007      	beq.n	8000fe0 <HAL_GPIO_Init+0x2ac>
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x2ac>
 8000fd8:	21ea      	movs	r1, #234	@ 0xea
 8000fda:	487d      	ldr	r0, [pc, #500]	@ (80011d0 <HAL_GPIO_Init+0x49c>)
 8000fdc:	f7ff fb48 	bl	8000670 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	330c      	adds	r3, #12
 8000fe6:	623b      	str	r3, [r7, #32]
          break;
 8000fe8:	e02a      	b.n	8001040 <HAL_GPIO_Init+0x30c>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00b      	beq.n	800100a <HAL_GPIO_Init+0x2d6>
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x2d6>
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x2d6>
 8001002:	21f7      	movs	r1, #247	@ 0xf7
 8001004:	4872      	ldr	r0, [pc, #456]	@ (80011d0 <HAL_GPIO_Init+0x49c>)
 8001006:	f7ff fb33 	bl	8000670 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d102      	bne.n	8001018 <HAL_GPIO_Init+0x2e4>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001012:	2304      	movs	r3, #4
 8001014:	623b      	str	r3, [r7, #32]
          break;
 8001016:	e013      	b.n	8001040 <HAL_GPIO_Init+0x30c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d105      	bne.n	800102c <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001020:	2308      	movs	r3, #8
 8001022:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69fa      	ldr	r2, [r7, #28]
 8001028:	611a      	str	r2, [r3, #16]
          break;
 800102a:	e009      	b.n	8001040 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800102c:	2308      	movs	r3, #8
 800102e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69fa      	ldr	r2, [r7, #28]
 8001034:	615a      	str	r2, [r3, #20]
          break;
 8001036:	e003      	b.n	8001040 <HAL_GPIO_Init+0x30c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001038:	2300      	movs	r3, #0
 800103a:	623b      	str	r3, [r7, #32]
          break;
 800103c:	e000      	b.n	8001040 <HAL_GPIO_Init+0x30c>
          break;
 800103e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	2bff      	cmp	r3, #255	@ 0xff
 8001044:	d801      	bhi.n	800104a <HAL_GPIO_Init+0x316>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	e001      	b.n	800104e <HAL_GPIO_Init+0x31a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3304      	adds	r3, #4
 800104e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2bff      	cmp	r3, #255	@ 0xff
 8001054:	d802      	bhi.n	800105c <HAL_GPIO_Init+0x328>
 8001056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	e002      	b.n	8001062 <HAL_GPIO_Init+0x32e>
 800105c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105e:	3b08      	subs	r3, #8
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	210f      	movs	r1, #15
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	fa01 f303 	lsl.w	r3, r1, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	401a      	ands	r2, r3
 8001074:	6a39      	ldr	r1, [r7, #32]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	fa01 f303 	lsl.w	r3, r1, r3
 800107c:	431a      	orrs	r2, r3
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 8090 	beq.w	80011b0 <HAL_GPIO_Init+0x47c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001090:	4b50      	ldr	r3, [pc, #320]	@ (80011d4 <HAL_GPIO_Init+0x4a0>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a4f      	ldr	r2, [pc, #316]	@ (80011d4 <HAL_GPIO_Init+0x4a0>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b4d      	ldr	r3, [pc, #308]	@ (80011d4 <HAL_GPIO_Init+0x4a0>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010a8:	4a4b      	ldr	r2, [pc, #300]	@ (80011d8 <HAL_GPIO_Init+0x4a4>)
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3302      	adds	r3, #2
 80010b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	220f      	movs	r2, #15
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	4013      	ands	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4a43      	ldr	r2, [pc, #268]	@ (80011dc <HAL_GPIO_Init+0x4a8>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d00d      	beq.n	80010f0 <HAL_GPIO_Init+0x3bc>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a42      	ldr	r2, [pc, #264]	@ (80011e0 <HAL_GPIO_Init+0x4ac>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d007      	beq.n	80010ec <HAL_GPIO_Init+0x3b8>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a41      	ldr	r2, [pc, #260]	@ (80011e4 <HAL_GPIO_Init+0x4b0>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d101      	bne.n	80010e8 <HAL_GPIO_Init+0x3b4>
 80010e4:	2302      	movs	r3, #2
 80010e6:	e004      	b.n	80010f2 <HAL_GPIO_Init+0x3be>
 80010e8:	2303      	movs	r3, #3
 80010ea:	e002      	b.n	80010f2 <HAL_GPIO_Init+0x3be>
 80010ec:	2301      	movs	r3, #1
 80010ee:	e000      	b.n	80010f2 <HAL_GPIO_Init+0x3be>
 80010f0:	2300      	movs	r3, #0
 80010f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010f4:	f002 0203 	and.w	r2, r2, #3
 80010f8:	0092      	lsls	r2, r2, #2
 80010fa:	4093      	lsls	r3, r2
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001102:	4935      	ldr	r1, [pc, #212]	@ (80011d8 <HAL_GPIO_Init+0x4a4>)
 8001104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d006      	beq.n	800112a <HAL_GPIO_Init+0x3f6>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800111c:	4b32      	ldr	r3, [pc, #200]	@ (80011e8 <HAL_GPIO_Init+0x4b4>)
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	4931      	ldr	r1, [pc, #196]	@ (80011e8 <HAL_GPIO_Init+0x4b4>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	608b      	str	r3, [r1, #8]
 8001128:	e006      	b.n	8001138 <HAL_GPIO_Init+0x404>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800112a:	4b2f      	ldr	r3, [pc, #188]	@ (80011e8 <HAL_GPIO_Init+0x4b4>)
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	43db      	mvns	r3, r3
 8001132:	492d      	ldr	r1, [pc, #180]	@ (80011e8 <HAL_GPIO_Init+0x4b4>)
 8001134:	4013      	ands	r3, r2
 8001136:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <HAL_GPIO_Init+0x41e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001144:	4b28      	ldr	r3, [pc, #160]	@ (80011e8 <HAL_GPIO_Init+0x4b4>)
 8001146:	68da      	ldr	r2, [r3, #12]
 8001148:	4927      	ldr	r1, [pc, #156]	@ (80011e8 <HAL_GPIO_Init+0x4b4>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	60cb      	str	r3, [r1, #12]
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x42c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001152:	4b25      	ldr	r3, [pc, #148]	@ (80011e8 <HAL_GPIO_Init+0x4b4>)
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	43db      	mvns	r3, r3
 800115a:	4923      	ldr	r1, [pc, #140]	@ (80011e8 <HAL_GPIO_Init+0x4b4>)
 800115c:	4013      	ands	r3, r2
 800115e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d006      	beq.n	800117a <HAL_GPIO_Init+0x446>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800116c:	4b1e      	ldr	r3, [pc, #120]	@ (80011e8 <HAL_GPIO_Init+0x4b4>)
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	491d      	ldr	r1, [pc, #116]	@ (80011e8 <HAL_GPIO_Init+0x4b4>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	604b      	str	r3, [r1, #4]
 8001178:	e006      	b.n	8001188 <HAL_GPIO_Init+0x454>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800117a:	4b1b      	ldr	r3, [pc, #108]	@ (80011e8 <HAL_GPIO_Init+0x4b4>)
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	43db      	mvns	r3, r3
 8001182:	4919      	ldr	r1, [pc, #100]	@ (80011e8 <HAL_GPIO_Init+0x4b4>)
 8001184:	4013      	ands	r3, r2
 8001186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d006      	beq.n	80011a2 <HAL_GPIO_Init+0x46e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001194:	4b14      	ldr	r3, [pc, #80]	@ (80011e8 <HAL_GPIO_Init+0x4b4>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4913      	ldr	r1, [pc, #76]	@ (80011e8 <HAL_GPIO_Init+0x4b4>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	600b      	str	r3, [r1, #0]
 80011a0:	e006      	b.n	80011b0 <HAL_GPIO_Init+0x47c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011a2:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <HAL_GPIO_Init+0x4b4>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	490f      	ldr	r1, [pc, #60]	@ (80011e8 <HAL_GPIO_Init+0x4b4>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b2:	3301      	adds	r3, #1
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011bc:	fa22 f303 	lsr.w	r3, r2, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f47f ae29 	bne.w	8000e18 <HAL_GPIO_Init+0xe4>
  }
}
 80011c6:	bf00      	nop
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	@ 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	080047bc 	.word	0x080047bc
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010000 	.word	0x40010000
 80011dc:	40010800 	.word	0x40010800
 80011e0:	40010c00 	.word	0x40010c00
 80011e4:	40011000 	.word	0x40011000
 80011e8:	40010400 	.word	0x40010400

080011ec <HAL_PWR_EnableWakeUpPin>:
  *        This parameter can be one of the following values:
  *           @arg PWR_WAKEUP_PIN1
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011fa:	d004      	beq.n	8001206 <HAL_PWR_EnableWakeUpPin+0x1a>
 80011fc:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8001200:	480b      	ldr	r0, [pc, #44]	@ (8001230 <HAL_PWR_EnableWakeUpPin+0x44>)
 8001202:	f7ff fa35 	bl	8000670 <assert_failed>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	fa93 f3a3 	rbit	r3, r3
 8001210:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001212:	68bb      	ldr	r3, [r7, #8]
  /* Enable the EWUPx pin */
  *(__IO uint32_t *) CSR_EWUP_BB(WakeUpPinx) = (uint32_t)ENABLE;
 8001214:	fab3 f383 	clz	r3, r3
 8001218:	b2db      	uxtb	r3, r3
 800121a:	461a      	mov	r2, r3
 800121c:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <HAL_PWR_EnableWakeUpPin+0x48>)
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	461a      	mov	r2, r3
 8001224:	2301      	movs	r3, #1
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	080047f8 	.word	0x080047f8
 8001234:	10838020 	.word	0x10838020

08001238 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	@ (8001260 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	4a05      	ldr	r2, [pc, #20]	@ (8001264 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800124e:	f043 0304 	orr.w	r3, r3, #4
 8001252:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001254:	bf30      	wfi
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40007000 	.word	0x40007000
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e35a      	b.n	8001930 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d01c      	beq.n	80012bc <HAL_RCC_OscConfig+0x54>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	2b00      	cmp	r3, #0
 800128c:	d116      	bne.n	80012bc <HAL_RCC_OscConfig+0x54>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d110      	bne.n	80012bc <HAL_RCC_OscConfig+0x54>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10a      	bne.n	80012bc <HAL_RCC_OscConfig+0x54>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d104      	bne.n	80012bc <HAL_RCC_OscConfig+0x54>
 80012b2:	f240 1165 	movw	r1, #357	@ 0x165
 80012b6:	488f      	ldr	r0, [pc, #572]	@ (80014f4 <HAL_RCC_OscConfig+0x28c>)
 80012b8:	f7ff f9da 	bl	8000670 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 809a 	beq.w	80013fe <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00e      	beq.n	80012f0 <HAL_RCC_OscConfig+0x88>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012da:	d009      	beq.n	80012f0 <HAL_RCC_OscConfig+0x88>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012e4:	d004      	beq.n	80012f0 <HAL_RCC_OscConfig+0x88>
 80012e6:	f240 116b 	movw	r1, #363	@ 0x16b
 80012ea:	4882      	ldr	r0, [pc, #520]	@ (80014f4 <HAL_RCC_OscConfig+0x28c>)
 80012ec:	f7ff f9c0 	bl	8000670 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012f0:	4b81      	ldr	r3, [pc, #516]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 030c 	and.w	r3, r3, #12
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d00c      	beq.n	8001316 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012fc:	4b7e      	ldr	r3, [pc, #504]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b08      	cmp	r3, #8
 8001306:	d112      	bne.n	800132e <HAL_RCC_OscConfig+0xc6>
 8001308:	4b7b      	ldr	r3, [pc, #492]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001314:	d10b      	bne.n	800132e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001316:	4b78      	ldr	r3, [pc, #480]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d06c      	beq.n	80013fc <HAL_RCC_OscConfig+0x194>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d168      	bne.n	80013fc <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e300      	b.n	8001930 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001336:	d106      	bne.n	8001346 <HAL_RCC_OscConfig+0xde>
 8001338:	4b6f      	ldr	r3, [pc, #444]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a6e      	ldr	r2, [pc, #440]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 800133e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e02e      	b.n	80013a4 <HAL_RCC_OscConfig+0x13c>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x100>
 800134e:	4b6a      	ldr	r3, [pc, #424]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a69      	ldr	r2, [pc, #420]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 8001354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b67      	ldr	r3, [pc, #412]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a66      	ldr	r2, [pc, #408]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 8001360:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e01d      	b.n	80013a4 <HAL_RCC_OscConfig+0x13c>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x124>
 8001372:	4b61      	ldr	r3, [pc, #388]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a60      	ldr	r2, [pc, #384]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 8001378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b5e      	ldr	r3, [pc, #376]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a5d      	ldr	r2, [pc, #372]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e00b      	b.n	80013a4 <HAL_RCC_OscConfig+0x13c>
 800138c:	4b5a      	ldr	r3, [pc, #360]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a59      	ldr	r2, [pc, #356]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 8001392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b57      	ldr	r3, [pc, #348]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a56      	ldr	r2, [pc, #344]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 800139e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d013      	beq.n	80013d4 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fb7c 	bl	8000aa8 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fb78 	bl	8000aa8 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	@ 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e2b4      	b.n	8001930 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c6:	4b4c      	ldr	r3, [pc, #304]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0x14c>
 80013d2:	e014      	b.n	80013fe <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fb68 	bl	8000aa8 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fb64 	bl	8000aa8 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	@ 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e2a0      	b.n	8001930 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	4b42      	ldr	r3, [pc, #264]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x174>
 80013fa:	e000      	b.n	80013fe <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 8080 	beq.w	800150c <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d008      	beq.n	8001426 <HAL_RCC_OscConfig+0x1be>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d004      	beq.n	8001426 <HAL_RCC_OscConfig+0x1be>
 800141c:	f240 119f 	movw	r1, #415	@ 0x19f
 8001420:	4834      	ldr	r0, [pc, #208]	@ (80014f4 <HAL_RCC_OscConfig+0x28c>)
 8001422:	f7ff f925 	bl	8000670 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	2b1f      	cmp	r3, #31
 800142c:	d904      	bls.n	8001438 <HAL_RCC_OscConfig+0x1d0>
 800142e:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8001432:	4830      	ldr	r0, [pc, #192]	@ (80014f4 <HAL_RCC_OscConfig+0x28c>)
 8001434:	f7ff f91c 	bl	8000670 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001438:	4b2f      	ldr	r3, [pc, #188]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 030c 	and.w	r3, r3, #12
 8001440:	2b00      	cmp	r3, #0
 8001442:	d00b      	beq.n	800145c <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001444:	4b2c      	ldr	r3, [pc, #176]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 030c 	and.w	r3, r3, #12
 800144c:	2b08      	cmp	r3, #8
 800144e:	d11c      	bne.n	800148a <HAL_RCC_OscConfig+0x222>
 8001450:	4b29      	ldr	r3, [pc, #164]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d116      	bne.n	800148a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145c:	4b26      	ldr	r3, [pc, #152]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_RCC_OscConfig+0x20c>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d001      	beq.n	8001474 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e25d      	b.n	8001930 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001474:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	491d      	ldr	r1, [pc, #116]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 8001484:	4313      	orrs	r3, r2
 8001486:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001488:	e040      	b.n	800150c <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d020      	beq.n	80014d4 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001492:	4b1a      	ldr	r3, [pc, #104]	@ (80014fc <HAL_RCC_OscConfig+0x294>)
 8001494:	2201      	movs	r2, #1
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fb06 	bl	8000aa8 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fb02 	bl	8000aa8 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e23e      	b.n	8001930 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b2:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	490a      	ldr	r1, [pc, #40]	@ (80014f8 <HAL_RCC_OscConfig+0x290>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	600b      	str	r3, [r1, #0]
 80014d2:	e01b      	b.n	800150c <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d4:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <HAL_RCC_OscConfig+0x294>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff fae5 	bl	8000aa8 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e0:	e00e      	b.n	8001500 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e2:	f7ff fae1 	bl	8000aa8 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d907      	bls.n	8001500 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e21d      	b.n	8001930 <HAL_RCC_OscConfig+0x6c8>
 80014f4:	08004830 	.word	0x08004830
 80014f8:	40021000 	.word	0x40021000
 80014fc:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001500:	4b7d      	ldr	r3, [pc, #500]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d1ea      	bne.n	80014e2 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	2b00      	cmp	r3, #0
 8001516:	d040      	beq.n	800159a <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <HAL_RCC_OscConfig+0x2ca>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d004      	beq.n	8001532 <HAL_RCC_OscConfig+0x2ca>
 8001528:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800152c:	4873      	ldr	r0, [pc, #460]	@ (80016fc <HAL_RCC_OscConfig+0x494>)
 800152e:	f7ff f89f 	bl	8000670 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d019      	beq.n	800156e <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153a:	4b71      	ldr	r3, [pc, #452]	@ (8001700 <HAL_RCC_OscConfig+0x498>)
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001540:	f7ff fab2 	bl	8000aa8 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001548:	f7ff faae 	bl	8000aa8 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e1ea      	b.n	8001930 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155a:	4b67      	ldr	r3, [pc, #412]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001566:	2001      	movs	r0, #1
 8001568:	f000 fc02 	bl	8001d70 <RCC_Delay>
 800156c:	e015      	b.n	800159a <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800156e:	4b64      	ldr	r3, [pc, #400]	@ (8001700 <HAL_RCC_OscConfig+0x498>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001574:	f7ff fa98 	bl	8000aa8 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157c:	f7ff fa94 	bl	8000aa8 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e1d0      	b.n	8001930 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800158e:	4b5a      	ldr	r3, [pc, #360]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 8001590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80bf 	beq.w	8001726 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00c      	beq.n	80015ce <HAL_RCC_OscConfig+0x366>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d008      	beq.n	80015ce <HAL_RCC_OscConfig+0x366>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	2b05      	cmp	r3, #5
 80015c2:	d004      	beq.n	80015ce <HAL_RCC_OscConfig+0x366>
 80015c4:	f240 210f 	movw	r1, #527	@ 0x20f
 80015c8:	484c      	ldr	r0, [pc, #304]	@ (80016fc <HAL_RCC_OscConfig+0x494>)
 80015ca:	f7ff f851 	bl	8000670 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ce:	4b4a      	ldr	r3, [pc, #296]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10d      	bne.n	80015f6 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	4b47      	ldr	r3, [pc, #284]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	4a46      	ldr	r2, [pc, #280]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e4:	61d3      	str	r3, [r2, #28]
 80015e6:	4b44      	ldr	r3, [pc, #272]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f2:	2301      	movs	r3, #1
 80015f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f6:	4b43      	ldr	r3, [pc, #268]	@ (8001704 <HAL_RCC_OscConfig+0x49c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d118      	bne.n	8001634 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001602:	4b40      	ldr	r3, [pc, #256]	@ (8001704 <HAL_RCC_OscConfig+0x49c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a3f      	ldr	r2, [pc, #252]	@ (8001704 <HAL_RCC_OscConfig+0x49c>)
 8001608:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800160c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800160e:	f7ff fa4b 	bl	8000aa8 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	e008      	b.n	8001628 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001616:	f7ff fa47 	bl	8000aa8 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b64      	cmp	r3, #100	@ 0x64
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e183      	b.n	8001930 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001628:	4b36      	ldr	r3, [pc, #216]	@ (8001704 <HAL_RCC_OscConfig+0x49c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0f0      	beq.n	8001616 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d106      	bne.n	800164a <HAL_RCC_OscConfig+0x3e2>
 800163c:	4b2e      	ldr	r3, [pc, #184]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4a2d      	ldr	r2, [pc, #180]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6213      	str	r3, [r2, #32]
 8001648:	e02d      	b.n	80016a6 <HAL_RCC_OscConfig+0x43e>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0x404>
 8001652:	4b29      	ldr	r3, [pc, #164]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	4a28      	ldr	r2, [pc, #160]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	6213      	str	r3, [r2, #32]
 800165e:	4b26      	ldr	r3, [pc, #152]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4a25      	ldr	r2, [pc, #148]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 8001664:	f023 0304 	bic.w	r3, r3, #4
 8001668:	6213      	str	r3, [r2, #32]
 800166a:	e01c      	b.n	80016a6 <HAL_RCC_OscConfig+0x43e>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b05      	cmp	r3, #5
 8001672:	d10c      	bne.n	800168e <HAL_RCC_OscConfig+0x426>
 8001674:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4a1f      	ldr	r2, [pc, #124]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	6213      	str	r3, [r2, #32]
 8001680:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	4a1c      	ldr	r2, [pc, #112]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6213      	str	r3, [r2, #32]
 800168c:	e00b      	b.n	80016a6 <HAL_RCC_OscConfig+0x43e>
 800168e:	4b1a      	ldr	r3, [pc, #104]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	4a19      	ldr	r2, [pc, #100]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	6213      	str	r3, [r2, #32]
 800169a:	4b17      	ldr	r3, [pc, #92]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4a16      	ldr	r2, [pc, #88]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 80016a0:	f023 0304 	bic.w	r3, r3, #4
 80016a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d015      	beq.n	80016da <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ae:	f7ff f9fb 	bl	8000aa8 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff f9f7 	bl	8000aa8 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e131      	b.n	8001930 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016cc:	4b0a      	ldr	r3, [pc, #40]	@ (80016f8 <HAL_RCC_OscConfig+0x490>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ee      	beq.n	80016b6 <HAL_RCC_OscConfig+0x44e>
 80016d8:	e01c      	b.n	8001714 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f7ff f9e5 	bl	8000aa8 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e0:	e012      	b.n	8001708 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7ff f9e1 	bl	8000aa8 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d909      	bls.n	8001708 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e11b      	b.n	8001930 <HAL_RCC_OscConfig+0x6c8>
 80016f8:	40021000 	.word	0x40021000
 80016fc:	08004830 	.word	0x08004830
 8001700:	42420480 	.word	0x42420480
 8001704:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001708:	4b8b      	ldr	r3, [pc, #556]	@ (8001938 <HAL_RCC_OscConfig+0x6d0>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e6      	bne.n	80016e2 <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001714:	7dfb      	ldrb	r3, [r7, #23]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d105      	bne.n	8001726 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800171a:	4b87      	ldr	r3, [pc, #540]	@ (8001938 <HAL_RCC_OscConfig+0x6d0>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a86      	ldr	r2, [pc, #536]	@ (8001938 <HAL_RCC_OscConfig+0x6d0>)
 8001720:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001724:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00c      	beq.n	8001748 <HAL_RCC_OscConfig+0x4e0>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d008      	beq.n	8001748 <HAL_RCC_OscConfig+0x4e0>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d004      	beq.n	8001748 <HAL_RCC_OscConfig+0x4e0>
 800173e:	f240 21ad 	movw	r1, #685	@ 0x2ad
 8001742:	487e      	ldr	r0, [pc, #504]	@ (800193c <HAL_RCC_OscConfig+0x6d4>)
 8001744:	f7fe ff94 	bl	8000670 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80ee 	beq.w	800192e <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001752:	4b79      	ldr	r3, [pc, #484]	@ (8001938 <HAL_RCC_OscConfig+0x6d0>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b08      	cmp	r3, #8
 800175c:	f000 80ce 	beq.w	80018fc <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	2b02      	cmp	r3, #2
 8001766:	f040 80b2 	bne.w	80018ce <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d009      	beq.n	8001786 <HAL_RCC_OscConfig+0x51e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800177a:	d004      	beq.n	8001786 <HAL_RCC_OscConfig+0x51e>
 800177c:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8001780:	486e      	ldr	r0, [pc, #440]	@ (800193c <HAL_RCC_OscConfig+0x6d4>)
 8001782:	f7fe ff75 	bl	8000670 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178a:	2b00      	cmp	r3, #0
 800178c:	d04a      	beq.n	8001824 <HAL_RCC_OscConfig+0x5bc>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001792:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001796:	d045      	beq.n	8001824 <HAL_RCC_OscConfig+0x5bc>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80017a0:	d040      	beq.n	8001824 <HAL_RCC_OscConfig+0x5bc>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80017aa:	d03b      	beq.n	8001824 <HAL_RCC_OscConfig+0x5bc>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80017b4:	d036      	beq.n	8001824 <HAL_RCC_OscConfig+0x5bc>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ba:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80017be:	d031      	beq.n	8001824 <HAL_RCC_OscConfig+0x5bc>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80017c8:	d02c      	beq.n	8001824 <HAL_RCC_OscConfig+0x5bc>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ce:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80017d2:	d027      	beq.n	8001824 <HAL_RCC_OscConfig+0x5bc>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80017dc:	d022      	beq.n	8001824 <HAL_RCC_OscConfig+0x5bc>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80017e6:	d01d      	beq.n	8001824 <HAL_RCC_OscConfig+0x5bc>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ec:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80017f0:	d018      	beq.n	8001824 <HAL_RCC_OscConfig+0x5bc>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80017fa:	d013      	beq.n	8001824 <HAL_RCC_OscConfig+0x5bc>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001800:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001804:	d00e      	beq.n	8001824 <HAL_RCC_OscConfig+0x5bc>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180a:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 800180e:	d009      	beq.n	8001824 <HAL_RCC_OscConfig+0x5bc>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001814:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 8001818:	d004      	beq.n	8001824 <HAL_RCC_OscConfig+0x5bc>
 800181a:	f240 21b7 	movw	r1, #695	@ 0x2b7
 800181e:	4847      	ldr	r0, [pc, #284]	@ (800193c <HAL_RCC_OscConfig+0x6d4>)
 8001820:	f7fe ff26 	bl	8000670 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001824:	4b46      	ldr	r3, [pc, #280]	@ (8001940 <HAL_RCC_OscConfig+0x6d8>)
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff f93d 	bl	8000aa8 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff f939 	bl	8000aa8 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e075      	b.n	8001930 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001844:	4b3c      	ldr	r3, [pc, #240]	@ (8001938 <HAL_RCC_OscConfig+0x6d0>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1f0      	bne.n	8001832 <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001858:	d116      	bne.n	8001888 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d009      	beq.n	8001876 <HAL_RCC_OscConfig+0x60e>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800186a:	d004      	beq.n	8001876 <HAL_RCC_OscConfig+0x60e>
 800186c:	f240 21cd 	movw	r1, #717	@ 0x2cd
 8001870:	4832      	ldr	r0, [pc, #200]	@ (800193c <HAL_RCC_OscConfig+0x6d4>)
 8001872:	f7fe fefd 	bl	8000670 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001876:	4b30      	ldr	r3, [pc, #192]	@ (8001938 <HAL_RCC_OscConfig+0x6d0>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	492d      	ldr	r1, [pc, #180]	@ (8001938 <HAL_RCC_OscConfig+0x6d0>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001888:	4b2b      	ldr	r3, [pc, #172]	@ (8001938 <HAL_RCC_OscConfig+0x6d0>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a19      	ldr	r1, [r3, #32]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001898:	430b      	orrs	r3, r1
 800189a:	4927      	ldr	r1, [pc, #156]	@ (8001938 <HAL_RCC_OscConfig+0x6d0>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a0:	4b27      	ldr	r3, [pc, #156]	@ (8001940 <HAL_RCC_OscConfig+0x6d8>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a6:	f7ff f8ff 	bl	8000aa8 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ae:	f7ff f8fb 	bl	8000aa8 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e037      	b.n	8001930 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001938 <HAL_RCC_OscConfig+0x6d0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x646>
 80018cc:	e02f      	b.n	800192e <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001940 <HAL_RCC_OscConfig+0x6d8>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff f8e8 	bl	8000aa8 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff f8e4 	bl	8000aa8 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e020      	b.n	8001930 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ee:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <HAL_RCC_OscConfig+0x6d0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x674>
 80018fa:	e018      	b.n	800192e <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e013      	b.n	8001930 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001908:	4b0b      	ldr	r3, [pc, #44]	@ (8001938 <HAL_RCC_OscConfig+0x6d0>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	429a      	cmp	r2, r3
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001926:	429a      	cmp	r2, r3
 8001928:	d001      	beq.n	800192e <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40021000 	.word	0x40021000
 800193c:	08004830 	.word	0x08004830
 8001940:	42420060 	.word	0x42420060

08001944 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e176      	b.n	8001c46 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d116      	bne.n	8001992 <HAL_RCC_ClockConfig+0x4e>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d110      	bne.n	8001992 <HAL_RCC_ClockConfig+0x4e>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10a      	bne.n	8001992 <HAL_RCC_ClockConfig+0x4e>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d104      	bne.n	8001992 <HAL_RCC_ClockConfig+0x4e>
 8001988:	f240 3136 	movw	r1, #822	@ 0x336
 800198c:	4874      	ldr	r0, [pc, #464]	@ (8001b60 <HAL_RCC_ClockConfig+0x21c>)
 800198e:	f7fe fe6f 	bl	8000670 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00a      	beq.n	80019ae <HAL_RCC_ClockConfig+0x6a>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d007      	beq.n	80019ae <HAL_RCC_ClockConfig+0x6a>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d004      	beq.n	80019ae <HAL_RCC_ClockConfig+0x6a>
 80019a4:	f240 3137 	movw	r1, #823	@ 0x337
 80019a8:	486d      	ldr	r0, [pc, #436]	@ (8001b60 <HAL_RCC_ClockConfig+0x21c>)
 80019aa:	f7fe fe61 	bl	8000670 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001b64 <HAL_RCC_ClockConfig+0x220>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d910      	bls.n	80019de <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019bc:	4b69      	ldr	r3, [pc, #420]	@ (8001b64 <HAL_RCC_ClockConfig+0x220>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 0207 	bic.w	r2, r3, #7
 80019c4:	4967      	ldr	r1, [pc, #412]	@ (8001b64 <HAL_RCC_ClockConfig+0x220>)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019cc:	4b65      	ldr	r3, [pc, #404]	@ (8001b64 <HAL_RCC_ClockConfig+0x220>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d001      	beq.n	80019de <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e133      	b.n	8001c46 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d049      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d005      	beq.n	8001a02 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001b68 <HAL_RCC_ClockConfig+0x224>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001b68 <HAL_RCC_ClockConfig+0x224>)
 80019fc:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a00:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d005      	beq.n	8001a1a <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a0e:	4b56      	ldr	r3, [pc, #344]	@ (8001b68 <HAL_RCC_ClockConfig+0x224>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	4a55      	ldr	r2, [pc, #340]	@ (8001b68 <HAL_RCC_ClockConfig+0x224>)
 8001a14:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a18:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d024      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x128>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b80      	cmp	r3, #128	@ 0x80
 8001a28:	d020      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x128>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b90      	cmp	r3, #144	@ 0x90
 8001a30:	d01c      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x128>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2ba0      	cmp	r3, #160	@ 0xa0
 8001a38:	d018      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x128>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2bb0      	cmp	r3, #176	@ 0xb0
 8001a40:	d014      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x128>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2bc0      	cmp	r3, #192	@ 0xc0
 8001a48:	d010      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x128>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2bd0      	cmp	r3, #208	@ 0xd0
 8001a50:	d00c      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x128>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2be0      	cmp	r3, #224	@ 0xe0
 8001a58:	d008      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x128>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2bf0      	cmp	r3, #240	@ 0xf0
 8001a60:	d004      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x128>
 8001a62:	f240 315d 	movw	r1, #861	@ 0x35d
 8001a66:	483e      	ldr	r0, [pc, #248]	@ (8001b60 <HAL_RCC_ClockConfig+0x21c>)
 8001a68:	f7fe fe02 	bl	8000670 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a6c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b68 <HAL_RCC_ClockConfig+0x224>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	493b      	ldr	r1, [pc, #236]	@ (8001b68 <HAL_RCC_ClockConfig+0x224>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d051      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00c      	beq.n	8001aac <HAL_RCC_ClockConfig+0x168>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d008      	beq.n	8001aac <HAL_RCC_ClockConfig+0x168>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d004      	beq.n	8001aac <HAL_RCC_ClockConfig+0x168>
 8001aa2:	f44f 7159 	mov.w	r1, #868	@ 0x364
 8001aa6:	482e      	ldr	r0, [pc, #184]	@ (8001b60 <HAL_RCC_ClockConfig+0x21c>)
 8001aa8:	f7fe fde2 	bl	8000670 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b68 <HAL_RCC_ClockConfig+0x224>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d115      	bne.n	8001aec <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e0c0      	b.n	8001c46 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d107      	bne.n	8001adc <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001acc:	4b26      	ldr	r3, [pc, #152]	@ (8001b68 <HAL_RCC_ClockConfig+0x224>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0b4      	b.n	8001c46 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001adc:	4b22      	ldr	r3, [pc, #136]	@ (8001b68 <HAL_RCC_ClockConfig+0x224>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0ac      	b.n	8001c46 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aec:	4b1e      	ldr	r3, [pc, #120]	@ (8001b68 <HAL_RCC_ClockConfig+0x224>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f023 0203 	bic.w	r2, r3, #3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	491b      	ldr	r1, [pc, #108]	@ (8001b68 <HAL_RCC_ClockConfig+0x224>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001afe:	f7fe ffd3 	bl	8000aa8 <HAL_GetTick>
 8001b02:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b04:	e00a      	b.n	8001b1c <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b06:	f7fe ffcf 	bl	8000aa8 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e094      	b.n	8001c46 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1c:	4b12      	ldr	r3, [pc, #72]	@ (8001b68 <HAL_RCC_ClockConfig+0x224>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 020c 	and.w	r2, r3, #12
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d1eb      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b64 <HAL_RCC_ClockConfig+0x220>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d217      	bcs.n	8001b6c <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3c:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <HAL_RCC_ClockConfig+0x220>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 0207 	bic.w	r2, r3, #7
 8001b44:	4907      	ldr	r1, [pc, #28]	@ (8001b64 <HAL_RCC_ClockConfig+0x220>)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4c:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <HAL_RCC_ClockConfig+0x220>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d008      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e073      	b.n	8001c46 <HAL_RCC_ClockConfig+0x302>
 8001b5e:	bf00      	nop
 8001b60:	08004830 	.word	0x08004830
 8001b64:	40022000 	.word	0x40022000
 8001b68:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d025      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d018      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x26e>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b88:	d013      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x26e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8001b92:	d00e      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x26e>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8001b9c:	d009      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x26e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001ba6:	d004      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x26e>
 8001ba8:	f240 31a2 	movw	r1, #930	@ 0x3a2
 8001bac:	4828      	ldr	r0, [pc, #160]	@ (8001c50 <HAL_RCC_ClockConfig+0x30c>)
 8001bae:	f7fe fd5f 	bl	8000670 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bb2:	4b28      	ldr	r3, [pc, #160]	@ (8001c54 <HAL_RCC_ClockConfig+0x310>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	4925      	ldr	r1, [pc, #148]	@ (8001c54 <HAL_RCC_ClockConfig+0x310>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d026      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d018      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x2c6>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001be0:	d013      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x2c6>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8001bea:	d00e      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x2c6>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8001bf4:	d009      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x2c6>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001bfe:	d004      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x2c6>
 8001c00:	f240 31a9 	movw	r1, #937	@ 0x3a9
 8001c04:	4812      	ldr	r0, [pc, #72]	@ (8001c50 <HAL_RCC_ClockConfig+0x30c>)
 8001c06:	f7fe fd33 	bl	8000670 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c0a:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <HAL_RCC_ClockConfig+0x310>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	490e      	ldr	r1, [pc, #56]	@ (8001c54 <HAL_RCC_ClockConfig+0x310>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c1e:	f000 f821 	bl	8001c64 <HAL_RCC_GetSysClockFreq>
 8001c22:	4602      	mov	r2, r0
 8001c24:	4b0b      	ldr	r3, [pc, #44]	@ (8001c54 <HAL_RCC_ClockConfig+0x310>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	490a      	ldr	r1, [pc, #40]	@ (8001c58 <HAL_RCC_ClockConfig+0x314>)
 8001c30:	5ccb      	ldrb	r3, [r1, r3]
 8001c32:	fa22 f303 	lsr.w	r3, r2, r3
 8001c36:	4a09      	ldr	r2, [pc, #36]	@ (8001c5c <HAL_RCC_ClockConfig+0x318>)
 8001c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c3a:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <HAL_RCC_ClockConfig+0x31c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fef0 	bl	8000a24 <HAL_InitTick>

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	08004830 	.word	0x08004830
 8001c54:	40021000 	.word	0x40021000
 8001c58:	08004918 	.word	0x08004918
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	20000004 	.word	0x20000004

08001c64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b087      	sub	sp, #28
 8001c68:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d002      	beq.n	8001c94 <HAL_RCC_GetSysClockFreq+0x30>
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d003      	beq.n	8001c9a <HAL_RCC_GetSysClockFreq+0x36>
 8001c92:	e027      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c94:	4b19      	ldr	r3, [pc, #100]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x98>)
 8001c96:	613b      	str	r3, [r7, #16]
      break;
 8001c98:	e027      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	0c9b      	lsrs	r3, r3, #18
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	4a17      	ldr	r2, [pc, #92]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ca4:	5cd3      	ldrb	r3, [r2, r3]
 8001ca6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d010      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cb2:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	0c5b      	lsrs	r3, r3, #17
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	4a11      	ldr	r2, [pc, #68]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cbe:	5cd3      	ldrb	r3, [r2, r3]
 8001cc0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x98>)
 8001cc6:	fb03 f202 	mul.w	r2, r3, r2
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	e004      	b.n	8001cde <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a0c      	ldr	r2, [pc, #48]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cd8:	fb02 f303 	mul.w	r3, r2, r3
 8001cdc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	613b      	str	r3, [r7, #16]
      break;
 8001ce2:	e002      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ce4:	4b05      	ldr	r3, [pc, #20]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ce6:	613b      	str	r3, [r7, #16]
      break;
 8001ce8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cea:	693b      	ldr	r3, [r7, #16]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	371c      	adds	r7, #28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	007a1200 	.word	0x007a1200
 8001d00:	08004930 	.word	0x08004930
 8001d04:	08004940 	.word	0x08004940
 8001d08:	003d0900 	.word	0x003d0900

08001d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d10:	4b02      	ldr	r3, [pc, #8]	@ (8001d1c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	20000000 	.word	0x20000000

08001d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d24:	f7ff fff2 	bl	8001d0c <HAL_RCC_GetHCLKFreq>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	4b05      	ldr	r3, [pc, #20]	@ (8001d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	4903      	ldr	r1, [pc, #12]	@ (8001d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d36:	5ccb      	ldrb	r3, [r1, r3]
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40021000 	.word	0x40021000
 8001d44:	08004928 	.word	0x08004928

08001d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d4c:	f7ff ffde 	bl	8001d0c <HAL_RCC_GetHCLKFreq>
 8001d50:	4602      	mov	r2, r0
 8001d52:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	0adb      	lsrs	r3, r3, #11
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	4903      	ldr	r1, [pc, #12]	@ (8001d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d5e:	5ccb      	ldrb	r3, [r1, r3]
 8001d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	08004928 	.word	0x08004928

08001d70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d78:	4b0a      	ldr	r3, [pc, #40]	@ (8001da4 <RCC_Delay+0x34>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <RCC_Delay+0x38>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	0a5b      	lsrs	r3, r3, #9
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d8c:	bf00      	nop
  }
  while (Delay --);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1e5a      	subs	r2, r3, #1
 8001d92:	60fa      	str	r2, [r7, #12]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f9      	bne.n	8001d8c <RCC_Delay+0x1c>
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	20000000 	.word	0x20000000
 8001da8:	10624dd3 	.word	0x10624dd3

08001dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e09c      	b.n	8001ef8 <HAL_TIM_Base_Init+0x14c>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a4f      	ldr	r2, [pc, #316]	@ (8001f00 <HAL_TIM_Base_Init+0x154>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00e      	beq.n	8001de6 <HAL_TIM_Base_Init+0x3a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dd0:	d009      	beq.n	8001de6 <HAL_TIM_Base_Init+0x3a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a4b      	ldr	r2, [pc, #300]	@ (8001f04 <HAL_TIM_Base_Init+0x158>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d004      	beq.n	8001de6 <HAL_TIM_Base_Init+0x3a>
 8001ddc:	f240 1113 	movw	r1, #275	@ 0x113
 8001de0:	4849      	ldr	r0, [pc, #292]	@ (8001f08 <HAL_TIM_Base_Init+0x15c>)
 8001de2:	f7fe fc45 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d014      	beq.n	8001e18 <HAL_TIM_Base_Init+0x6c>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b10      	cmp	r3, #16
 8001df4:	d010      	beq.n	8001e18 <HAL_TIM_Base_Init+0x6c>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	2b20      	cmp	r3, #32
 8001dfc:	d00c      	beq.n	8001e18 <HAL_TIM_Base_Init+0x6c>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b40      	cmp	r3, #64	@ 0x40
 8001e04:	d008      	beq.n	8001e18 <HAL_TIM_Base_Init+0x6c>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b60      	cmp	r3, #96	@ 0x60
 8001e0c:	d004      	beq.n	8001e18 <HAL_TIM_Base_Init+0x6c>
 8001e0e:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001e12:	483d      	ldr	r0, [pc, #244]	@ (8001f08 <HAL_TIM_Base_Init+0x15c>)
 8001e14:	f7fe fc2c 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00e      	beq.n	8001e3e <HAL_TIM_Base_Init+0x92>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e28:	d009      	beq.n	8001e3e <HAL_TIM_Base_Init+0x92>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e32:	d004      	beq.n	8001e3e <HAL_TIM_Base_Init+0x92>
 8001e34:	f240 1115 	movw	r1, #277	@ 0x115
 8001e38:	4833      	ldr	r0, [pc, #204]	@ (8001f08 <HAL_TIM_Base_Init+0x15c>)
 8001e3a:	f7fe fc19 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d004      	beq.n	8001e50 <HAL_TIM_Base_Init+0xa4>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e4e:	d304      	bcc.n	8001e5a <HAL_TIM_Base_Init+0xae>
 8001e50:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8001e54:	482c      	ldr	r0, [pc, #176]	@ (8001f08 <HAL_TIM_Base_Init+0x15c>)
 8001e56:	f7fe fc0b 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d008      	beq.n	8001e74 <HAL_TIM_Base_Init+0xc8>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	2b80      	cmp	r3, #128	@ 0x80
 8001e68:	d004      	beq.n	8001e74 <HAL_TIM_Base_Init+0xc8>
 8001e6a:	f240 1117 	movw	r1, #279	@ 0x117
 8001e6e:	4826      	ldr	r0, [pc, #152]	@ (8001f08 <HAL_TIM_Base_Init+0x15c>)
 8001e70:	f7fe fbfe 	bl	8000670 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d106      	bne.n	8001e8e <HAL_TIM_Base_Init+0xe2>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7fe fc2d 	bl	80006e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2202      	movs	r2, #2
 8001e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	f001 f8eb 	bl	800307c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40012c00 	.word	0x40012c00
 8001f04:	40000400 	.word	0x40000400
 8001f08:	08004868 	.word	0x08004868

08001f0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e09c      	b.n	8002058 <HAL_TIM_PWM_Init+0x14c>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a4f      	ldr	r2, [pc, #316]	@ (8002060 <HAL_TIM_PWM_Init+0x154>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d00e      	beq.n	8001f46 <HAL_TIM_PWM_Init+0x3a>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f30:	d009      	beq.n	8001f46 <HAL_TIM_PWM_Init+0x3a>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a4b      	ldr	r2, [pc, #300]	@ (8002064 <HAL_TIM_PWM_Init+0x158>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d004      	beq.n	8001f46 <HAL_TIM_PWM_Init+0x3a>
 8001f3c:	f240 512c 	movw	r1, #1324	@ 0x52c
 8001f40:	4849      	ldr	r0, [pc, #292]	@ (8002068 <HAL_TIM_PWM_Init+0x15c>)
 8001f42:	f7fe fb95 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d014      	beq.n	8001f78 <HAL_TIM_PWM_Init+0x6c>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b10      	cmp	r3, #16
 8001f54:	d010      	beq.n	8001f78 <HAL_TIM_PWM_Init+0x6c>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b20      	cmp	r3, #32
 8001f5c:	d00c      	beq.n	8001f78 <HAL_TIM_PWM_Init+0x6c>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b40      	cmp	r3, #64	@ 0x40
 8001f64:	d008      	beq.n	8001f78 <HAL_TIM_PWM_Init+0x6c>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b60      	cmp	r3, #96	@ 0x60
 8001f6c:	d004      	beq.n	8001f78 <HAL_TIM_PWM_Init+0x6c>
 8001f6e:	f240 512d 	movw	r1, #1325	@ 0x52d
 8001f72:	483d      	ldr	r0, [pc, #244]	@ (8002068 <HAL_TIM_PWM_Init+0x15c>)
 8001f74:	f7fe fb7c 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00e      	beq.n	8001f9e <HAL_TIM_PWM_Init+0x92>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f88:	d009      	beq.n	8001f9e <HAL_TIM_PWM_Init+0x92>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f92:	d004      	beq.n	8001f9e <HAL_TIM_PWM_Init+0x92>
 8001f94:	f240 512e 	movw	r1, #1326	@ 0x52e
 8001f98:	4833      	ldr	r0, [pc, #204]	@ (8002068 <HAL_TIM_PWM_Init+0x15c>)
 8001f9a:	f7fe fb69 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d004      	beq.n	8001fb0 <HAL_TIM_PWM_Init+0xa4>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fae:	d304      	bcc.n	8001fba <HAL_TIM_PWM_Init+0xae>
 8001fb0:	f240 512f 	movw	r1, #1327	@ 0x52f
 8001fb4:	482c      	ldr	r0, [pc, #176]	@ (8002068 <HAL_TIM_PWM_Init+0x15c>)
 8001fb6:	f7fe fb5b 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d008      	beq.n	8001fd4 <HAL_TIM_PWM_Init+0xc8>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	2b80      	cmp	r3, #128	@ 0x80
 8001fc8:	d004      	beq.n	8001fd4 <HAL_TIM_PWM_Init+0xc8>
 8001fca:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 8001fce:	4826      	ldr	r0, [pc, #152]	@ (8002068 <HAL_TIM_PWM_Init+0x15c>)
 8001fd0:	f7fe fb4e 	bl	8000670 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d106      	bne.n	8001fee <HAL_TIM_PWM_Init+0xe2>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 f83f 	bl	800206c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	4619      	mov	r1, r3
 8002000:	4610      	mov	r0, r2
 8002002:	f001 f83b 	bl	800307c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40012c00 	.word	0x40012c00
 8002064:	40000400 	.word	0x40000400
 8002068:	08004868 	.word	0x08004868

0800206c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
	...

08002080 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a64      	ldr	r2, [pc, #400]	@ (8002220 <HAL_TIM_PWM_Start+0x1a0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d10b      	bne.n	80020ac <HAL_TIM_PWM_Start+0x2c>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d02f      	beq.n	80020fa <HAL_TIM_PWM_Start+0x7a>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2b04      	cmp	r3, #4
 800209e:	d02c      	beq.n	80020fa <HAL_TIM_PWM_Start+0x7a>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d029      	beq.n	80020fa <HAL_TIM_PWM_Start+0x7a>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b0c      	cmp	r3, #12
 80020aa:	d026      	beq.n	80020fa <HAL_TIM_PWM_Start+0x7a>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020b4:	d10b      	bne.n	80020ce <HAL_TIM_PWM_Start+0x4e>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01e      	beq.n	80020fa <HAL_TIM_PWM_Start+0x7a>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d01b      	beq.n	80020fa <HAL_TIM_PWM_Start+0x7a>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d018      	beq.n	80020fa <HAL_TIM_PWM_Start+0x7a>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	2b0c      	cmp	r3, #12
 80020cc:	d015      	beq.n	80020fa <HAL_TIM_PWM_Start+0x7a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a54      	ldr	r2, [pc, #336]	@ (8002224 <HAL_TIM_PWM_Start+0x1a4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d10b      	bne.n	80020f0 <HAL_TIM_PWM_Start+0x70>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00d      	beq.n	80020fa <HAL_TIM_PWM_Start+0x7a>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d00a      	beq.n	80020fa <HAL_TIM_PWM_Start+0x7a>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d007      	beq.n	80020fa <HAL_TIM_PWM_Start+0x7a>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	2b0c      	cmp	r3, #12
 80020ee:	d004      	beq.n	80020fa <HAL_TIM_PWM_Start+0x7a>
 80020f0:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 80020f4:	484c      	ldr	r0, [pc, #304]	@ (8002228 <HAL_TIM_PWM_Start+0x1a8>)
 80020f6:	f7fe fabb 	bl	8000670 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d109      	bne.n	8002114 <HAL_TIM_PWM_Start+0x94>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b01      	cmp	r3, #1
 800210a:	bf14      	ite	ne
 800210c:	2301      	movne	r3, #1
 800210e:	2300      	moveq	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	e022      	b.n	800215a <HAL_TIM_PWM_Start+0xda>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2b04      	cmp	r3, #4
 8002118:	d109      	bne.n	800212e <HAL_TIM_PWM_Start+0xae>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b01      	cmp	r3, #1
 8002124:	bf14      	ite	ne
 8002126:	2301      	movne	r3, #1
 8002128:	2300      	moveq	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	e015      	b.n	800215a <HAL_TIM_PWM_Start+0xda>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b08      	cmp	r3, #8
 8002132:	d109      	bne.n	8002148 <HAL_TIM_PWM_Start+0xc8>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b01      	cmp	r3, #1
 800213e:	bf14      	ite	ne
 8002140:	2301      	movne	r3, #1
 8002142:	2300      	moveq	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	e008      	b.n	800215a <HAL_TIM_PWM_Start+0xda>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	bf14      	ite	ne
 8002154:	2301      	movne	r3, #1
 8002156:	2300      	moveq	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_TIM_PWM_Start+0xe2>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e059      	b.n	8002216 <HAL_TIM_PWM_Start+0x196>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d104      	bne.n	8002172 <HAL_TIM_PWM_Start+0xf2>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002170:	e013      	b.n	800219a <HAL_TIM_PWM_Start+0x11a>
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b04      	cmp	r3, #4
 8002176:	d104      	bne.n	8002182 <HAL_TIM_PWM_Start+0x102>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002180:	e00b      	b.n	800219a <HAL_TIM_PWM_Start+0x11a>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2b08      	cmp	r3, #8
 8002186:	d104      	bne.n	8002192 <HAL_TIM_PWM_Start+0x112>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002190:	e003      	b.n	800219a <HAL_TIM_PWM_Start+0x11a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2202      	movs	r2, #2
 8002196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2201      	movs	r2, #1
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f001 fa7a 	bl	800369c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002220 <HAL_TIM_PWM_Start+0x1a0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d107      	bne.n	80021c2 <HAL_TIM_PWM_Start+0x142>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a16      	ldr	r2, [pc, #88]	@ (8002220 <HAL_TIM_PWM_Start+0x1a0>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d009      	beq.n	80021e0 <HAL_TIM_PWM_Start+0x160>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d4:	d004      	beq.n	80021e0 <HAL_TIM_PWM_Start+0x160>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a12      	ldr	r2, [pc, #72]	@ (8002224 <HAL_TIM_PWM_Start+0x1a4>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d111      	bne.n	8002204 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d010      	beq.n	8002214 <HAL_TIM_PWM_Start+0x194>
    {
      __HAL_TIM_ENABLE(htim);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0201 	orr.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002202:	e007      	b.n	8002214 <HAL_TIM_PWM_Start+0x194>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40012c00 	.word	0x40012c00
 8002224:	40000400 	.word	0x40000400
 8002228:	08004868 	.word	0x08004868

0800222c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e17e      	b.n	800253e <HAL_TIM_Encoder_Init+0x312>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a77      	ldr	r2, [pc, #476]	@ (8002424 <HAL_TIM_Encoder_Init+0x1f8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00e      	beq.n	8002268 <HAL_TIM_Encoder_Init+0x3c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002252:	d009      	beq.n	8002268 <HAL_TIM_Encoder_Init+0x3c>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a73      	ldr	r2, [pc, #460]	@ (8002428 <HAL_TIM_Encoder_Init+0x1fc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d004      	beq.n	8002268 <HAL_TIM_Encoder_Init+0x3c>
 800225e:	f640 31d8 	movw	r1, #3032	@ 0xbd8
 8002262:	4872      	ldr	r0, [pc, #456]	@ (800242c <HAL_TIM_Encoder_Init+0x200>)
 8002264:	f7fe fa04 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d014      	beq.n	800229a <HAL_TIM_Encoder_Init+0x6e>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b10      	cmp	r3, #16
 8002276:	d010      	beq.n	800229a <HAL_TIM_Encoder_Init+0x6e>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b20      	cmp	r3, #32
 800227e:	d00c      	beq.n	800229a <HAL_TIM_Encoder_Init+0x6e>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b40      	cmp	r3, #64	@ 0x40
 8002286:	d008      	beq.n	800229a <HAL_TIM_Encoder_Init+0x6e>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b60      	cmp	r3, #96	@ 0x60
 800228e:	d004      	beq.n	800229a <HAL_TIM_Encoder_Init+0x6e>
 8002290:	f640 31d9 	movw	r1, #3033	@ 0xbd9
 8002294:	4865      	ldr	r0, [pc, #404]	@ (800242c <HAL_TIM_Encoder_Init+0x200>)
 8002296:	f7fe f9eb 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00e      	beq.n	80022c0 <HAL_TIM_Encoder_Init+0x94>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022aa:	d009      	beq.n	80022c0 <HAL_TIM_Encoder_Init+0x94>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022b4:	d004      	beq.n	80022c0 <HAL_TIM_Encoder_Init+0x94>
 80022b6:	f640 31da 	movw	r1, #3034	@ 0xbda
 80022ba:	485c      	ldr	r0, [pc, #368]	@ (800242c <HAL_TIM_Encoder_Init+0x200>)
 80022bc:	f7fe f9d8 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_TIM_Encoder_Init+0xae>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	2b80      	cmp	r3, #128	@ 0x80
 80022ce:	d004      	beq.n	80022da <HAL_TIM_Encoder_Init+0xae>
 80022d0:	f640 31db 	movw	r1, #3035	@ 0xbdb
 80022d4:	4855      	ldr	r0, [pc, #340]	@ (800242c <HAL_TIM_Encoder_Init+0x200>)
 80022d6:	f7fe f9cb 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d00c      	beq.n	80022fc <HAL_TIM_Encoder_Init+0xd0>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d008      	beq.n	80022fc <HAL_TIM_Encoder_Init+0xd0>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d004      	beq.n	80022fc <HAL_TIM_Encoder_Init+0xd0>
 80022f2:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 80022f6:	484d      	ldr	r0, [pc, #308]	@ (800242c <HAL_TIM_Encoder_Init+0x200>)
 80022f8:	f7fe f9ba 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d00c      	beq.n	800231e <HAL_TIM_Encoder_Init+0xf2>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d008      	beq.n	800231e <HAL_TIM_Encoder_Init+0xf2>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b03      	cmp	r3, #3
 8002312:	d004      	beq.n	800231e <HAL_TIM_Encoder_Init+0xf2>
 8002314:	f640 31dd 	movw	r1, #3037	@ 0xbdd
 8002318:	4844      	ldr	r0, [pc, #272]	@ (800242c <HAL_TIM_Encoder_Init+0x200>)
 800231a:	f7fe f9a9 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d00c      	beq.n	8002340 <HAL_TIM_Encoder_Init+0x114>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d008      	beq.n	8002340 <HAL_TIM_Encoder_Init+0x114>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	2b03      	cmp	r3, #3
 8002334:	d004      	beq.n	8002340 <HAL_TIM_Encoder_Init+0x114>
 8002336:	f640 31de 	movw	r1, #3038	@ 0xbde
 800233a:	483c      	ldr	r0, [pc, #240]	@ (800242c <HAL_TIM_Encoder_Init+0x200>)
 800233c:	f7fe f998 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <HAL_TIM_Encoder_Init+0x12e>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d004      	beq.n	800235a <HAL_TIM_Encoder_Init+0x12e>
 8002350:	f640 31df 	movw	r1, #3039	@ 0xbdf
 8002354:	4835      	ldr	r0, [pc, #212]	@ (800242c <HAL_TIM_Encoder_Init+0x200>)
 8002356:	f7fe f98b 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <HAL_TIM_Encoder_Init+0x148>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d004      	beq.n	8002374 <HAL_TIM_Encoder_Init+0x148>
 800236a:	f44f 613e 	mov.w	r1, #3040	@ 0xbe0
 800236e:	482f      	ldr	r0, [pc, #188]	@ (800242c <HAL_TIM_Encoder_Init+0x200>)
 8002370:	f7fe f97e 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d010      	beq.n	800239e <HAL_TIM_Encoder_Init+0x172>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b04      	cmp	r3, #4
 8002382:	d00c      	beq.n	800239e <HAL_TIM_Encoder_Init+0x172>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	2b08      	cmp	r3, #8
 800238a:	d008      	beq.n	800239e <HAL_TIM_Encoder_Init+0x172>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b0c      	cmp	r3, #12
 8002392:	d004      	beq.n	800239e <HAL_TIM_Encoder_Init+0x172>
 8002394:	f640 31e1 	movw	r1, #3041	@ 0xbe1
 8002398:	4824      	ldr	r0, [pc, #144]	@ (800242c <HAL_TIM_Encoder_Init+0x200>)
 800239a:	f7fe f969 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d010      	beq.n	80023c8 <HAL_TIM_Encoder_Init+0x19c>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d00c      	beq.n	80023c8 <HAL_TIM_Encoder_Init+0x19c>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	d008      	beq.n	80023c8 <HAL_TIM_Encoder_Init+0x19c>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d004      	beq.n	80023c8 <HAL_TIM_Encoder_Init+0x19c>
 80023be:	f640 31e2 	movw	r1, #3042	@ 0xbe2
 80023c2:	481a      	ldr	r0, [pc, #104]	@ (800242c <HAL_TIM_Encoder_Init+0x200>)
 80023c4:	f7fe f954 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	2b0f      	cmp	r3, #15
 80023ce:	d904      	bls.n	80023da <HAL_TIM_Encoder_Init+0x1ae>
 80023d0:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 80023d4:	4815      	ldr	r0, [pc, #84]	@ (800242c <HAL_TIM_Encoder_Init+0x200>)
 80023d6:	f7fe f94b 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	2b0f      	cmp	r3, #15
 80023e0:	d904      	bls.n	80023ec <HAL_TIM_Encoder_Init+0x1c0>
 80023e2:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 80023e6:	4811      	ldr	r0, [pc, #68]	@ (800242c <HAL_TIM_Encoder_Init+0x200>)
 80023e8:	f7fe f942 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d004      	beq.n	80023fe <HAL_TIM_Encoder_Init+0x1d2>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023fc:	d304      	bcc.n	8002408 <HAL_TIM_Encoder_Init+0x1dc>
 80023fe:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 8002402:	480a      	ldr	r0, [pc, #40]	@ (800242c <HAL_TIM_Encoder_Init+0x200>)
 8002404:	f7fe f934 	bl	8000670 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10d      	bne.n	8002430 <HAL_TIM_Encoder_Init+0x204>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7fe f987 	bl	8000730 <HAL_TIM_Encoder_MspInit>
 8002422:	e005      	b.n	8002430 <HAL_TIM_Encoder_Init+0x204>
 8002424:	40012c00 	.word	0x40012c00
 8002428:	40000400 	.word	0x40000400
 800242c:	08004868 	.word	0x08004868
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002446:	f023 0307 	bic.w	r3, r3, #7
 800244a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	4619      	mov	r1, r3
 8002456:	4610      	mov	r0, r2
 8002458:	f000 fe10 	bl	800307c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	4313      	orrs	r3, r2
 800247c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002484:	f023 0303 	bic.w	r3, r3, #3
 8002488:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	4313      	orrs	r3, r2
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80024a2:	f023 030c 	bic.w	r3, r3, #12
 80024a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80024ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	69db      	ldr	r3, [r3, #28]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	4313      	orrs	r3, r2
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	011a      	lsls	r2, r3, #4
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	031b      	lsls	r3, r3, #12
 80024d2:	4313      	orrs	r3, r2
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80024e0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	4313      	orrs	r3, r2
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop

08002548 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002558:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002560:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002568:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002570:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a45      	ldr	r2, [pc, #276]	@ (800268c <HAL_TIM_Encoder_Start+0x144>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d00e      	beq.n	800259a <HAL_TIM_Encoder_Start+0x52>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002584:	d009      	beq.n	800259a <HAL_TIM_Encoder_Start+0x52>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a41      	ldr	r2, [pc, #260]	@ (8002690 <HAL_TIM_Encoder_Start+0x148>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d004      	beq.n	800259a <HAL_TIM_Encoder_Start+0x52>
 8002590:	f640 4195 	movw	r1, #3221	@ 0xc95
 8002594:	483f      	ldr	r0, [pc, #252]	@ (8002694 <HAL_TIM_Encoder_Start+0x14c>)
 8002596:	f7fe f86b 	bl	8000670 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d110      	bne.n	80025c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d102      	bne.n	80025ac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80025a6:	7b7b      	ldrb	r3, [r7, #13]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d001      	beq.n	80025b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e069      	b.n	8002684 <HAL_TIM_Encoder_Start+0x13c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80025c0:	e031      	b.n	8002626 <HAL_TIM_Encoder_Start+0xde>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d110      	bne.n	80025ea <HAL_TIM_Encoder_Start+0xa2>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80025c8:	7bbb      	ldrb	r3, [r7, #14]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d102      	bne.n	80025d4 <HAL_TIM_Encoder_Start+0x8c>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80025ce:	7b3b      	ldrb	r3, [r7, #12]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d001      	beq.n	80025d8 <HAL_TIM_Encoder_Start+0x90>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e055      	b.n	8002684 <HAL_TIM_Encoder_Start+0x13c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025e8:	e01d      	b.n	8002626 <HAL_TIM_Encoder_Start+0xde>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d108      	bne.n	8002602 <HAL_TIM_Encoder_Start+0xba>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80025f0:	7bbb      	ldrb	r3, [r7, #14]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d105      	bne.n	8002602 <HAL_TIM_Encoder_Start+0xba>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80025f6:	7b7b      	ldrb	r3, [r7, #13]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d102      	bne.n	8002602 <HAL_TIM_Encoder_Start+0xba>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80025fc:	7b3b      	ldrb	r3, [r7, #12]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d001      	beq.n	8002606 <HAL_TIM_Encoder_Start+0xbe>
    {
      return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e03e      	b.n	8002684 <HAL_TIM_Encoder_Start+0x13c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2202      	movs	r2, #2
 800260a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2202      	movs	r2, #2
 800261a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2202      	movs	r2, #2
 8002622:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_TIM_Encoder_Start+0xec>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b04      	cmp	r3, #4
 8002630:	d008      	beq.n	8002644 <HAL_TIM_Encoder_Start+0xfc>
 8002632:	e00f      	b.n	8002654 <HAL_TIM_Encoder_Start+0x10c>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2201      	movs	r2, #1
 800263a:	2100      	movs	r1, #0
 800263c:	4618      	mov	r0, r3
 800263e:	f001 f82d 	bl	800369c <TIM_CCxChannelCmd>
      break;
 8002642:	e016      	b.n	8002672 <HAL_TIM_Encoder_Start+0x12a>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2201      	movs	r2, #1
 800264a:	2104      	movs	r1, #4
 800264c:	4618      	mov	r0, r3
 800264e:	f001 f825 	bl	800369c <TIM_CCxChannelCmd>
      break;
 8002652:	e00e      	b.n	8002672 <HAL_TIM_Encoder_Start+0x12a>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2201      	movs	r2, #1
 800265a:	2100      	movs	r1, #0
 800265c:	4618      	mov	r0, r3
 800265e:	f001 f81d 	bl	800369c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2201      	movs	r2, #1
 8002668:	2104      	movs	r1, #4
 800266a:	4618      	mov	r0, r3
 800266c:	f001 f816 	bl	800369c <TIM_CCxChannelCmd>
      break;
 8002670:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f042 0201 	orr.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	4618      	mov	r0, r3
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40012c00 	.word	0x40012c00
 8002690:	40000400 	.word	0x40000400
 8002694:	08004868 	.word	0x08004868

08002698 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d020      	beq.n	80026fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01b      	beq.n	80026fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f06f 0202 	mvn.w	r2, #2
 80026cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fcae 	bl	8003044 <HAL_TIM_IC_CaptureCallback>
 80026e8:	e005      	b.n	80026f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 fca1 	bl	8003032 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 fcb0 	bl	8003056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b00      	cmp	r3, #0
 8002704:	d020      	beq.n	8002748 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d01b      	beq.n	8002748 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0204 	mvn.w	r2, #4
 8002718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2202      	movs	r2, #2
 800271e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 fc88 	bl	8003044 <HAL_TIM_IC_CaptureCallback>
 8002734:	e005      	b.n	8002742 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fc7b 	bl	8003032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 fc8a 	bl	8003056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d020      	beq.n	8002794 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01b      	beq.n	8002794 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f06f 0208 	mvn.w	r2, #8
 8002764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2204      	movs	r2, #4
 800276a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fc62 	bl	8003044 <HAL_TIM_IC_CaptureCallback>
 8002780:	e005      	b.n	800278e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fc55 	bl	8003032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 fc64 	bl	8003056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	d020      	beq.n	80027e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f003 0310 	and.w	r3, r3, #16
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d01b      	beq.n	80027e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f06f 0210 	mvn.w	r2, #16
 80027b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2208      	movs	r2, #8
 80027b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fc3c 	bl	8003044 <HAL_TIM_IC_CaptureCallback>
 80027cc:	e005      	b.n	80027da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 fc2f 	bl	8003032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 fc3e 	bl	8003056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00c      	beq.n	8002804 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d007      	beq.n	8002804 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0201 	mvn.w	r2, #1
 80027fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fc0e 	bl	8003020 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00c      	beq.n	8002828 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f001 f82f 	bl	8003886 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00c      	beq.n	800284c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002838:	2b00      	cmp	r3, #0
 800283a:	d007      	beq.n	800284c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fc0e 	bl	8003068 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00c      	beq.n	8002870 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f003 0320 	and.w	r3, r3, #32
 800285c:	2b00      	cmp	r3, #0
 800285e:	d007      	beq.n	8002870 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0220 	mvn.w	r2, #32
 8002868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f001 f802 	bl	8003874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d010      	beq.n	80028b0 <HAL_TIM_PWM_ConfigChannel+0x38>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b04      	cmp	r3, #4
 8002892:	d00d      	beq.n	80028b0 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b08      	cmp	r3, #8
 8002898:	d00a      	beq.n	80028b0 <HAL_TIM_PWM_ConfigChannel+0x38>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b0c      	cmp	r3, #12
 800289e:	d007      	beq.n	80028b0 <HAL_TIM_PWM_ConfigChannel+0x38>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b3c      	cmp	r3, #60	@ 0x3c
 80028a4:	d004      	beq.n	80028b0 <HAL_TIM_PWM_ConfigChannel+0x38>
 80028a6:	f241 0181 	movw	r1, #4225	@ 0x1081
 80028aa:	489a      	ldr	r0, [pc, #616]	@ (8002b14 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80028ac:	f7fd fee0 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b60      	cmp	r3, #96	@ 0x60
 80028b6:	d008      	beq.n	80028ca <HAL_TIM_PWM_ConfigChannel+0x52>
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b70      	cmp	r3, #112	@ 0x70
 80028be:	d004      	beq.n	80028ca <HAL_TIM_PWM_ConfigChannel+0x52>
 80028c0:	f241 0182 	movw	r1, #4226	@ 0x1082
 80028c4:	4893      	ldr	r0, [pc, #588]	@ (8002b14 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80028c6:	f7fd fed3 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d008      	beq.n	80028e4 <HAL_TIM_PWM_ConfigChannel+0x6c>
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d004      	beq.n	80028e4 <HAL_TIM_PWM_ConfigChannel+0x6c>
 80028da:	f241 0183 	movw	r1, #4227	@ 0x1083
 80028de:	488d      	ldr	r0, [pc, #564]	@ (8002b14 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80028e0:	f7fd fec6 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <HAL_TIM_PWM_ConfigChannel+0x86>
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d004      	beq.n	80028fe <HAL_TIM_PWM_ConfigChannel+0x86>
 80028f4:	f241 0184 	movw	r1, #4228	@ 0x1084
 80028f8:	4886      	ldr	r0, [pc, #536]	@ (8002b14 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80028fa:	f7fd feb9 	bl	8000670 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_TIM_PWM_ConfigChannel+0x94>
 8002908:	2302      	movs	r3, #2
 800290a:	e0ff      	b.n	8002b0c <HAL_TIM_PWM_ConfigChannel+0x294>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b0c      	cmp	r3, #12
 8002918:	f200 80f0 	bhi.w	8002afc <HAL_TIM_PWM_ConfigChannel+0x284>
 800291c:	a201      	add	r2, pc, #4	@ (adr r2, 8002924 <HAL_TIM_PWM_ConfigChannel+0xac>)
 800291e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002922:	bf00      	nop
 8002924:	08002959 	.word	0x08002959
 8002928:	08002afd 	.word	0x08002afd
 800292c:	08002afd 	.word	0x08002afd
 8002930:	08002afd 	.word	0x08002afd
 8002934:	080029c1 	.word	0x080029c1
 8002938:	08002afd 	.word	0x08002afd
 800293c:	08002afd 	.word	0x08002afd
 8002940:	08002afd 	.word	0x08002afd
 8002944:	08002a2b 	.word	0x08002a2b
 8002948:	08002afd 	.word	0x08002afd
 800294c:	08002afd 	.word	0x08002afd
 8002950:	08002afd 	.word	0x08002afd
 8002954:	08002a93 	.word	0x08002a93
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a6e      	ldr	r2, [pc, #440]	@ (8002b18 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00e      	beq.n	8002980 <HAL_TIM_PWM_ConfigChannel+0x108>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800296a:	d009      	beq.n	8002980 <HAL_TIM_PWM_ConfigChannel+0x108>
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a6a      	ldr	r2, [pc, #424]	@ (8002b1c <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d004      	beq.n	8002980 <HAL_TIM_PWM_ConfigChannel+0x108>
 8002976:	f241 018e 	movw	r1, #4238	@ 0x108e
 800297a:	4866      	ldr	r0, [pc, #408]	@ (8002b14 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 800297c:	f7fd fe78 	bl	8000670 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fbdc 	bl	8003144 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0208 	orr.w	r2, r2, #8
 800299a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0204 	bic.w	r2, r2, #4
 80029aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6999      	ldr	r1, [r3, #24]
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	691a      	ldr	r2, [r3, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	619a      	str	r2, [r3, #24]
      break;
 80029be:	e0a0      	b.n	8002b02 <HAL_TIM_PWM_ConfigChannel+0x28a>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a54      	ldr	r2, [pc, #336]	@ (8002b18 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d00e      	beq.n	80029e8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d2:	d009      	beq.n	80029e8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a50      	ldr	r2, [pc, #320]	@ (8002b1c <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d004      	beq.n	80029e8 <HAL_TIM_PWM_ConfigChannel+0x170>
 80029de:	f241 019f 	movw	r1, #4255	@ 0x109f
 80029e2:	484c      	ldr	r0, [pc, #304]	@ (8002b14 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80029e4:	f7fd fe44 	bl	8000670 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fc38 	bl	8003264 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699a      	ldr	r2, [r3, #24]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6999      	ldr	r1, [r3, #24]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	021a      	lsls	r2, r3, #8
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	619a      	str	r2, [r3, #24]
      break;
 8002a28:	e06b      	b.n	8002b02 <HAL_TIM_PWM_ConfigChannel+0x28a>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a3a      	ldr	r2, [pc, #232]	@ (8002b18 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00e      	beq.n	8002a52 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a3c:	d009      	beq.n	8002a52 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a36      	ldr	r2, [pc, #216]	@ (8002b1c <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d004      	beq.n	8002a52 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8002a48:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 8002a4c:	4831      	ldr	r0, [pc, #196]	@ (8002b14 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8002a4e:	f7fd fe0f 	bl	8000670 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f000 fc97 	bl	800338c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69da      	ldr	r2, [r3, #28]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f042 0208 	orr.w	r2, r2, #8
 8002a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69da      	ldr	r2, [r3, #28]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0204 	bic.w	r2, r2, #4
 8002a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69d9      	ldr	r1, [r3, #28]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	61da      	str	r2, [r3, #28]
      break;
 8002a90:	e037      	b.n	8002b02 <HAL_TIM_PWM_ConfigChannel+0x28a>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a20      	ldr	r2, [pc, #128]	@ (8002b18 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00e      	beq.n	8002aba <HAL_TIM_PWM_ConfigChannel+0x242>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa4:	d009      	beq.n	8002aba <HAL_TIM_PWM_ConfigChannel+0x242>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8002b1c <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d004      	beq.n	8002aba <HAL_TIM_PWM_ConfigChannel+0x242>
 8002ab0:	f241 01c1 	movw	r1, #4289	@ 0x10c1
 8002ab4:	4817      	ldr	r0, [pc, #92]	@ (8002b14 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8002ab6:	f7fd fddb 	bl	8000670 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68b9      	ldr	r1, [r7, #8]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 fcf7 	bl	80034b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	69da      	ldr	r2, [r3, #28]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ad4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	69da      	ldr	r2, [r3, #28]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ae4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69d9      	ldr	r1, [r3, #28]
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	021a      	lsls	r2, r3, #8
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	61da      	str	r2, [r3, #28]
      break;
 8002afa:	e002      	b.n	8002b02 <HAL_TIM_PWM_ConfigChannel+0x28a>
    }

    default:
      status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	75fb      	strb	r3, [r7, #23]
      break;
 8002b00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	08004868 	.word	0x08004868
 8002b18:	40012c00 	.word	0x40012c00
 8002b1c:	40000400 	.word	0x40000400

08002b20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_TIM_ConfigClockSource+0x1c>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e266      	b.n	800300a <HAL_TIM_ConfigClockSource+0x4ea>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b54:	d029      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x8a>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b70      	cmp	r3, #112	@ 0x70
 8002b5c:	d025      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x8a>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b66:	d020      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x8a>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b40      	cmp	r3, #64	@ 0x40
 8002b6e:	d01c      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x8a>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b50      	cmp	r3, #80	@ 0x50
 8002b76:	d018      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x8a>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b60      	cmp	r3, #96	@ 0x60
 8002b7e:	d014      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x8a>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d010      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x8a>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d00c      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x8a>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d008      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x8a>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b30      	cmp	r3, #48	@ 0x30
 8002b9e:	d004      	beq.n	8002baa <HAL_TIM_ConfigClockSource+0x8a>
 8002ba0:	f241 41c2 	movw	r1, #5314	@ 0x14c2
 8002ba4:	4896      	ldr	r0, [pc, #600]	@ (8002e00 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002ba6:	f7fd fd63 	bl	8000670 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002bb8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bc0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bd2:	f000 80b3 	beq.w	8002d3c <HAL_TIM_ConfigClockSource+0x21c>
 8002bd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bda:	f200 8209 	bhi.w	8002ff0 <HAL_TIM_ConfigClockSource+0x4d0>
 8002bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002be2:	d02d      	beq.n	8002c40 <HAL_TIM_ConfigClockSource+0x120>
 8002be4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002be8:	f200 8202 	bhi.w	8002ff0 <HAL_TIM_ConfigClockSource+0x4d0>
 8002bec:	2b70      	cmp	r3, #112	@ 0x70
 8002bee:	d03f      	beq.n	8002c70 <HAL_TIM_ConfigClockSource+0x150>
 8002bf0:	2b70      	cmp	r3, #112	@ 0x70
 8002bf2:	f200 81fd 	bhi.w	8002ff0 <HAL_TIM_ConfigClockSource+0x4d0>
 8002bf6:	2b60      	cmp	r3, #96	@ 0x60
 8002bf8:	f000 814f 	beq.w	8002e9a <HAL_TIM_ConfigClockSource+0x37a>
 8002bfc:	2b60      	cmp	r3, #96	@ 0x60
 8002bfe:	f200 81f7 	bhi.w	8002ff0 <HAL_TIM_ConfigClockSource+0x4d0>
 8002c02:	2b50      	cmp	r3, #80	@ 0x50
 8002c04:	f000 8102 	beq.w	8002e0c <HAL_TIM_ConfigClockSource+0x2ec>
 8002c08:	2b50      	cmp	r3, #80	@ 0x50
 8002c0a:	f200 81f1 	bhi.w	8002ff0 <HAL_TIM_ConfigClockSource+0x4d0>
 8002c0e:	2b40      	cmp	r3, #64	@ 0x40
 8002c10:	f000 818a 	beq.w	8002f28 <HAL_TIM_ConfigClockSource+0x408>
 8002c14:	2b40      	cmp	r3, #64	@ 0x40
 8002c16:	f200 81eb 	bhi.w	8002ff0 <HAL_TIM_ConfigClockSource+0x4d0>
 8002c1a:	2b30      	cmp	r3, #48	@ 0x30
 8002c1c:	f000 81cb 	beq.w	8002fb6 <HAL_TIM_ConfigClockSource+0x496>
 8002c20:	2b30      	cmp	r3, #48	@ 0x30
 8002c22:	f200 81e5 	bhi.w	8002ff0 <HAL_TIM_ConfigClockSource+0x4d0>
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	f000 81c5 	beq.w	8002fb6 <HAL_TIM_ConfigClockSource+0x496>
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	f200 81df 	bhi.w	8002ff0 <HAL_TIM_ConfigClockSource+0x4d0>
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 81bf 	beq.w	8002fb6 <HAL_TIM_ConfigClockSource+0x496>
 8002c38:	2b10      	cmp	r3, #16
 8002c3a:	f000 81bc 	beq.w	8002fb6 <HAL_TIM_ConfigClockSource+0x496>
 8002c3e:	e1d7      	b.n	8002ff0 <HAL_TIM_ConfigClockSource+0x4d0>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a6f      	ldr	r2, [pc, #444]	@ (8002e04 <HAL_TIM_ConfigClockSource+0x2e4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	f000 81d5 	beq.w	8002ff6 <HAL_TIM_ConfigClockSource+0x4d6>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c54:	f000 81cf 	beq.w	8002ff6 <HAL_TIM_ConfigClockSource+0x4d6>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a6a      	ldr	r2, [pc, #424]	@ (8002e08 <HAL_TIM_ConfigClockSource+0x2e8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	f000 81c9 	beq.w	8002ff6 <HAL_TIM_ConfigClockSource+0x4d6>
 8002c64:	f241 41ce 	movw	r1, #5326	@ 0x14ce
 8002c68:	4865      	ldr	r0, [pc, #404]	@ (8002e00 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002c6a:	f7fd fd01 	bl	8000670 <assert_failed>
      break;
 8002c6e:	e1c2      	b.n	8002ff6 <HAL_TIM_ConfigClockSource+0x4d6>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a63      	ldr	r2, [pc, #396]	@ (8002e04 <HAL_TIM_ConfigClockSource+0x2e4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00e      	beq.n	8002c98 <HAL_TIM_ConfigClockSource+0x178>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c82:	d009      	beq.n	8002c98 <HAL_TIM_ConfigClockSource+0x178>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a5f      	ldr	r2, [pc, #380]	@ (8002e08 <HAL_TIM_ConfigClockSource+0x2e8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d004      	beq.n	8002c98 <HAL_TIM_ConfigClockSource+0x178>
 8002c8e:	f241 41d5 	movw	r1, #5333	@ 0x14d5
 8002c92:	485b      	ldr	r0, [pc, #364]	@ (8002e00 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002c94:	f7fd fcec 	bl	8000670 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d013      	beq.n	8002cc8 <HAL_TIM_ConfigClockSource+0x1a8>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ca8:	d00e      	beq.n	8002cc8 <HAL_TIM_ConfigClockSource+0x1a8>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cb2:	d009      	beq.n	8002cc8 <HAL_TIM_ConfigClockSource+0x1a8>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cbc:	d004      	beq.n	8002cc8 <HAL_TIM_ConfigClockSource+0x1a8>
 8002cbe:	f241 41d8 	movw	r1, #5336	@ 0x14d8
 8002cc2:	484f      	ldr	r0, [pc, #316]	@ (8002e00 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002cc4:	f7fd fcd4 	bl	8000670 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cd0:	d014      	beq.n	8002cfc <HAL_TIM_ConfigClockSource+0x1dc>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d010      	beq.n	8002cfc <HAL_TIM_ConfigClockSource+0x1dc>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00c      	beq.n	8002cfc <HAL_TIM_ConfigClockSource+0x1dc>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d008      	beq.n	8002cfc <HAL_TIM_ConfigClockSource+0x1dc>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b0a      	cmp	r3, #10
 8002cf0:	d004      	beq.n	8002cfc <HAL_TIM_ConfigClockSource+0x1dc>
 8002cf2:	f241 41d9 	movw	r1, #5337	@ 0x14d9
 8002cf6:	4842      	ldr	r0, [pc, #264]	@ (8002e00 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002cf8:	f7fd fcba 	bl	8000670 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b0f      	cmp	r3, #15
 8002d02:	d904      	bls.n	8002d0e <HAL_TIM_ConfigClockSource+0x1ee>
 8002d04:	f241 41da 	movw	r1, #5338	@ 0x14da
 8002d08:	483d      	ldr	r0, [pc, #244]	@ (8002e00 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002d0a:	f7fd fcb1 	bl	8000670 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d1e:	f000 fc9e 	bl	800365e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	609a      	str	r2, [r3, #8]
      break;
 8002d3a:	e15d      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x4d8>
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a30      	ldr	r2, [pc, #192]	@ (8002e04 <HAL_TIM_ConfigClockSource+0x2e4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00e      	beq.n	8002d64 <HAL_TIM_ConfigClockSource+0x244>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d4e:	d009      	beq.n	8002d64 <HAL_TIM_ConfigClockSource+0x244>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a2c      	ldr	r2, [pc, #176]	@ (8002e08 <HAL_TIM_ConfigClockSource+0x2e8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d004      	beq.n	8002d64 <HAL_TIM_ConfigClockSource+0x244>
 8002d5a:	f241 41ed 	movw	r1, #5357	@ 0x14ed
 8002d5e:	4828      	ldr	r0, [pc, #160]	@ (8002e00 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002d60:	f7fd fc86 	bl	8000670 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d013      	beq.n	8002d94 <HAL_TIM_ConfigClockSource+0x274>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d74:	d00e      	beq.n	8002d94 <HAL_TIM_ConfigClockSource+0x274>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d7e:	d009      	beq.n	8002d94 <HAL_TIM_ConfigClockSource+0x274>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002d88:	d004      	beq.n	8002d94 <HAL_TIM_ConfigClockSource+0x274>
 8002d8a:	f241 41f0 	movw	r1, #5360	@ 0x14f0
 8002d8e:	481c      	ldr	r0, [pc, #112]	@ (8002e00 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002d90:	f7fd fc6e 	bl	8000670 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d9c:	d014      	beq.n	8002dc8 <HAL_TIM_ConfigClockSource+0x2a8>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d010      	beq.n	8002dc8 <HAL_TIM_ConfigClockSource+0x2a8>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00c      	beq.n	8002dc8 <HAL_TIM_ConfigClockSource+0x2a8>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d008      	beq.n	8002dc8 <HAL_TIM_ConfigClockSource+0x2a8>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b0a      	cmp	r3, #10
 8002dbc:	d004      	beq.n	8002dc8 <HAL_TIM_ConfigClockSource+0x2a8>
 8002dbe:	f241 41f1 	movw	r1, #5361	@ 0x14f1
 8002dc2:	480f      	ldr	r0, [pc, #60]	@ (8002e00 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002dc4:	f7fd fc54 	bl	8000670 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2b0f      	cmp	r3, #15
 8002dce:	d904      	bls.n	8002dda <HAL_TIM_ConfigClockSource+0x2ba>
 8002dd0:	f241 41f2 	movw	r1, #5362	@ 0x14f2
 8002dd4:	480a      	ldr	r0, [pc, #40]	@ (8002e00 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002dd6:	f7fd fc4b 	bl	8000670 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002dea:	f000 fc38 	bl	800365e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dfc:	609a      	str	r2, [r3, #8]
      break;
 8002dfe:	e0fb      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x4d8>
 8002e00:	08004868 	.word	0x08004868
 8002e04:	40012c00 	.word	0x40012c00
 8002e08:	40000400 	.word	0x40000400
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a80      	ldr	r2, [pc, #512]	@ (8003014 <HAL_TIM_ConfigClockSource+0x4f4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00e      	beq.n	8002e34 <HAL_TIM_ConfigClockSource+0x314>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e1e:	d009      	beq.n	8002e34 <HAL_TIM_ConfigClockSource+0x314>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a7c      	ldr	r2, [pc, #496]	@ (8003018 <HAL_TIM_ConfigClockSource+0x4f8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d004      	beq.n	8002e34 <HAL_TIM_ConfigClockSource+0x314>
 8002e2a:	f241 5101 	movw	r1, #5377	@ 0x1501
 8002e2e:	487b      	ldr	r0, [pc, #492]	@ (800301c <HAL_TIM_ConfigClockSource+0x4fc>)
 8002e30:	f7fd fc1e 	bl	8000670 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e3c:	d014      	beq.n	8002e68 <HAL_TIM_ConfigClockSource+0x348>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d010      	beq.n	8002e68 <HAL_TIM_ConfigClockSource+0x348>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00c      	beq.n	8002e68 <HAL_TIM_ConfigClockSource+0x348>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d008      	beq.n	8002e68 <HAL_TIM_ConfigClockSource+0x348>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b0a      	cmp	r3, #10
 8002e5c:	d004      	beq.n	8002e68 <HAL_TIM_ConfigClockSource+0x348>
 8002e5e:	f241 5104 	movw	r1, #5380	@ 0x1504
 8002e62:	486e      	ldr	r0, [pc, #440]	@ (800301c <HAL_TIM_ConfigClockSource+0x4fc>)
 8002e64:	f7fd fc04 	bl	8000670 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b0f      	cmp	r3, #15
 8002e6e:	d904      	bls.n	8002e7a <HAL_TIM_ConfigClockSource+0x35a>
 8002e70:	f241 5105 	movw	r1, #5381	@ 0x1505
 8002e74:	4869      	ldr	r0, [pc, #420]	@ (800301c <HAL_TIM_ConfigClockSource+0x4fc>)
 8002e76:	f7fd fbfb 	bl	8000670 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e86:	461a      	mov	r2, r3
 8002e88:	f000 fb72 	bl	8003570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2150      	movs	r1, #80	@ 0x50
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fbc9 	bl	800362a <TIM_ITRx_SetConfig>
      break;
 8002e98:	e0ae      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x4d8>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a5d      	ldr	r2, [pc, #372]	@ (8003014 <HAL_TIM_ConfigClockSource+0x4f4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d00e      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x3a2>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eac:	d009      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x3a2>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a59      	ldr	r2, [pc, #356]	@ (8003018 <HAL_TIM_ConfigClockSource+0x4f8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d004      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x3a2>
 8002eb8:	f241 5111 	movw	r1, #5393	@ 0x1511
 8002ebc:	4857      	ldr	r0, [pc, #348]	@ (800301c <HAL_TIM_ConfigClockSource+0x4fc>)
 8002ebe:	f7fd fbd7 	bl	8000670 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002eca:	d014      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x3d6>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d010      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x3d6>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00c      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x3d6>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d008      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x3d6>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b0a      	cmp	r3, #10
 8002eea:	d004      	beq.n	8002ef6 <HAL_TIM_ConfigClockSource+0x3d6>
 8002eec:	f241 5114 	movw	r1, #5396	@ 0x1514
 8002ef0:	484a      	ldr	r0, [pc, #296]	@ (800301c <HAL_TIM_ConfigClockSource+0x4fc>)
 8002ef2:	f7fd fbbd 	bl	8000670 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	2b0f      	cmp	r3, #15
 8002efc:	d904      	bls.n	8002f08 <HAL_TIM_ConfigClockSource+0x3e8>
 8002efe:	f241 5115 	movw	r1, #5397	@ 0x1515
 8002f02:	4846      	ldr	r0, [pc, #280]	@ (800301c <HAL_TIM_ConfigClockSource+0x4fc>)
 8002f04:	f7fd fbb4 	bl	8000670 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f14:	461a      	mov	r2, r3
 8002f16:	f000 fb59 	bl	80035cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2160      	movs	r1, #96	@ 0x60
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fb82 	bl	800362a <TIM_ITRx_SetConfig>
      break;
 8002f26:	e067      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x4d8>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a39      	ldr	r2, [pc, #228]	@ (8003014 <HAL_TIM_ConfigClockSource+0x4f4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00e      	beq.n	8002f50 <HAL_TIM_ConfigClockSource+0x430>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f3a:	d009      	beq.n	8002f50 <HAL_TIM_ConfigClockSource+0x430>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a35      	ldr	r2, [pc, #212]	@ (8003018 <HAL_TIM_ConfigClockSource+0x4f8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d004      	beq.n	8002f50 <HAL_TIM_ConfigClockSource+0x430>
 8002f46:	f241 5121 	movw	r1, #5409	@ 0x1521
 8002f4a:	4834      	ldr	r0, [pc, #208]	@ (800301c <HAL_TIM_ConfigClockSource+0x4fc>)
 8002f4c:	f7fd fb90 	bl	8000670 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f58:	d014      	beq.n	8002f84 <HAL_TIM_ConfigClockSource+0x464>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d010      	beq.n	8002f84 <HAL_TIM_ConfigClockSource+0x464>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00c      	beq.n	8002f84 <HAL_TIM_ConfigClockSource+0x464>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d008      	beq.n	8002f84 <HAL_TIM_ConfigClockSource+0x464>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b0a      	cmp	r3, #10
 8002f78:	d004      	beq.n	8002f84 <HAL_TIM_ConfigClockSource+0x464>
 8002f7a:	f241 5124 	movw	r1, #5412	@ 0x1524
 8002f7e:	4827      	ldr	r0, [pc, #156]	@ (800301c <HAL_TIM_ConfigClockSource+0x4fc>)
 8002f80:	f7fd fb76 	bl	8000670 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b0f      	cmp	r3, #15
 8002f8a:	d904      	bls.n	8002f96 <HAL_TIM_ConfigClockSource+0x476>
 8002f8c:	f241 5125 	movw	r1, #5413	@ 0x1525
 8002f90:	4822      	ldr	r0, [pc, #136]	@ (800301c <HAL_TIM_ConfigClockSource+0x4fc>)
 8002f92:	f7fd fb6d 	bl	8000670 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f000 fae4 	bl	8003570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2140      	movs	r1, #64	@ 0x40
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fb3b 	bl	800362a <TIM_ITRx_SetConfig>
      break;
 8002fb4:	e020      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x4d8>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a16      	ldr	r2, [pc, #88]	@ (8003014 <HAL_TIM_ConfigClockSource+0x4f4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00e      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x4be>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fc8:	d009      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x4be>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a12      	ldr	r2, [pc, #72]	@ (8003018 <HAL_TIM_ConfigClockSource+0x4f8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_TIM_ConfigClockSource+0x4be>
 8002fd4:	f241 5134 	movw	r1, #5428	@ 0x1534
 8002fd8:	4810      	ldr	r0, [pc, #64]	@ (800301c <HAL_TIM_ConfigClockSource+0x4fc>)
 8002fda:	f7fd fb49 	bl	8000670 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4610      	mov	r0, r2
 8002fea:	f000 fb1e 	bl	800362a <TIM_ITRx_SetConfig>
      break;
 8002fee:	e003      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x4d8>
    }

    default:
      status = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff4:	e000      	b.n	8002ff8 <HAL_TIM_ConfigClockSource+0x4d8>
      break;
 8002ff6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003008:	7bfb      	ldrb	r3, [r7, #15]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40012c00 	.word	0x40012c00
 8003018:	40000400 	.word	0x40000400
 800301c:	08004868 	.word	0x08004868

08003020 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr

08003056 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr
	...

0800307c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a2b      	ldr	r2, [pc, #172]	@ (800313c <TIM_Base_SetConfig+0xc0>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d007      	beq.n	80030a4 <TIM_Base_SetConfig+0x28>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800309a:	d003      	beq.n	80030a4 <TIM_Base_SetConfig+0x28>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a28      	ldr	r2, [pc, #160]	@ (8003140 <TIM_Base_SetConfig+0xc4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d108      	bne.n	80030b6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a20      	ldr	r2, [pc, #128]	@ (800313c <TIM_Base_SetConfig+0xc0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d007      	beq.n	80030ce <TIM_Base_SetConfig+0x52>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030c4:	d003      	beq.n	80030ce <TIM_Base_SetConfig+0x52>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003140 <TIM_Base_SetConfig+0xc4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d108      	bne.n	80030e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a0d      	ldr	r2, [pc, #52]	@ (800313c <TIM_Base_SetConfig+0xc0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d103      	bne.n	8003114 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	f023 0201 	bic.w	r2, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	611a      	str	r2, [r3, #16]
  }
}
 8003132:	bf00      	nop
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	40012c00 	.word	0x40012c00
 8003140:	40000400 	.word	0x40000400

08003144 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	f023 0201 	bic.w	r2, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0303 	bic.w	r3, r3, #3
 800317a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f023 0302 	bic.w	r3, r3, #2
 800318c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4313      	orrs	r3, r2
 8003196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a30      	ldr	r2, [pc, #192]	@ (800325c <TIM_OC1_SetConfig+0x118>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d119      	bne.n	80031d4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <TIM_OC1_SetConfig+0x76>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d004      	beq.n	80031ba <TIM_OC1_SetConfig+0x76>
 80031b0:	f641 21cf 	movw	r1, #6863	@ 0x1acf
 80031b4:	482a      	ldr	r0, [pc, #168]	@ (8003260 <TIM_OC1_SetConfig+0x11c>)
 80031b6:	f7fd fa5b 	bl	8000670 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f023 0308 	bic.w	r3, r3, #8
 80031c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f023 0304 	bic.w	r3, r3, #4
 80031d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a21      	ldr	r2, [pc, #132]	@ (800325c <TIM_OC1_SetConfig+0x118>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d12d      	bne.n	8003238 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031e4:	d008      	beq.n	80031f8 <TIM_OC1_SetConfig+0xb4>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d004      	beq.n	80031f8 <TIM_OC1_SetConfig+0xb4>
 80031ee:	f641 21dc 	movw	r1, #6876	@ 0x1adc
 80031f2:	481b      	ldr	r0, [pc, #108]	@ (8003260 <TIM_OC1_SetConfig+0x11c>)
 80031f4:	f7fd fa3c 	bl	8000670 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003200:	d008      	beq.n	8003214 <TIM_OC1_SetConfig+0xd0>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d004      	beq.n	8003214 <TIM_OC1_SetConfig+0xd0>
 800320a:	f641 21dd 	movw	r1, #6877	@ 0x1add
 800320e:	4814      	ldr	r0, [pc, #80]	@ (8003260 <TIM_OC1_SetConfig+0x11c>)
 8003210:	f7fd fa2e 	bl	8000670 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800321a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003222:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	621a      	str	r2, [r3, #32]
}
 8003252:	bf00      	nop
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40012c00 	.word	0x40012c00
 8003260:	08004868 	.word	0x08004868

08003264 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	f023 0210 	bic.w	r2, r3, #16
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800329a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	021b      	lsls	r3, r3, #8
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f023 0320 	bic.w	r3, r3, #32
 80032ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a31      	ldr	r2, [pc, #196]	@ (8003384 <TIM_OC2_SetConfig+0x120>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d11a      	bne.n	80032fa <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <TIM_OC2_SetConfig+0x7a>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d004      	beq.n	80032de <TIM_OC2_SetConfig+0x7a>
 80032d4:	f641 311b 	movw	r1, #6939	@ 0x1b1b
 80032d8:	482b      	ldr	r0, [pc, #172]	@ (8003388 <TIM_OC2_SetConfig+0x124>)
 80032da:	f7fd f9c9 	bl	8000670 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a21      	ldr	r2, [pc, #132]	@ (8003384 <TIM_OC2_SetConfig+0x120>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d12f      	bne.n	8003362 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800330a:	d008      	beq.n	800331e <TIM_OC2_SetConfig+0xba>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d004      	beq.n	800331e <TIM_OC2_SetConfig+0xba>
 8003314:	f641 3128 	movw	r1, #6952	@ 0x1b28
 8003318:	481b      	ldr	r0, [pc, #108]	@ (8003388 <TIM_OC2_SetConfig+0x124>)
 800331a:	f7fd f9a9 	bl	8000670 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003326:	d008      	beq.n	800333a <TIM_OC2_SetConfig+0xd6>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d004      	beq.n	800333a <TIM_OC2_SetConfig+0xd6>
 8003330:	f641 3129 	movw	r1, #6953	@ 0x1b29
 8003334:	4814      	ldr	r0, [pc, #80]	@ (8003388 <TIM_OC2_SetConfig+0x124>)
 8003336:	f7fd f99b 	bl	8000670 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	621a      	str	r2, [r3, #32]
}
 800337c:	bf00      	nop
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40012c00 	.word	0x40012c00
 8003388:	08004868 	.word	0x08004868

0800338c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 0303 	bic.w	r3, r3, #3
 80033c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a31      	ldr	r2, [pc, #196]	@ (80034ac <TIM_OC3_SetConfig+0x120>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d11a      	bne.n	8003420 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <TIM_OC3_SetConfig+0x78>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d004      	beq.n	8003404 <TIM_OC3_SetConfig+0x78>
 80033fa:	f641 3166 	movw	r1, #7014	@ 0x1b66
 80033fe:	482c      	ldr	r0, [pc, #176]	@ (80034b0 <TIM_OC3_SetConfig+0x124>)
 8003400:	f7fd f936 	bl	8000670 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800340a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800341e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a22      	ldr	r2, [pc, #136]	@ (80034ac <TIM_OC3_SetConfig+0x120>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d12f      	bne.n	8003488 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003430:	d008      	beq.n	8003444 <TIM_OC3_SetConfig+0xb8>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d004      	beq.n	8003444 <TIM_OC3_SetConfig+0xb8>
 800343a:	f641 3173 	movw	r1, #7027	@ 0x1b73
 800343e:	481c      	ldr	r0, [pc, #112]	@ (80034b0 <TIM_OC3_SetConfig+0x124>)
 8003440:	f7fd f916 	bl	8000670 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800344c:	d008      	beq.n	8003460 <TIM_OC3_SetConfig+0xd4>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d004      	beq.n	8003460 <TIM_OC3_SetConfig+0xd4>
 8003456:	f641 3174 	movw	r1, #7028	@ 0x1b74
 800345a:	4815      	ldr	r0, [pc, #84]	@ (80034b0 <TIM_OC3_SetConfig+0x124>)
 800345c:	f7fd f908 	bl	8000670 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003466:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800346e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	621a      	str	r2, [r3, #32]
}
 80034a2:	bf00      	nop
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40012c00 	.word	0x40012c00
 80034b0:	08004868 	.word	0x08004868

080034b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	021b      	lsls	r3, r3, #8
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	031b      	lsls	r3, r3, #12
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a16      	ldr	r2, [pc, #88]	@ (8003568 <TIM_OC4_SetConfig+0xb4>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d117      	bne.n	8003544 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800351c:	d008      	beq.n	8003530 <TIM_OC4_SetConfig+0x7c>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d004      	beq.n	8003530 <TIM_OC4_SetConfig+0x7c>
 8003526:	f641 31b3 	movw	r1, #7091	@ 0x1bb3
 800352a:	4810      	ldr	r0, [pc, #64]	@ (800356c <TIM_OC4_SetConfig+0xb8>)
 800352c:	f7fd f8a0 	bl	8000670 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003536:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	019b      	lsls	r3, r3, #6
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4313      	orrs	r3, r2
 8003542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	621a      	str	r2, [r3, #32]
}
 800355e:	bf00      	nop
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40012c00 	.word	0x40012c00
 800356c:	08004868 	.word	0x08004868

08003570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	f023 0201 	bic.w	r2, r3, #1
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800359a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f023 030a 	bic.w	r3, r3, #10
 80035ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	621a      	str	r2, [r3, #32]
}
 80035c2:	bf00      	nop
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr

080035cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6a1b      	ldr	r3, [r3, #32]
 80035dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	f023 0210 	bic.w	r2, r3, #16
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80035f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	031b      	lsls	r3, r3, #12
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003608:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	4313      	orrs	r3, r2
 8003612:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	621a      	str	r2, [r3, #32]
}
 8003620:	bf00      	nop
 8003622:	371c      	adds	r7, #28
 8003624:	46bd      	mov	sp, r7
 8003626:	bc80      	pop	{r7}
 8003628:	4770      	bx	lr

0800362a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800362a:	b480      	push	{r7}
 800362c:	b085      	sub	sp, #20
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	f043 0307 	orr.w	r3, r3, #7
 800364c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	609a      	str	r2, [r3, #8]
}
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr

0800365e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800365e:	b480      	push	{r7}
 8003660:	b087      	sub	sp, #28
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
 800366a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003678:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	021a      	lsls	r2, r3, #8
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	431a      	orrs	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	4313      	orrs	r3, r2
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	4313      	orrs	r3, r2
 800368a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	609a      	str	r2, [r3, #8]
}
 8003692:	bf00      	nop
 8003694:	371c      	adds	r7, #28
 8003696:	46bd      	mov	sp, r7
 8003698:	bc80      	pop	{r7}
 800369a:	4770      	bx	lr

0800369c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4a20      	ldr	r2, [pc, #128]	@ (800372c <TIM_CCxChannelCmd+0x90>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00c      	beq.n	80036ca <TIM_CCxChannelCmd+0x2e>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b6:	d008      	beq.n	80036ca <TIM_CCxChannelCmd+0x2e>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003730 <TIM_CCxChannelCmd+0x94>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d004      	beq.n	80036ca <TIM_CCxChannelCmd+0x2e>
 80036c0:	f641 519c 	movw	r1, #7580	@ 0x1d9c
 80036c4:	481b      	ldr	r0, [pc, #108]	@ (8003734 <TIM_CCxChannelCmd+0x98>)
 80036c6:	f7fc ffd3 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d010      	beq.n	80036f2 <TIM_CCxChannelCmd+0x56>
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d00d      	beq.n	80036f2 <TIM_CCxChannelCmd+0x56>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d00a      	beq.n	80036f2 <TIM_CCxChannelCmd+0x56>
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b0c      	cmp	r3, #12
 80036e0:	d007      	beq.n	80036f2 <TIM_CCxChannelCmd+0x56>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b3c      	cmp	r3, #60	@ 0x3c
 80036e6:	d004      	beq.n	80036f2 <TIM_CCxChannelCmd+0x56>
 80036e8:	f641 519d 	movw	r1, #7581	@ 0x1d9d
 80036ec:	4811      	ldr	r0, [pc, #68]	@ (8003734 <TIM_CCxChannelCmd+0x98>)
 80036ee:	f7fc ffbf 	bl	8000670 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f003 031f 	and.w	r3, r3, #31
 80036f8:	2201      	movs	r2, #1
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6a1a      	ldr	r2, [r3, #32]
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	43db      	mvns	r3, r3
 8003708:	401a      	ands	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a1a      	ldr	r2, [r3, #32]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	fa01 f303 	lsl.w	r3, r1, r3
 800371e:	431a      	orrs	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	621a      	str	r2, [r3, #32]
}
 8003724:	bf00      	nop
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40012c00 	.word	0x40012c00
 8003730:	40000400 	.word	0x40000400
 8003734:	08004868 	.word	0x08004868

08003738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a48      	ldr	r2, [pc, #288]	@ (8003868 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00e      	beq.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003754:	d009      	beq.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a44      	ldr	r2, [pc, #272]	@ (800386c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d004      	beq.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8003760:	f240 71a9 	movw	r1, #1961	@ 0x7a9
 8003764:	4842      	ldr	r0, [pc, #264]	@ (8003870 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 8003766:	f7fc ff83 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d020      	beq.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b10      	cmp	r3, #16
 8003778:	d01c      	beq.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b20      	cmp	r3, #32
 8003780:	d018      	beq.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b30      	cmp	r3, #48	@ 0x30
 8003788:	d014      	beq.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b40      	cmp	r3, #64	@ 0x40
 8003790:	d010      	beq.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b50      	cmp	r3, #80	@ 0x50
 8003798:	d00c      	beq.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b60      	cmp	r3, #96	@ 0x60
 80037a0:	d008      	beq.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b70      	cmp	r3, #112	@ 0x70
 80037a8:	d004      	beq.n	80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80037aa:	f240 71aa 	movw	r1, #1962	@ 0x7aa
 80037ae:	4830      	ldr	r0, [pc, #192]	@ (8003870 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 80037b0:	f7fc ff5e 	bl	8000670 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b80      	cmp	r3, #128	@ 0x80
 80037ba:	d008      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d004      	beq.n	80037ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80037c4:	f240 71ab 	movw	r1, #1963	@ 0x7ab
 80037c8:	4829      	ldr	r0, [pc, #164]	@ (8003870 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 80037ca:	f7fc ff51 	bl	8000670 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80037d8:	2302      	movs	r3, #2
 80037da:	e041      	b.n	8003860 <HAL_TIMEx_MasterConfigSynchronization+0x128>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a13      	ldr	r2, [pc, #76]	@ (8003868 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d009      	beq.n	8003834 <HAL_TIMEx_MasterConfigSynchronization+0xfc>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003828:	d004      	beq.n	8003834 <HAL_TIMEx_MasterConfigSynchronization+0xfc>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a0f      	ldr	r2, [pc, #60]	@ (800386c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d10c      	bne.n	800384e <HAL_TIMEx_MasterConfigSynchronization+0x116>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800383a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	4313      	orrs	r3, r2
 8003844:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40012c00 	.word	0x40012c00
 800386c:	40000400 	.word	0x40000400
 8003870:	080048a0 	.word	0x080048a0

08003874 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr

08003886 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e08b      	b.n	80039c2 <HAL_UART_Init+0x12a>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d027      	beq.n	8003902 <HAL_UART_Init+0x6a>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a45      	ldr	r2, [pc, #276]	@ (80039cc <HAL_UART_Init+0x134>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d009      	beq.n	80038d0 <HAL_UART_Init+0x38>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a43      	ldr	r2, [pc, #268]	@ (80039d0 <HAL_UART_Init+0x138>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d004      	beq.n	80038d0 <HAL_UART_Init+0x38>
 80038c6:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 80038ca:	4842      	ldr	r0, [pc, #264]	@ (80039d4 <HAL_UART_Init+0x13c>)
 80038cc:	f7fc fed0 	bl	8000670 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d023      	beq.n	8003920 <HAL_UART_Init+0x88>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038e0:	d01e      	beq.n	8003920 <HAL_UART_Init+0x88>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038ea:	d019      	beq.n	8003920 <HAL_UART_Init+0x88>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038f4:	d014      	beq.n	8003920 <HAL_UART_Init+0x88>
 80038f6:	f240 116f 	movw	r1, #367	@ 0x16f
 80038fa:	4836      	ldr	r0, [pc, #216]	@ (80039d4 <HAL_UART_Init+0x13c>)
 80038fc:	f7fc feb8 	bl	8000670 <assert_failed>
 8003900:	e00e      	b.n	8003920 <HAL_UART_Init+0x88>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a31      	ldr	r2, [pc, #196]	@ (80039cc <HAL_UART_Init+0x134>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d009      	beq.n	8003920 <HAL_UART_Init+0x88>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a2f      	ldr	r2, [pc, #188]	@ (80039d0 <HAL_UART_Init+0x138>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d004      	beq.n	8003920 <HAL_UART_Init+0x88>
 8003916:	f240 1173 	movw	r1, #371	@ 0x173
 800391a:	482e      	ldr	r0, [pc, #184]	@ (80039d4 <HAL_UART_Init+0x13c>)
 800391c:	f7fc fea8 	bl	8000670 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d009      	beq.n	800393c <HAL_UART_Init+0xa4>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003930:	d004      	beq.n	800393c <HAL_UART_Init+0xa4>
 8003932:	f240 1175 	movw	r1, #373	@ 0x175
 8003936:	4827      	ldr	r0, [pc, #156]	@ (80039d4 <HAL_UART_Init+0x13c>)
 8003938:	f7fc fe9a 	bl	8000670 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d106      	bne.n	8003956 <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7fc ff63 	bl	800081c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2224      	movs	r2, #36	@ 0x24
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800396c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f978 	bl	8003c64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003982:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003992:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039a2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40013800 	.word	0x40013800
 80039d0:	40004400 	.word	0x40004400
 80039d4:	080048dc 	.word	0x080048dc

080039d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08a      	sub	sp, #40	@ 0x28
 80039dc:	af02      	add	r7, sp, #8
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	4613      	mov	r3, r2
 80039e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b20      	cmp	r3, #32
 80039f6:	d175      	bne.n	8003ae4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d002      	beq.n	8003a04 <HAL_UART_Transmit+0x2c>
 80039fe:	88fb      	ldrh	r3, [r7, #6]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e06e      	b.n	8003ae6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2221      	movs	r2, #33	@ 0x21
 8003a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a16:	f7fd f847 	bl	8000aa8 <HAL_GetTick>
 8003a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	88fa      	ldrh	r2, [r7, #6]
 8003a26:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a30:	d108      	bne.n	8003a44 <HAL_UART_Transmit+0x6c>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d104      	bne.n	8003a44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	61bb      	str	r3, [r7, #24]
 8003a42:	e003      	b.n	8003a4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a4c:	e02e      	b.n	8003aac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2200      	movs	r2, #0
 8003a56:	2180      	movs	r1, #128	@ 0x80
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f848 	bl	8003aee <UART_WaitOnFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e03a      	b.n	8003ae6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d10b      	bne.n	8003a8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	881b      	ldrh	r3, [r3, #0]
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	3302      	adds	r3, #2
 8003a8a:	61bb      	str	r3, [r7, #24]
 8003a8c:	e007      	b.n	8003a9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	781a      	ldrb	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1cb      	bne.n	8003a4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2200      	movs	r2, #0
 8003abe:	2140      	movs	r1, #64	@ 0x40
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 f814 	bl	8003aee <UART_WaitOnFlagUntilTimeout>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d005      	beq.n	8003ad8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e006      	b.n	8003ae6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e000      	b.n	8003ae6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ae4:	2302      	movs	r3, #2
  }
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b086      	sub	sp, #24
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	4613      	mov	r3, r2
 8003afc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003afe:	e03b      	b.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b06:	d037      	beq.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b08:	f7fc ffce 	bl	8000aa8 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	6a3a      	ldr	r2, [r7, #32]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d302      	bcc.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e03a      	b.n	8003b98 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d023      	beq.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b80      	cmp	r3, #128	@ 0x80
 8003b34:	d020      	beq.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	2b40      	cmp	r3, #64	@ 0x40
 8003b3a:	d01d      	beq.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d116      	bne.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	617b      	str	r3, [r7, #20]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 f81d 	bl	8003ba0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2208      	movs	r2, #8
 8003b6a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e00f      	b.n	8003b98 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4013      	ands	r3, r2
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d0b4      	beq.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b095      	sub	sp, #84	@ 0x54
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	330c      	adds	r3, #12
 8003bae:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bc8:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e5      	bne.n	8003ba8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3314      	adds	r3, #20
 8003be2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	e853 3f00 	ldrex	r3, [r3]
 8003bea:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f023 0301 	bic.w	r3, r3, #1
 8003bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3314      	adds	r3, #20
 8003bfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c04:	e841 2300 	strex	r3, r2, [r1]
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e5      	bne.n	8003bdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d119      	bne.n	8003c4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	330c      	adds	r3, #12
 8003c1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	e853 3f00 	ldrex	r3, [r3]
 8003c26:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f023 0310 	bic.w	r3, r3, #16
 8003c2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	330c      	adds	r3, #12
 8003c36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c38:	61ba      	str	r2, [r7, #24]
 8003c3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	6979      	ldr	r1, [r7, #20]
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	613b      	str	r3, [r7, #16]
   return(result);
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e5      	bne.n	8003c18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c5a:	bf00      	nop
 8003c5c:	3754      	adds	r7, #84	@ 0x54
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr

08003c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	4a5f      	ldr	r2, [pc, #380]	@ (8003df0 <UART_SetConfig+0x18c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d904      	bls.n	8003c80 <UART_SetConfig+0x1c>
 8003c76:	f640 6175 	movw	r1, #3701	@ 0xe75
 8003c7a:	485e      	ldr	r0, [pc, #376]	@ (8003df4 <UART_SetConfig+0x190>)
 8003c7c:	f7fc fcf8 	bl	8000670 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d009      	beq.n	8003c9c <UART_SetConfig+0x38>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c90:	d004      	beq.n	8003c9c <UART_SetConfig+0x38>
 8003c92:	f640 6176 	movw	r1, #3702	@ 0xe76
 8003c96:	4857      	ldr	r0, [pc, #348]	@ (8003df4 <UART_SetConfig+0x190>)
 8003c98:	f7fc fcea 	bl	8000670 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00e      	beq.n	8003cc2 <UART_SetConfig+0x5e>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cac:	d009      	beq.n	8003cc2 <UART_SetConfig+0x5e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003cb6:	d004      	beq.n	8003cc2 <UART_SetConfig+0x5e>
 8003cb8:	f640 6177 	movw	r1, #3703	@ 0xe77
 8003cbc:	484d      	ldr	r0, [pc, #308]	@ (8003df4 <UART_SetConfig+0x190>)
 8003cbe:	f7fc fcd7 	bl	8000670 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d103      	bne.n	8003cd8 <UART_SetConfig+0x74>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d104      	bne.n	8003ce2 <UART_SetConfig+0x7e>
 8003cd8:	f640 6178 	movw	r1, #3704	@ 0xe78
 8003cdc:	4845      	ldr	r0, [pc, #276]	@ (8003df4 <UART_SetConfig+0x190>)
 8003cde:	f7fc fcc7 	bl	8000670 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	68da      	ldr	r2, [r3, #12]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003d14:	f023 030c 	bic.w	r3, r3, #12
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699a      	ldr	r2, [r3, #24]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a2e      	ldr	r2, [pc, #184]	@ (8003df8 <UART_SetConfig+0x194>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d103      	bne.n	8003d4a <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d42:	f7fe f801 	bl	8001d48 <HAL_RCC_GetPCLK2Freq>
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	e002      	b.n	8003d50 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d4a:	f7fd ffe9 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 8003d4e:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4613      	mov	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	009a      	lsls	r2, r3, #2
 8003d5a:	441a      	add	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d66:	4a25      	ldr	r2, [pc, #148]	@ (8003dfc <UART_SetConfig+0x198>)
 8003d68:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6c:	095b      	lsrs	r3, r3, #5
 8003d6e:	0119      	lsls	r1, r3, #4
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	009a      	lsls	r2, r3, #2
 8003d7a:	441a      	add	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d86:	4b1d      	ldr	r3, [pc, #116]	@ (8003dfc <UART_SetConfig+0x198>)
 8003d88:	fba3 0302 	umull	r0, r3, r3, r2
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	2064      	movs	r0, #100	@ 0x64
 8003d90:	fb00 f303 	mul.w	r3, r0, r3
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	3332      	adds	r3, #50	@ 0x32
 8003d9a:	4a18      	ldr	r2, [pc, #96]	@ (8003dfc <UART_SetConfig+0x198>)
 8003d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003da6:	4419      	add	r1, r3
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	009a      	lsls	r2, r3, #2
 8003db2:	441a      	add	r2, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8003dfc <UART_SetConfig+0x198>)
 8003dc0:	fba3 0302 	umull	r0, r3, r3, r2
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	2064      	movs	r0, #100	@ 0x64
 8003dc8:	fb00 f303 	mul.w	r3, r0, r3
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	3332      	adds	r3, #50	@ 0x32
 8003dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003dfc <UART_SetConfig+0x198>)
 8003dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	f003 020f 	and.w	r2, r3, #15
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	440a      	add	r2, r1
 8003de4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003de6:	bf00      	nop
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	0044aa20 	.word	0x0044aa20
 8003df4:	080048dc 	.word	0x080048dc
 8003df8:	40013800 	.word	0x40013800
 8003dfc:	51eb851f 	.word	0x51eb851f

08003e00 <siprintf>:
 8003e00:	b40e      	push	{r1, r2, r3}
 8003e02:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003e06:	b500      	push	{lr}
 8003e08:	b09c      	sub	sp, #112	@ 0x70
 8003e0a:	ab1d      	add	r3, sp, #116	@ 0x74
 8003e0c:	9002      	str	r0, [sp, #8]
 8003e0e:	9006      	str	r0, [sp, #24]
 8003e10:	9107      	str	r1, [sp, #28]
 8003e12:	9104      	str	r1, [sp, #16]
 8003e14:	4808      	ldr	r0, [pc, #32]	@ (8003e38 <siprintf+0x38>)
 8003e16:	4909      	ldr	r1, [pc, #36]	@ (8003e3c <siprintf+0x3c>)
 8003e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e1c:	9105      	str	r1, [sp, #20]
 8003e1e:	6800      	ldr	r0, [r0, #0]
 8003e20:	a902      	add	r1, sp, #8
 8003e22:	9301      	str	r3, [sp, #4]
 8003e24:	f000 f992 	bl	800414c <_svfiprintf_r>
 8003e28:	2200      	movs	r2, #0
 8003e2a:	9b02      	ldr	r3, [sp, #8]
 8003e2c:	701a      	strb	r2, [r3, #0]
 8003e2e:	b01c      	add	sp, #112	@ 0x70
 8003e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e34:	b003      	add	sp, #12
 8003e36:	4770      	bx	lr
 8003e38:	2000000c 	.word	0x2000000c
 8003e3c:	ffff0208 	.word	0xffff0208

08003e40 <memset>:
 8003e40:	4603      	mov	r3, r0
 8003e42:	4402      	add	r2, r0
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d100      	bne.n	8003e4a <memset+0xa>
 8003e48:	4770      	bx	lr
 8003e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e4e:	e7f9      	b.n	8003e44 <memset+0x4>

08003e50 <__errno>:
 8003e50:	4b01      	ldr	r3, [pc, #4]	@ (8003e58 <__errno+0x8>)
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	2000000c 	.word	0x2000000c

08003e5c <__libc_init_array>:
 8003e5c:	b570      	push	{r4, r5, r6, lr}
 8003e5e:	2600      	movs	r6, #0
 8003e60:	4d0c      	ldr	r5, [pc, #48]	@ (8003e94 <__libc_init_array+0x38>)
 8003e62:	4c0d      	ldr	r4, [pc, #52]	@ (8003e98 <__libc_init_array+0x3c>)
 8003e64:	1b64      	subs	r4, r4, r5
 8003e66:	10a4      	asrs	r4, r4, #2
 8003e68:	42a6      	cmp	r6, r4
 8003e6a:	d109      	bne.n	8003e80 <__libc_init_array+0x24>
 8003e6c:	f000 fc78 	bl	8004760 <_init>
 8003e70:	2600      	movs	r6, #0
 8003e72:	4d0a      	ldr	r5, [pc, #40]	@ (8003e9c <__libc_init_array+0x40>)
 8003e74:	4c0a      	ldr	r4, [pc, #40]	@ (8003ea0 <__libc_init_array+0x44>)
 8003e76:	1b64      	subs	r4, r4, r5
 8003e78:	10a4      	asrs	r4, r4, #2
 8003e7a:	42a6      	cmp	r6, r4
 8003e7c:	d105      	bne.n	8003e8a <__libc_init_array+0x2e>
 8003e7e:	bd70      	pop	{r4, r5, r6, pc}
 8003e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e84:	4798      	blx	r3
 8003e86:	3601      	adds	r6, #1
 8003e88:	e7ee      	b.n	8003e68 <__libc_init_array+0xc>
 8003e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e8e:	4798      	blx	r3
 8003e90:	3601      	adds	r6, #1
 8003e92:	e7f2      	b.n	8003e7a <__libc_init_array+0x1e>
 8003e94:	08004980 	.word	0x08004980
 8003e98:	08004980 	.word	0x08004980
 8003e9c:	08004980 	.word	0x08004980
 8003ea0:	08004984 	.word	0x08004984

08003ea4 <__retarget_lock_acquire_recursive>:
 8003ea4:	4770      	bx	lr

08003ea6 <__retarget_lock_release_recursive>:
 8003ea6:	4770      	bx	lr

08003ea8 <_free_r>:
 8003ea8:	b538      	push	{r3, r4, r5, lr}
 8003eaa:	4605      	mov	r5, r0
 8003eac:	2900      	cmp	r1, #0
 8003eae:	d040      	beq.n	8003f32 <_free_r+0x8a>
 8003eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003eb4:	1f0c      	subs	r4, r1, #4
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	bfb8      	it	lt
 8003eba:	18e4      	addlt	r4, r4, r3
 8003ebc:	f000 f8de 	bl	800407c <__malloc_lock>
 8003ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f34 <_free_r+0x8c>)
 8003ec2:	6813      	ldr	r3, [r2, #0]
 8003ec4:	b933      	cbnz	r3, 8003ed4 <_free_r+0x2c>
 8003ec6:	6063      	str	r3, [r4, #4]
 8003ec8:	6014      	str	r4, [r2, #0]
 8003eca:	4628      	mov	r0, r5
 8003ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ed0:	f000 b8da 	b.w	8004088 <__malloc_unlock>
 8003ed4:	42a3      	cmp	r3, r4
 8003ed6:	d908      	bls.n	8003eea <_free_r+0x42>
 8003ed8:	6820      	ldr	r0, [r4, #0]
 8003eda:	1821      	adds	r1, r4, r0
 8003edc:	428b      	cmp	r3, r1
 8003ede:	bf01      	itttt	eq
 8003ee0:	6819      	ldreq	r1, [r3, #0]
 8003ee2:	685b      	ldreq	r3, [r3, #4]
 8003ee4:	1809      	addeq	r1, r1, r0
 8003ee6:	6021      	streq	r1, [r4, #0]
 8003ee8:	e7ed      	b.n	8003ec6 <_free_r+0x1e>
 8003eea:	461a      	mov	r2, r3
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	b10b      	cbz	r3, 8003ef4 <_free_r+0x4c>
 8003ef0:	42a3      	cmp	r3, r4
 8003ef2:	d9fa      	bls.n	8003eea <_free_r+0x42>
 8003ef4:	6811      	ldr	r1, [r2, #0]
 8003ef6:	1850      	adds	r0, r2, r1
 8003ef8:	42a0      	cmp	r0, r4
 8003efa:	d10b      	bne.n	8003f14 <_free_r+0x6c>
 8003efc:	6820      	ldr	r0, [r4, #0]
 8003efe:	4401      	add	r1, r0
 8003f00:	1850      	adds	r0, r2, r1
 8003f02:	4283      	cmp	r3, r0
 8003f04:	6011      	str	r1, [r2, #0]
 8003f06:	d1e0      	bne.n	8003eca <_free_r+0x22>
 8003f08:	6818      	ldr	r0, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4408      	add	r0, r1
 8003f0e:	6010      	str	r0, [r2, #0]
 8003f10:	6053      	str	r3, [r2, #4]
 8003f12:	e7da      	b.n	8003eca <_free_r+0x22>
 8003f14:	d902      	bls.n	8003f1c <_free_r+0x74>
 8003f16:	230c      	movs	r3, #12
 8003f18:	602b      	str	r3, [r5, #0]
 8003f1a:	e7d6      	b.n	8003eca <_free_r+0x22>
 8003f1c:	6820      	ldr	r0, [r4, #0]
 8003f1e:	1821      	adds	r1, r4, r0
 8003f20:	428b      	cmp	r3, r1
 8003f22:	bf01      	itttt	eq
 8003f24:	6819      	ldreq	r1, [r3, #0]
 8003f26:	685b      	ldreq	r3, [r3, #4]
 8003f28:	1809      	addeq	r1, r1, r0
 8003f2a:	6021      	streq	r1, [r4, #0]
 8003f2c:	6063      	str	r3, [r4, #4]
 8003f2e:	6054      	str	r4, [r2, #4]
 8003f30:	e7cb      	b.n	8003eca <_free_r+0x22>
 8003f32:	bd38      	pop	{r3, r4, r5, pc}
 8003f34:	2000029c 	.word	0x2000029c

08003f38 <sbrk_aligned>:
 8003f38:	b570      	push	{r4, r5, r6, lr}
 8003f3a:	4e0f      	ldr	r6, [pc, #60]	@ (8003f78 <sbrk_aligned+0x40>)
 8003f3c:	460c      	mov	r4, r1
 8003f3e:	6831      	ldr	r1, [r6, #0]
 8003f40:	4605      	mov	r5, r0
 8003f42:	b911      	cbnz	r1, 8003f4a <sbrk_aligned+0x12>
 8003f44:	f000 fbaa 	bl	800469c <_sbrk_r>
 8003f48:	6030      	str	r0, [r6, #0]
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	f000 fba5 	bl	800469c <_sbrk_r>
 8003f52:	1c43      	adds	r3, r0, #1
 8003f54:	d103      	bne.n	8003f5e <sbrk_aligned+0x26>
 8003f56:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	bd70      	pop	{r4, r5, r6, pc}
 8003f5e:	1cc4      	adds	r4, r0, #3
 8003f60:	f024 0403 	bic.w	r4, r4, #3
 8003f64:	42a0      	cmp	r0, r4
 8003f66:	d0f8      	beq.n	8003f5a <sbrk_aligned+0x22>
 8003f68:	1a21      	subs	r1, r4, r0
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	f000 fb96 	bl	800469c <_sbrk_r>
 8003f70:	3001      	adds	r0, #1
 8003f72:	d1f2      	bne.n	8003f5a <sbrk_aligned+0x22>
 8003f74:	e7ef      	b.n	8003f56 <sbrk_aligned+0x1e>
 8003f76:	bf00      	nop
 8003f78:	20000298 	.word	0x20000298

08003f7c <_malloc_r>:
 8003f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f80:	1ccd      	adds	r5, r1, #3
 8003f82:	f025 0503 	bic.w	r5, r5, #3
 8003f86:	3508      	adds	r5, #8
 8003f88:	2d0c      	cmp	r5, #12
 8003f8a:	bf38      	it	cc
 8003f8c:	250c      	movcc	r5, #12
 8003f8e:	2d00      	cmp	r5, #0
 8003f90:	4606      	mov	r6, r0
 8003f92:	db01      	blt.n	8003f98 <_malloc_r+0x1c>
 8003f94:	42a9      	cmp	r1, r5
 8003f96:	d904      	bls.n	8003fa2 <_malloc_r+0x26>
 8003f98:	230c      	movs	r3, #12
 8003f9a:	6033      	str	r3, [r6, #0]
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fa2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004078 <_malloc_r+0xfc>
 8003fa6:	f000 f869 	bl	800407c <__malloc_lock>
 8003faa:	f8d8 3000 	ldr.w	r3, [r8]
 8003fae:	461c      	mov	r4, r3
 8003fb0:	bb44      	cbnz	r4, 8004004 <_malloc_r+0x88>
 8003fb2:	4629      	mov	r1, r5
 8003fb4:	4630      	mov	r0, r6
 8003fb6:	f7ff ffbf 	bl	8003f38 <sbrk_aligned>
 8003fba:	1c43      	adds	r3, r0, #1
 8003fbc:	4604      	mov	r4, r0
 8003fbe:	d158      	bne.n	8004072 <_malloc_r+0xf6>
 8003fc0:	f8d8 4000 	ldr.w	r4, [r8]
 8003fc4:	4627      	mov	r7, r4
 8003fc6:	2f00      	cmp	r7, #0
 8003fc8:	d143      	bne.n	8004052 <_malloc_r+0xd6>
 8003fca:	2c00      	cmp	r4, #0
 8003fcc:	d04b      	beq.n	8004066 <_malloc_r+0xea>
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	4639      	mov	r1, r7
 8003fd2:	4630      	mov	r0, r6
 8003fd4:	eb04 0903 	add.w	r9, r4, r3
 8003fd8:	f000 fb60 	bl	800469c <_sbrk_r>
 8003fdc:	4581      	cmp	r9, r0
 8003fde:	d142      	bne.n	8004066 <_malloc_r+0xea>
 8003fe0:	6821      	ldr	r1, [r4, #0]
 8003fe2:	4630      	mov	r0, r6
 8003fe4:	1a6d      	subs	r5, r5, r1
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	f7ff ffa6 	bl	8003f38 <sbrk_aligned>
 8003fec:	3001      	adds	r0, #1
 8003fee:	d03a      	beq.n	8004066 <_malloc_r+0xea>
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	442b      	add	r3, r5
 8003ff4:	6023      	str	r3, [r4, #0]
 8003ff6:	f8d8 3000 	ldr.w	r3, [r8]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	bb62      	cbnz	r2, 8004058 <_malloc_r+0xdc>
 8003ffe:	f8c8 7000 	str.w	r7, [r8]
 8004002:	e00f      	b.n	8004024 <_malloc_r+0xa8>
 8004004:	6822      	ldr	r2, [r4, #0]
 8004006:	1b52      	subs	r2, r2, r5
 8004008:	d420      	bmi.n	800404c <_malloc_r+0xd0>
 800400a:	2a0b      	cmp	r2, #11
 800400c:	d917      	bls.n	800403e <_malloc_r+0xc2>
 800400e:	1961      	adds	r1, r4, r5
 8004010:	42a3      	cmp	r3, r4
 8004012:	6025      	str	r5, [r4, #0]
 8004014:	bf18      	it	ne
 8004016:	6059      	strne	r1, [r3, #4]
 8004018:	6863      	ldr	r3, [r4, #4]
 800401a:	bf08      	it	eq
 800401c:	f8c8 1000 	streq.w	r1, [r8]
 8004020:	5162      	str	r2, [r4, r5]
 8004022:	604b      	str	r3, [r1, #4]
 8004024:	4630      	mov	r0, r6
 8004026:	f000 f82f 	bl	8004088 <__malloc_unlock>
 800402a:	f104 000b 	add.w	r0, r4, #11
 800402e:	1d23      	adds	r3, r4, #4
 8004030:	f020 0007 	bic.w	r0, r0, #7
 8004034:	1ac2      	subs	r2, r0, r3
 8004036:	bf1c      	itt	ne
 8004038:	1a1b      	subne	r3, r3, r0
 800403a:	50a3      	strne	r3, [r4, r2]
 800403c:	e7af      	b.n	8003f9e <_malloc_r+0x22>
 800403e:	6862      	ldr	r2, [r4, #4]
 8004040:	42a3      	cmp	r3, r4
 8004042:	bf0c      	ite	eq
 8004044:	f8c8 2000 	streq.w	r2, [r8]
 8004048:	605a      	strne	r2, [r3, #4]
 800404a:	e7eb      	b.n	8004024 <_malloc_r+0xa8>
 800404c:	4623      	mov	r3, r4
 800404e:	6864      	ldr	r4, [r4, #4]
 8004050:	e7ae      	b.n	8003fb0 <_malloc_r+0x34>
 8004052:	463c      	mov	r4, r7
 8004054:	687f      	ldr	r7, [r7, #4]
 8004056:	e7b6      	b.n	8003fc6 <_malloc_r+0x4a>
 8004058:	461a      	mov	r2, r3
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	42a3      	cmp	r3, r4
 800405e:	d1fb      	bne.n	8004058 <_malloc_r+0xdc>
 8004060:	2300      	movs	r3, #0
 8004062:	6053      	str	r3, [r2, #4]
 8004064:	e7de      	b.n	8004024 <_malloc_r+0xa8>
 8004066:	230c      	movs	r3, #12
 8004068:	4630      	mov	r0, r6
 800406a:	6033      	str	r3, [r6, #0]
 800406c:	f000 f80c 	bl	8004088 <__malloc_unlock>
 8004070:	e794      	b.n	8003f9c <_malloc_r+0x20>
 8004072:	6005      	str	r5, [r0, #0]
 8004074:	e7d6      	b.n	8004024 <_malloc_r+0xa8>
 8004076:	bf00      	nop
 8004078:	2000029c 	.word	0x2000029c

0800407c <__malloc_lock>:
 800407c:	4801      	ldr	r0, [pc, #4]	@ (8004084 <__malloc_lock+0x8>)
 800407e:	f7ff bf11 	b.w	8003ea4 <__retarget_lock_acquire_recursive>
 8004082:	bf00      	nop
 8004084:	20000294 	.word	0x20000294

08004088 <__malloc_unlock>:
 8004088:	4801      	ldr	r0, [pc, #4]	@ (8004090 <__malloc_unlock+0x8>)
 800408a:	f7ff bf0c 	b.w	8003ea6 <__retarget_lock_release_recursive>
 800408e:	bf00      	nop
 8004090:	20000294 	.word	0x20000294

08004094 <__ssputs_r>:
 8004094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004098:	461f      	mov	r7, r3
 800409a:	688e      	ldr	r6, [r1, #8]
 800409c:	4682      	mov	sl, r0
 800409e:	42be      	cmp	r6, r7
 80040a0:	460c      	mov	r4, r1
 80040a2:	4690      	mov	r8, r2
 80040a4:	680b      	ldr	r3, [r1, #0]
 80040a6:	d82d      	bhi.n	8004104 <__ssputs_r+0x70>
 80040a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80040b0:	d026      	beq.n	8004100 <__ssputs_r+0x6c>
 80040b2:	6965      	ldr	r5, [r4, #20]
 80040b4:	6909      	ldr	r1, [r1, #16]
 80040b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040ba:	eba3 0901 	sub.w	r9, r3, r1
 80040be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040c2:	1c7b      	adds	r3, r7, #1
 80040c4:	444b      	add	r3, r9
 80040c6:	106d      	asrs	r5, r5, #1
 80040c8:	429d      	cmp	r5, r3
 80040ca:	bf38      	it	cc
 80040cc:	461d      	movcc	r5, r3
 80040ce:	0553      	lsls	r3, r2, #21
 80040d0:	d527      	bpl.n	8004122 <__ssputs_r+0x8e>
 80040d2:	4629      	mov	r1, r5
 80040d4:	f7ff ff52 	bl	8003f7c <_malloc_r>
 80040d8:	4606      	mov	r6, r0
 80040da:	b360      	cbz	r0, 8004136 <__ssputs_r+0xa2>
 80040dc:	464a      	mov	r2, r9
 80040de:	6921      	ldr	r1, [r4, #16]
 80040e0:	f000 fafa 	bl	80046d8 <memcpy>
 80040e4:	89a3      	ldrh	r3, [r4, #12]
 80040e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ee:	81a3      	strh	r3, [r4, #12]
 80040f0:	6126      	str	r6, [r4, #16]
 80040f2:	444e      	add	r6, r9
 80040f4:	6026      	str	r6, [r4, #0]
 80040f6:	463e      	mov	r6, r7
 80040f8:	6165      	str	r5, [r4, #20]
 80040fa:	eba5 0509 	sub.w	r5, r5, r9
 80040fe:	60a5      	str	r5, [r4, #8]
 8004100:	42be      	cmp	r6, r7
 8004102:	d900      	bls.n	8004106 <__ssputs_r+0x72>
 8004104:	463e      	mov	r6, r7
 8004106:	4632      	mov	r2, r6
 8004108:	4641      	mov	r1, r8
 800410a:	6820      	ldr	r0, [r4, #0]
 800410c:	f000 faac 	bl	8004668 <memmove>
 8004110:	2000      	movs	r0, #0
 8004112:	68a3      	ldr	r3, [r4, #8]
 8004114:	1b9b      	subs	r3, r3, r6
 8004116:	60a3      	str	r3, [r4, #8]
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	4433      	add	r3, r6
 800411c:	6023      	str	r3, [r4, #0]
 800411e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004122:	462a      	mov	r2, r5
 8004124:	f000 fae6 	bl	80046f4 <_realloc_r>
 8004128:	4606      	mov	r6, r0
 800412a:	2800      	cmp	r0, #0
 800412c:	d1e0      	bne.n	80040f0 <__ssputs_r+0x5c>
 800412e:	4650      	mov	r0, sl
 8004130:	6921      	ldr	r1, [r4, #16]
 8004132:	f7ff feb9 	bl	8003ea8 <_free_r>
 8004136:	230c      	movs	r3, #12
 8004138:	f8ca 3000 	str.w	r3, [sl]
 800413c:	89a3      	ldrh	r3, [r4, #12]
 800413e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004146:	81a3      	strh	r3, [r4, #12]
 8004148:	e7e9      	b.n	800411e <__ssputs_r+0x8a>
	...

0800414c <_svfiprintf_r>:
 800414c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004150:	4698      	mov	r8, r3
 8004152:	898b      	ldrh	r3, [r1, #12]
 8004154:	4607      	mov	r7, r0
 8004156:	061b      	lsls	r3, r3, #24
 8004158:	460d      	mov	r5, r1
 800415a:	4614      	mov	r4, r2
 800415c:	b09d      	sub	sp, #116	@ 0x74
 800415e:	d510      	bpl.n	8004182 <_svfiprintf_r+0x36>
 8004160:	690b      	ldr	r3, [r1, #16]
 8004162:	b973      	cbnz	r3, 8004182 <_svfiprintf_r+0x36>
 8004164:	2140      	movs	r1, #64	@ 0x40
 8004166:	f7ff ff09 	bl	8003f7c <_malloc_r>
 800416a:	6028      	str	r0, [r5, #0]
 800416c:	6128      	str	r0, [r5, #16]
 800416e:	b930      	cbnz	r0, 800417e <_svfiprintf_r+0x32>
 8004170:	230c      	movs	r3, #12
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004178:	b01d      	add	sp, #116	@ 0x74
 800417a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800417e:	2340      	movs	r3, #64	@ 0x40
 8004180:	616b      	str	r3, [r5, #20]
 8004182:	2300      	movs	r3, #0
 8004184:	9309      	str	r3, [sp, #36]	@ 0x24
 8004186:	2320      	movs	r3, #32
 8004188:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800418c:	2330      	movs	r3, #48	@ 0x30
 800418e:	f04f 0901 	mov.w	r9, #1
 8004192:	f8cd 800c 	str.w	r8, [sp, #12]
 8004196:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004330 <_svfiprintf_r+0x1e4>
 800419a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800419e:	4623      	mov	r3, r4
 80041a0:	469a      	mov	sl, r3
 80041a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041a6:	b10a      	cbz	r2, 80041ac <_svfiprintf_r+0x60>
 80041a8:	2a25      	cmp	r2, #37	@ 0x25
 80041aa:	d1f9      	bne.n	80041a0 <_svfiprintf_r+0x54>
 80041ac:	ebba 0b04 	subs.w	fp, sl, r4
 80041b0:	d00b      	beq.n	80041ca <_svfiprintf_r+0x7e>
 80041b2:	465b      	mov	r3, fp
 80041b4:	4622      	mov	r2, r4
 80041b6:	4629      	mov	r1, r5
 80041b8:	4638      	mov	r0, r7
 80041ba:	f7ff ff6b 	bl	8004094 <__ssputs_r>
 80041be:	3001      	adds	r0, #1
 80041c0:	f000 80a7 	beq.w	8004312 <_svfiprintf_r+0x1c6>
 80041c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041c6:	445a      	add	r2, fp
 80041c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80041ca:	f89a 3000 	ldrb.w	r3, [sl]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 809f 	beq.w	8004312 <_svfiprintf_r+0x1c6>
 80041d4:	2300      	movs	r3, #0
 80041d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80041da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041de:	f10a 0a01 	add.w	sl, sl, #1
 80041e2:	9304      	str	r3, [sp, #16]
 80041e4:	9307      	str	r3, [sp, #28]
 80041e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80041ec:	4654      	mov	r4, sl
 80041ee:	2205      	movs	r2, #5
 80041f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041f4:	484e      	ldr	r0, [pc, #312]	@ (8004330 <_svfiprintf_r+0x1e4>)
 80041f6:	f000 fa61 	bl	80046bc <memchr>
 80041fa:	9a04      	ldr	r2, [sp, #16]
 80041fc:	b9d8      	cbnz	r0, 8004236 <_svfiprintf_r+0xea>
 80041fe:	06d0      	lsls	r0, r2, #27
 8004200:	bf44      	itt	mi
 8004202:	2320      	movmi	r3, #32
 8004204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004208:	0711      	lsls	r1, r2, #28
 800420a:	bf44      	itt	mi
 800420c:	232b      	movmi	r3, #43	@ 0x2b
 800420e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004212:	f89a 3000 	ldrb.w	r3, [sl]
 8004216:	2b2a      	cmp	r3, #42	@ 0x2a
 8004218:	d015      	beq.n	8004246 <_svfiprintf_r+0xfa>
 800421a:	4654      	mov	r4, sl
 800421c:	2000      	movs	r0, #0
 800421e:	f04f 0c0a 	mov.w	ip, #10
 8004222:	9a07      	ldr	r2, [sp, #28]
 8004224:	4621      	mov	r1, r4
 8004226:	f811 3b01 	ldrb.w	r3, [r1], #1
 800422a:	3b30      	subs	r3, #48	@ 0x30
 800422c:	2b09      	cmp	r3, #9
 800422e:	d94b      	bls.n	80042c8 <_svfiprintf_r+0x17c>
 8004230:	b1b0      	cbz	r0, 8004260 <_svfiprintf_r+0x114>
 8004232:	9207      	str	r2, [sp, #28]
 8004234:	e014      	b.n	8004260 <_svfiprintf_r+0x114>
 8004236:	eba0 0308 	sub.w	r3, r0, r8
 800423a:	fa09 f303 	lsl.w	r3, r9, r3
 800423e:	4313      	orrs	r3, r2
 8004240:	46a2      	mov	sl, r4
 8004242:	9304      	str	r3, [sp, #16]
 8004244:	e7d2      	b.n	80041ec <_svfiprintf_r+0xa0>
 8004246:	9b03      	ldr	r3, [sp, #12]
 8004248:	1d19      	adds	r1, r3, #4
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	9103      	str	r1, [sp, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	bfbb      	ittet	lt
 8004252:	425b      	neglt	r3, r3
 8004254:	f042 0202 	orrlt.w	r2, r2, #2
 8004258:	9307      	strge	r3, [sp, #28]
 800425a:	9307      	strlt	r3, [sp, #28]
 800425c:	bfb8      	it	lt
 800425e:	9204      	strlt	r2, [sp, #16]
 8004260:	7823      	ldrb	r3, [r4, #0]
 8004262:	2b2e      	cmp	r3, #46	@ 0x2e
 8004264:	d10a      	bne.n	800427c <_svfiprintf_r+0x130>
 8004266:	7863      	ldrb	r3, [r4, #1]
 8004268:	2b2a      	cmp	r3, #42	@ 0x2a
 800426a:	d132      	bne.n	80042d2 <_svfiprintf_r+0x186>
 800426c:	9b03      	ldr	r3, [sp, #12]
 800426e:	3402      	adds	r4, #2
 8004270:	1d1a      	adds	r2, r3, #4
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	9203      	str	r2, [sp, #12]
 8004276:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800427a:	9305      	str	r3, [sp, #20]
 800427c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004334 <_svfiprintf_r+0x1e8>
 8004280:	2203      	movs	r2, #3
 8004282:	4650      	mov	r0, sl
 8004284:	7821      	ldrb	r1, [r4, #0]
 8004286:	f000 fa19 	bl	80046bc <memchr>
 800428a:	b138      	cbz	r0, 800429c <_svfiprintf_r+0x150>
 800428c:	2240      	movs	r2, #64	@ 0x40
 800428e:	9b04      	ldr	r3, [sp, #16]
 8004290:	eba0 000a 	sub.w	r0, r0, sl
 8004294:	4082      	lsls	r2, r0
 8004296:	4313      	orrs	r3, r2
 8004298:	3401      	adds	r4, #1
 800429a:	9304      	str	r3, [sp, #16]
 800429c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042a0:	2206      	movs	r2, #6
 80042a2:	4825      	ldr	r0, [pc, #148]	@ (8004338 <_svfiprintf_r+0x1ec>)
 80042a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80042a8:	f000 fa08 	bl	80046bc <memchr>
 80042ac:	2800      	cmp	r0, #0
 80042ae:	d036      	beq.n	800431e <_svfiprintf_r+0x1d2>
 80042b0:	4b22      	ldr	r3, [pc, #136]	@ (800433c <_svfiprintf_r+0x1f0>)
 80042b2:	bb1b      	cbnz	r3, 80042fc <_svfiprintf_r+0x1b0>
 80042b4:	9b03      	ldr	r3, [sp, #12]
 80042b6:	3307      	adds	r3, #7
 80042b8:	f023 0307 	bic.w	r3, r3, #7
 80042bc:	3308      	adds	r3, #8
 80042be:	9303      	str	r3, [sp, #12]
 80042c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042c2:	4433      	add	r3, r6
 80042c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80042c6:	e76a      	b.n	800419e <_svfiprintf_r+0x52>
 80042c8:	460c      	mov	r4, r1
 80042ca:	2001      	movs	r0, #1
 80042cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80042d0:	e7a8      	b.n	8004224 <_svfiprintf_r+0xd8>
 80042d2:	2300      	movs	r3, #0
 80042d4:	f04f 0c0a 	mov.w	ip, #10
 80042d8:	4619      	mov	r1, r3
 80042da:	3401      	adds	r4, #1
 80042dc:	9305      	str	r3, [sp, #20]
 80042de:	4620      	mov	r0, r4
 80042e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042e4:	3a30      	subs	r2, #48	@ 0x30
 80042e6:	2a09      	cmp	r2, #9
 80042e8:	d903      	bls.n	80042f2 <_svfiprintf_r+0x1a6>
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d0c6      	beq.n	800427c <_svfiprintf_r+0x130>
 80042ee:	9105      	str	r1, [sp, #20]
 80042f0:	e7c4      	b.n	800427c <_svfiprintf_r+0x130>
 80042f2:	4604      	mov	r4, r0
 80042f4:	2301      	movs	r3, #1
 80042f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80042fa:	e7f0      	b.n	80042de <_svfiprintf_r+0x192>
 80042fc:	ab03      	add	r3, sp, #12
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	462a      	mov	r2, r5
 8004302:	4638      	mov	r0, r7
 8004304:	4b0e      	ldr	r3, [pc, #56]	@ (8004340 <_svfiprintf_r+0x1f4>)
 8004306:	a904      	add	r1, sp, #16
 8004308:	f3af 8000 	nop.w
 800430c:	1c42      	adds	r2, r0, #1
 800430e:	4606      	mov	r6, r0
 8004310:	d1d6      	bne.n	80042c0 <_svfiprintf_r+0x174>
 8004312:	89ab      	ldrh	r3, [r5, #12]
 8004314:	065b      	lsls	r3, r3, #25
 8004316:	f53f af2d 	bmi.w	8004174 <_svfiprintf_r+0x28>
 800431a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800431c:	e72c      	b.n	8004178 <_svfiprintf_r+0x2c>
 800431e:	ab03      	add	r3, sp, #12
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	462a      	mov	r2, r5
 8004324:	4638      	mov	r0, r7
 8004326:	4b06      	ldr	r3, [pc, #24]	@ (8004340 <_svfiprintf_r+0x1f4>)
 8004328:	a904      	add	r1, sp, #16
 800432a:	f000 f87d 	bl	8004428 <_printf_i>
 800432e:	e7ed      	b.n	800430c <_svfiprintf_r+0x1c0>
 8004330:	08004942 	.word	0x08004942
 8004334:	08004948 	.word	0x08004948
 8004338:	0800494c 	.word	0x0800494c
 800433c:	00000000 	.word	0x00000000
 8004340:	08004095 	.word	0x08004095

08004344 <_printf_common>:
 8004344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004348:	4616      	mov	r6, r2
 800434a:	4698      	mov	r8, r3
 800434c:	688a      	ldr	r2, [r1, #8]
 800434e:	690b      	ldr	r3, [r1, #16]
 8004350:	4607      	mov	r7, r0
 8004352:	4293      	cmp	r3, r2
 8004354:	bfb8      	it	lt
 8004356:	4613      	movlt	r3, r2
 8004358:	6033      	str	r3, [r6, #0]
 800435a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800435e:	460c      	mov	r4, r1
 8004360:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004364:	b10a      	cbz	r2, 800436a <_printf_common+0x26>
 8004366:	3301      	adds	r3, #1
 8004368:	6033      	str	r3, [r6, #0]
 800436a:	6823      	ldr	r3, [r4, #0]
 800436c:	0699      	lsls	r1, r3, #26
 800436e:	bf42      	ittt	mi
 8004370:	6833      	ldrmi	r3, [r6, #0]
 8004372:	3302      	addmi	r3, #2
 8004374:	6033      	strmi	r3, [r6, #0]
 8004376:	6825      	ldr	r5, [r4, #0]
 8004378:	f015 0506 	ands.w	r5, r5, #6
 800437c:	d106      	bne.n	800438c <_printf_common+0x48>
 800437e:	f104 0a19 	add.w	sl, r4, #25
 8004382:	68e3      	ldr	r3, [r4, #12]
 8004384:	6832      	ldr	r2, [r6, #0]
 8004386:	1a9b      	subs	r3, r3, r2
 8004388:	42ab      	cmp	r3, r5
 800438a:	dc2b      	bgt.n	80043e4 <_printf_common+0xa0>
 800438c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004390:	6822      	ldr	r2, [r4, #0]
 8004392:	3b00      	subs	r3, #0
 8004394:	bf18      	it	ne
 8004396:	2301      	movne	r3, #1
 8004398:	0692      	lsls	r2, r2, #26
 800439a:	d430      	bmi.n	80043fe <_printf_common+0xba>
 800439c:	4641      	mov	r1, r8
 800439e:	4638      	mov	r0, r7
 80043a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043a4:	47c8      	blx	r9
 80043a6:	3001      	adds	r0, #1
 80043a8:	d023      	beq.n	80043f2 <_printf_common+0xae>
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	6922      	ldr	r2, [r4, #16]
 80043ae:	f003 0306 	and.w	r3, r3, #6
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	bf14      	ite	ne
 80043b6:	2500      	movne	r5, #0
 80043b8:	6833      	ldreq	r3, [r6, #0]
 80043ba:	f04f 0600 	mov.w	r6, #0
 80043be:	bf08      	it	eq
 80043c0:	68e5      	ldreq	r5, [r4, #12]
 80043c2:	f104 041a 	add.w	r4, r4, #26
 80043c6:	bf08      	it	eq
 80043c8:	1aed      	subeq	r5, r5, r3
 80043ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80043ce:	bf08      	it	eq
 80043d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043d4:	4293      	cmp	r3, r2
 80043d6:	bfc4      	itt	gt
 80043d8:	1a9b      	subgt	r3, r3, r2
 80043da:	18ed      	addgt	r5, r5, r3
 80043dc:	42b5      	cmp	r5, r6
 80043de:	d11a      	bne.n	8004416 <_printf_common+0xd2>
 80043e0:	2000      	movs	r0, #0
 80043e2:	e008      	b.n	80043f6 <_printf_common+0xb2>
 80043e4:	2301      	movs	r3, #1
 80043e6:	4652      	mov	r2, sl
 80043e8:	4641      	mov	r1, r8
 80043ea:	4638      	mov	r0, r7
 80043ec:	47c8      	blx	r9
 80043ee:	3001      	adds	r0, #1
 80043f0:	d103      	bne.n	80043fa <_printf_common+0xb6>
 80043f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fa:	3501      	adds	r5, #1
 80043fc:	e7c1      	b.n	8004382 <_printf_common+0x3e>
 80043fe:	2030      	movs	r0, #48	@ 0x30
 8004400:	18e1      	adds	r1, r4, r3
 8004402:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800440c:	4422      	add	r2, r4
 800440e:	3302      	adds	r3, #2
 8004410:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004414:	e7c2      	b.n	800439c <_printf_common+0x58>
 8004416:	2301      	movs	r3, #1
 8004418:	4622      	mov	r2, r4
 800441a:	4641      	mov	r1, r8
 800441c:	4638      	mov	r0, r7
 800441e:	47c8      	blx	r9
 8004420:	3001      	adds	r0, #1
 8004422:	d0e6      	beq.n	80043f2 <_printf_common+0xae>
 8004424:	3601      	adds	r6, #1
 8004426:	e7d9      	b.n	80043dc <_printf_common+0x98>

08004428 <_printf_i>:
 8004428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800442c:	7e0f      	ldrb	r7, [r1, #24]
 800442e:	4691      	mov	r9, r2
 8004430:	2f78      	cmp	r7, #120	@ 0x78
 8004432:	4680      	mov	r8, r0
 8004434:	460c      	mov	r4, r1
 8004436:	469a      	mov	sl, r3
 8004438:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800443a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800443e:	d807      	bhi.n	8004450 <_printf_i+0x28>
 8004440:	2f62      	cmp	r7, #98	@ 0x62
 8004442:	d80a      	bhi.n	800445a <_printf_i+0x32>
 8004444:	2f00      	cmp	r7, #0
 8004446:	f000 80d3 	beq.w	80045f0 <_printf_i+0x1c8>
 800444a:	2f58      	cmp	r7, #88	@ 0x58
 800444c:	f000 80ba 	beq.w	80045c4 <_printf_i+0x19c>
 8004450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004454:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004458:	e03a      	b.n	80044d0 <_printf_i+0xa8>
 800445a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800445e:	2b15      	cmp	r3, #21
 8004460:	d8f6      	bhi.n	8004450 <_printf_i+0x28>
 8004462:	a101      	add	r1, pc, #4	@ (adr r1, 8004468 <_printf_i+0x40>)
 8004464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004468:	080044c1 	.word	0x080044c1
 800446c:	080044d5 	.word	0x080044d5
 8004470:	08004451 	.word	0x08004451
 8004474:	08004451 	.word	0x08004451
 8004478:	08004451 	.word	0x08004451
 800447c:	08004451 	.word	0x08004451
 8004480:	080044d5 	.word	0x080044d5
 8004484:	08004451 	.word	0x08004451
 8004488:	08004451 	.word	0x08004451
 800448c:	08004451 	.word	0x08004451
 8004490:	08004451 	.word	0x08004451
 8004494:	080045d7 	.word	0x080045d7
 8004498:	080044ff 	.word	0x080044ff
 800449c:	08004591 	.word	0x08004591
 80044a0:	08004451 	.word	0x08004451
 80044a4:	08004451 	.word	0x08004451
 80044a8:	080045f9 	.word	0x080045f9
 80044ac:	08004451 	.word	0x08004451
 80044b0:	080044ff 	.word	0x080044ff
 80044b4:	08004451 	.word	0x08004451
 80044b8:	08004451 	.word	0x08004451
 80044bc:	08004599 	.word	0x08004599
 80044c0:	6833      	ldr	r3, [r6, #0]
 80044c2:	1d1a      	adds	r2, r3, #4
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6032      	str	r2, [r6, #0]
 80044c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044d0:	2301      	movs	r3, #1
 80044d2:	e09e      	b.n	8004612 <_printf_i+0x1ea>
 80044d4:	6833      	ldr	r3, [r6, #0]
 80044d6:	6820      	ldr	r0, [r4, #0]
 80044d8:	1d19      	adds	r1, r3, #4
 80044da:	6031      	str	r1, [r6, #0]
 80044dc:	0606      	lsls	r6, r0, #24
 80044de:	d501      	bpl.n	80044e4 <_printf_i+0xbc>
 80044e0:	681d      	ldr	r5, [r3, #0]
 80044e2:	e003      	b.n	80044ec <_printf_i+0xc4>
 80044e4:	0645      	lsls	r5, r0, #25
 80044e6:	d5fb      	bpl.n	80044e0 <_printf_i+0xb8>
 80044e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044ec:	2d00      	cmp	r5, #0
 80044ee:	da03      	bge.n	80044f8 <_printf_i+0xd0>
 80044f0:	232d      	movs	r3, #45	@ 0x2d
 80044f2:	426d      	negs	r5, r5
 80044f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044f8:	230a      	movs	r3, #10
 80044fa:	4859      	ldr	r0, [pc, #356]	@ (8004660 <_printf_i+0x238>)
 80044fc:	e011      	b.n	8004522 <_printf_i+0xfa>
 80044fe:	6821      	ldr	r1, [r4, #0]
 8004500:	6833      	ldr	r3, [r6, #0]
 8004502:	0608      	lsls	r0, r1, #24
 8004504:	f853 5b04 	ldr.w	r5, [r3], #4
 8004508:	d402      	bmi.n	8004510 <_printf_i+0xe8>
 800450a:	0649      	lsls	r1, r1, #25
 800450c:	bf48      	it	mi
 800450e:	b2ad      	uxthmi	r5, r5
 8004510:	2f6f      	cmp	r7, #111	@ 0x6f
 8004512:	6033      	str	r3, [r6, #0]
 8004514:	bf14      	ite	ne
 8004516:	230a      	movne	r3, #10
 8004518:	2308      	moveq	r3, #8
 800451a:	4851      	ldr	r0, [pc, #324]	@ (8004660 <_printf_i+0x238>)
 800451c:	2100      	movs	r1, #0
 800451e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004522:	6866      	ldr	r6, [r4, #4]
 8004524:	2e00      	cmp	r6, #0
 8004526:	bfa8      	it	ge
 8004528:	6821      	ldrge	r1, [r4, #0]
 800452a:	60a6      	str	r6, [r4, #8]
 800452c:	bfa4      	itt	ge
 800452e:	f021 0104 	bicge.w	r1, r1, #4
 8004532:	6021      	strge	r1, [r4, #0]
 8004534:	b90d      	cbnz	r5, 800453a <_printf_i+0x112>
 8004536:	2e00      	cmp	r6, #0
 8004538:	d04b      	beq.n	80045d2 <_printf_i+0x1aa>
 800453a:	4616      	mov	r6, r2
 800453c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004540:	fb03 5711 	mls	r7, r3, r1, r5
 8004544:	5dc7      	ldrb	r7, [r0, r7]
 8004546:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800454a:	462f      	mov	r7, r5
 800454c:	42bb      	cmp	r3, r7
 800454e:	460d      	mov	r5, r1
 8004550:	d9f4      	bls.n	800453c <_printf_i+0x114>
 8004552:	2b08      	cmp	r3, #8
 8004554:	d10b      	bne.n	800456e <_printf_i+0x146>
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	07df      	lsls	r7, r3, #31
 800455a:	d508      	bpl.n	800456e <_printf_i+0x146>
 800455c:	6923      	ldr	r3, [r4, #16]
 800455e:	6861      	ldr	r1, [r4, #4]
 8004560:	4299      	cmp	r1, r3
 8004562:	bfde      	ittt	le
 8004564:	2330      	movle	r3, #48	@ 0x30
 8004566:	f806 3c01 	strble.w	r3, [r6, #-1]
 800456a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800456e:	1b92      	subs	r2, r2, r6
 8004570:	6122      	str	r2, [r4, #16]
 8004572:	464b      	mov	r3, r9
 8004574:	4621      	mov	r1, r4
 8004576:	4640      	mov	r0, r8
 8004578:	f8cd a000 	str.w	sl, [sp]
 800457c:	aa03      	add	r2, sp, #12
 800457e:	f7ff fee1 	bl	8004344 <_printf_common>
 8004582:	3001      	adds	r0, #1
 8004584:	d14a      	bne.n	800461c <_printf_i+0x1f4>
 8004586:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800458a:	b004      	add	sp, #16
 800458c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004590:	6823      	ldr	r3, [r4, #0]
 8004592:	f043 0320 	orr.w	r3, r3, #32
 8004596:	6023      	str	r3, [r4, #0]
 8004598:	2778      	movs	r7, #120	@ 0x78
 800459a:	4832      	ldr	r0, [pc, #200]	@ (8004664 <_printf_i+0x23c>)
 800459c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	6831      	ldr	r1, [r6, #0]
 80045a4:	061f      	lsls	r7, r3, #24
 80045a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80045aa:	d402      	bmi.n	80045b2 <_printf_i+0x18a>
 80045ac:	065f      	lsls	r7, r3, #25
 80045ae:	bf48      	it	mi
 80045b0:	b2ad      	uxthmi	r5, r5
 80045b2:	6031      	str	r1, [r6, #0]
 80045b4:	07d9      	lsls	r1, r3, #31
 80045b6:	bf44      	itt	mi
 80045b8:	f043 0320 	orrmi.w	r3, r3, #32
 80045bc:	6023      	strmi	r3, [r4, #0]
 80045be:	b11d      	cbz	r5, 80045c8 <_printf_i+0x1a0>
 80045c0:	2310      	movs	r3, #16
 80045c2:	e7ab      	b.n	800451c <_printf_i+0xf4>
 80045c4:	4826      	ldr	r0, [pc, #152]	@ (8004660 <_printf_i+0x238>)
 80045c6:	e7e9      	b.n	800459c <_printf_i+0x174>
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	f023 0320 	bic.w	r3, r3, #32
 80045ce:	6023      	str	r3, [r4, #0]
 80045d0:	e7f6      	b.n	80045c0 <_printf_i+0x198>
 80045d2:	4616      	mov	r6, r2
 80045d4:	e7bd      	b.n	8004552 <_printf_i+0x12a>
 80045d6:	6833      	ldr	r3, [r6, #0]
 80045d8:	6825      	ldr	r5, [r4, #0]
 80045da:	1d18      	adds	r0, r3, #4
 80045dc:	6961      	ldr	r1, [r4, #20]
 80045de:	6030      	str	r0, [r6, #0]
 80045e0:	062e      	lsls	r6, r5, #24
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	d501      	bpl.n	80045ea <_printf_i+0x1c2>
 80045e6:	6019      	str	r1, [r3, #0]
 80045e8:	e002      	b.n	80045f0 <_printf_i+0x1c8>
 80045ea:	0668      	lsls	r0, r5, #25
 80045ec:	d5fb      	bpl.n	80045e6 <_printf_i+0x1be>
 80045ee:	8019      	strh	r1, [r3, #0]
 80045f0:	2300      	movs	r3, #0
 80045f2:	4616      	mov	r6, r2
 80045f4:	6123      	str	r3, [r4, #16]
 80045f6:	e7bc      	b.n	8004572 <_printf_i+0x14a>
 80045f8:	6833      	ldr	r3, [r6, #0]
 80045fa:	2100      	movs	r1, #0
 80045fc:	1d1a      	adds	r2, r3, #4
 80045fe:	6032      	str	r2, [r6, #0]
 8004600:	681e      	ldr	r6, [r3, #0]
 8004602:	6862      	ldr	r2, [r4, #4]
 8004604:	4630      	mov	r0, r6
 8004606:	f000 f859 	bl	80046bc <memchr>
 800460a:	b108      	cbz	r0, 8004610 <_printf_i+0x1e8>
 800460c:	1b80      	subs	r0, r0, r6
 800460e:	6060      	str	r0, [r4, #4]
 8004610:	6863      	ldr	r3, [r4, #4]
 8004612:	6123      	str	r3, [r4, #16]
 8004614:	2300      	movs	r3, #0
 8004616:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800461a:	e7aa      	b.n	8004572 <_printf_i+0x14a>
 800461c:	4632      	mov	r2, r6
 800461e:	4649      	mov	r1, r9
 8004620:	4640      	mov	r0, r8
 8004622:	6923      	ldr	r3, [r4, #16]
 8004624:	47d0      	blx	sl
 8004626:	3001      	adds	r0, #1
 8004628:	d0ad      	beq.n	8004586 <_printf_i+0x15e>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	079b      	lsls	r3, r3, #30
 800462e:	d413      	bmi.n	8004658 <_printf_i+0x230>
 8004630:	68e0      	ldr	r0, [r4, #12]
 8004632:	9b03      	ldr	r3, [sp, #12]
 8004634:	4298      	cmp	r0, r3
 8004636:	bfb8      	it	lt
 8004638:	4618      	movlt	r0, r3
 800463a:	e7a6      	b.n	800458a <_printf_i+0x162>
 800463c:	2301      	movs	r3, #1
 800463e:	4632      	mov	r2, r6
 8004640:	4649      	mov	r1, r9
 8004642:	4640      	mov	r0, r8
 8004644:	47d0      	blx	sl
 8004646:	3001      	adds	r0, #1
 8004648:	d09d      	beq.n	8004586 <_printf_i+0x15e>
 800464a:	3501      	adds	r5, #1
 800464c:	68e3      	ldr	r3, [r4, #12]
 800464e:	9903      	ldr	r1, [sp, #12]
 8004650:	1a5b      	subs	r3, r3, r1
 8004652:	42ab      	cmp	r3, r5
 8004654:	dcf2      	bgt.n	800463c <_printf_i+0x214>
 8004656:	e7eb      	b.n	8004630 <_printf_i+0x208>
 8004658:	2500      	movs	r5, #0
 800465a:	f104 0619 	add.w	r6, r4, #25
 800465e:	e7f5      	b.n	800464c <_printf_i+0x224>
 8004660:	08004953 	.word	0x08004953
 8004664:	08004964 	.word	0x08004964

08004668 <memmove>:
 8004668:	4288      	cmp	r0, r1
 800466a:	b510      	push	{r4, lr}
 800466c:	eb01 0402 	add.w	r4, r1, r2
 8004670:	d902      	bls.n	8004678 <memmove+0x10>
 8004672:	4284      	cmp	r4, r0
 8004674:	4623      	mov	r3, r4
 8004676:	d807      	bhi.n	8004688 <memmove+0x20>
 8004678:	1e43      	subs	r3, r0, #1
 800467a:	42a1      	cmp	r1, r4
 800467c:	d008      	beq.n	8004690 <memmove+0x28>
 800467e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004682:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004686:	e7f8      	b.n	800467a <memmove+0x12>
 8004688:	4601      	mov	r1, r0
 800468a:	4402      	add	r2, r0
 800468c:	428a      	cmp	r2, r1
 800468e:	d100      	bne.n	8004692 <memmove+0x2a>
 8004690:	bd10      	pop	{r4, pc}
 8004692:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004696:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800469a:	e7f7      	b.n	800468c <memmove+0x24>

0800469c <_sbrk_r>:
 800469c:	b538      	push	{r3, r4, r5, lr}
 800469e:	2300      	movs	r3, #0
 80046a0:	4d05      	ldr	r5, [pc, #20]	@ (80046b8 <_sbrk_r+0x1c>)
 80046a2:	4604      	mov	r4, r0
 80046a4:	4608      	mov	r0, r1
 80046a6:	602b      	str	r3, [r5, #0]
 80046a8:	f7fc f944 	bl	8000934 <_sbrk>
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	d102      	bne.n	80046b6 <_sbrk_r+0x1a>
 80046b0:	682b      	ldr	r3, [r5, #0]
 80046b2:	b103      	cbz	r3, 80046b6 <_sbrk_r+0x1a>
 80046b4:	6023      	str	r3, [r4, #0]
 80046b6:	bd38      	pop	{r3, r4, r5, pc}
 80046b8:	20000290 	.word	0x20000290

080046bc <memchr>:
 80046bc:	4603      	mov	r3, r0
 80046be:	b510      	push	{r4, lr}
 80046c0:	b2c9      	uxtb	r1, r1
 80046c2:	4402      	add	r2, r0
 80046c4:	4293      	cmp	r3, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	d101      	bne.n	80046ce <memchr+0x12>
 80046ca:	2000      	movs	r0, #0
 80046cc:	e003      	b.n	80046d6 <memchr+0x1a>
 80046ce:	7804      	ldrb	r4, [r0, #0]
 80046d0:	3301      	adds	r3, #1
 80046d2:	428c      	cmp	r4, r1
 80046d4:	d1f6      	bne.n	80046c4 <memchr+0x8>
 80046d6:	bd10      	pop	{r4, pc}

080046d8 <memcpy>:
 80046d8:	440a      	add	r2, r1
 80046da:	4291      	cmp	r1, r2
 80046dc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80046e0:	d100      	bne.n	80046e4 <memcpy+0xc>
 80046e2:	4770      	bx	lr
 80046e4:	b510      	push	{r4, lr}
 80046e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046ea:	4291      	cmp	r1, r2
 80046ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046f0:	d1f9      	bne.n	80046e6 <memcpy+0xe>
 80046f2:	bd10      	pop	{r4, pc}

080046f4 <_realloc_r>:
 80046f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f8:	4680      	mov	r8, r0
 80046fa:	4615      	mov	r5, r2
 80046fc:	460c      	mov	r4, r1
 80046fe:	b921      	cbnz	r1, 800470a <_realloc_r+0x16>
 8004700:	4611      	mov	r1, r2
 8004702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004706:	f7ff bc39 	b.w	8003f7c <_malloc_r>
 800470a:	b92a      	cbnz	r2, 8004718 <_realloc_r+0x24>
 800470c:	f7ff fbcc 	bl	8003ea8 <_free_r>
 8004710:	2400      	movs	r4, #0
 8004712:	4620      	mov	r0, r4
 8004714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004718:	f000 f81a 	bl	8004750 <_malloc_usable_size_r>
 800471c:	4285      	cmp	r5, r0
 800471e:	4606      	mov	r6, r0
 8004720:	d802      	bhi.n	8004728 <_realloc_r+0x34>
 8004722:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004726:	d8f4      	bhi.n	8004712 <_realloc_r+0x1e>
 8004728:	4629      	mov	r1, r5
 800472a:	4640      	mov	r0, r8
 800472c:	f7ff fc26 	bl	8003f7c <_malloc_r>
 8004730:	4607      	mov	r7, r0
 8004732:	2800      	cmp	r0, #0
 8004734:	d0ec      	beq.n	8004710 <_realloc_r+0x1c>
 8004736:	42b5      	cmp	r5, r6
 8004738:	462a      	mov	r2, r5
 800473a:	4621      	mov	r1, r4
 800473c:	bf28      	it	cs
 800473e:	4632      	movcs	r2, r6
 8004740:	f7ff ffca 	bl	80046d8 <memcpy>
 8004744:	4621      	mov	r1, r4
 8004746:	4640      	mov	r0, r8
 8004748:	f7ff fbae 	bl	8003ea8 <_free_r>
 800474c:	463c      	mov	r4, r7
 800474e:	e7e0      	b.n	8004712 <_realloc_r+0x1e>

08004750 <_malloc_usable_size_r>:
 8004750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004754:	1f18      	subs	r0, r3, #4
 8004756:	2b00      	cmp	r3, #0
 8004758:	bfbc      	itt	lt
 800475a:	580b      	ldrlt	r3, [r1, r0]
 800475c:	18c0      	addlt	r0, r0, r3
 800475e:	4770      	bx	lr

08004760 <_init>:
 8004760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004762:	bf00      	nop
 8004764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004766:	bc08      	pop	{r3}
 8004768:	469e      	mov	lr, r3
 800476a:	4770      	bx	lr

0800476c <_fini>:
 800476c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476e:	bf00      	nop
 8004770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004772:	bc08      	pop	{r3}
 8004774:	469e      	mov	lr, r3
 8004776:	4770      	bx	lr
