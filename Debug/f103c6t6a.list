
f103c6t6a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004834  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08004940  08004940  00005940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b08  08004b08  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b08  08004b08  00005b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b10  08004b10  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b10  08004b10  00005b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b14  08004b14  00005b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004b18  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000005c  08004b74  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08004b74  000062a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b76b  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a90  00000000  00000000  000117f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  00013280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000935  00000000  00000000  00013e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174bf  00000000  00000000  0001475d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddee  00000000  00000000  0002bc1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000880be  00000000  00000000  00039a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1ac8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035b8  00000000  00000000  000c1b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c50c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004928 	.word	0x08004928

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004928 	.word	0x08004928

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fc95 	bl	8000a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f8dd 	bl	8000324 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 fa21 	bl	80005b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800016e:	f000 f915 	bl	800039c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000172:	f000 f99f 	bl	80004b4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000176:	f000 f9f1 	bl	800055c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800017a:	2104      	movs	r1, #4
 800017c:	4867      	ldr	r0, [pc, #412]	@ (800031c <main+0x1c0>)
 800017e:	f001 ffb1 	bl	80020e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000182:	2108      	movs	r1, #8
 8000184:	4865      	ldr	r0, [pc, #404]	@ (800031c <main+0x1c0>)
 8000186:	f001 ffad 	bl	80020e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800018a:	210c      	movs	r1, #12
 800018c:	4863      	ldr	r0, [pc, #396]	@ (800031c <main+0x1c0>)
 800018e:	f001 ffa9 	bl	80020e4 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8000192:	2100      	movs	r1, #0
 8000194:	4862      	ldr	r0, [pc, #392]	@ (8000320 <main+0x1c4>)
 8000196:	f002 fa09 	bl	80025ac <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 800019a:	2104      	movs	r1, #4
 800019c:	4860      	ldr	r0, [pc, #384]	@ (8000320 <main+0x1c4>)
 800019e:	f002 fa05 	bl	80025ac <HAL_TIM_Encoder_Start>
  __HAL_TIM_SET_COUNTER(&htim3, 5);
 80001a2:	4b5f      	ldr	r3, [pc, #380]	@ (8000320 <main+0x1c4>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	2205      	movs	r2, #5
 80001a8:	625a      	str	r2, [r3, #36]	@ 0x24

  uint32_t previousTime = 0;
 80001aa:	2300      	movs	r3, #0
 80001ac:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int previousCount = 0;  // Предыдущее значение счётчика
 80001ae:	2300      	movs	r3, #0
 80001b0:	60bb      	str	r3, [r7, #8]
  while (1)
  {

	    // Получаем текущее значение счётчика энкодера
	    int encoderCount = __HAL_TIM_GET_COUNTER(&htim3);
 80001b2:	4b5b      	ldr	r3, [pc, #364]	@ (8000320 <main+0x1c4>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80001b8:	607b      	str	r3, [r7, #4]

	    // Проверяем переход с 0 на диапазон от 290 до 300
	    if ((previousCount == 0 || previousCount < 4) && encoderCount >= 290 && encoderCount <= 300) {
 80001ba:	68bb      	ldr	r3, [r7, #8]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d002      	beq.n	80001c6 <main+0x6a>
 80001c0:	68bb      	ldr	r3, [r7, #8]
 80001c2:	2b03      	cmp	r3, #3
 80001c4:	dc41      	bgt.n	800024a <main+0xee>
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 80001cc:	db3d      	blt.n	800024a <main+0xee>
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80001d4:	dc39      	bgt.n	800024a <main+0xee>
	        encoderCount = 5;
 80001d6:	2305      	movs	r3, #5
 80001d8:	607b      	str	r3, [r7, #4]
	        HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_1);
 80001da:	2100      	movs	r1, #0
 80001dc:	4850      	ldr	r0, [pc, #320]	@ (8000320 <main+0x1c4>)
 80001de:	f002 fa8d 	bl	80026fc <HAL_TIM_Encoder_Stop>
	        HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_2);
 80001e2:	2104      	movs	r1, #4
 80001e4:	484e      	ldr	r0, [pc, #312]	@ (8000320 <main+0x1c4>)
 80001e6:	f002 fa89 	bl	80026fc <HAL_TIM_Encoder_Stop>
	        __HAL_TIM_SET_COUNTER(&htim3, 5);
 80001ea:	4b4d      	ldr	r3, [pc, #308]	@ (8000320 <main+0x1c4>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	2205      	movs	r2, #5
 80001f0:	625a      	str	r2, [r3, #36]	@ 0x24
	        Set_color(5,5,5);
 80001f2:	2205      	movs	r2, #5
 80001f4:	2105      	movs	r1, #5
 80001f6:	2005      	movs	r0, #5
 80001f8:	f000 fa42 	bl	8000680 <Set_color>
	        HAL_Delay(300);
 80001fc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000200:	f000 fca8 	bl	8000b54 <HAL_Delay>
	        Set_color(0,0,0);
 8000204:	2200      	movs	r2, #0
 8000206:	2100      	movs	r1, #0
 8000208:	2000      	movs	r0, #0
 800020a:	f000 fa39 	bl	8000680 <Set_color>
	        HAL_Delay(300);
 800020e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000212:	f000 fc9f 	bl	8000b54 <HAL_Delay>
	        Set_color(5,5,5);
 8000216:	2205      	movs	r2, #5
 8000218:	2105      	movs	r1, #5
 800021a:	2005      	movs	r0, #5
 800021c:	f000 fa30 	bl	8000680 <Set_color>
	        HAL_Delay(300);
 8000220:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000224:	f000 fc96 	bl	8000b54 <HAL_Delay>
	        Set_color(0,0,0);
 8000228:	2200      	movs	r2, #0
 800022a:	2100      	movs	r1, #0
 800022c:	2000      	movs	r0, #0
 800022e:	f000 fa27 	bl	8000680 <Set_color>
	        HAL_Delay(300);
 8000232:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000236:	f000 fc8d 	bl	8000b54 <HAL_Delay>
	        HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 800023a:	2100      	movs	r1, #0
 800023c:	4838      	ldr	r0, [pc, #224]	@ (8000320 <main+0x1c4>)
 800023e:	f002 f9b5 	bl	80025ac <HAL_TIM_Encoder_Start>
	        HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8000242:	2104      	movs	r1, #4
 8000244:	4836      	ldr	r0, [pc, #216]	@ (8000320 <main+0x1c4>)
 8000246:	f002 f9b1 	bl	80025ac <HAL_TIM_Encoder_Start>


	    }

	    // Проверяем переход с 300 на диапазон от 0 до 10
	    if (previousCount == 300 && encoderCount <= 10) {
 800024a:	68bb      	ldr	r3, [r7, #8]
 800024c:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000250:	d14c      	bne.n	80002ec <main+0x190>
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2b0a      	cmp	r3, #10
 8000256:	dc49      	bgt.n	80002ec <main+0x190>
	        encoderCount = 300;  // Устанавливаем значение на 300
 8000258:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800025c:	607b      	str	r3, [r7, #4]
	        HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_1);
 800025e:	2100      	movs	r1, #0
 8000260:	482f      	ldr	r0, [pc, #188]	@ (8000320 <main+0x1c4>)
 8000262:	f002 fa4b 	bl	80026fc <HAL_TIM_Encoder_Stop>
	        HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_2);
 8000266:	2104      	movs	r1, #4
 8000268:	482d      	ldr	r0, [pc, #180]	@ (8000320 <main+0x1c4>)
 800026a:	f002 fa47 	bl	80026fc <HAL_TIM_Encoder_Stop>
	        __HAL_TIM_SET_COUNTER(&htim3, encoderCount);
 800026e:	4b2c      	ldr	r3, [pc, #176]	@ (8000320 <main+0x1c4>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	687a      	ldr	r2, [r7, #4]
 8000274:	625a      	str	r2, [r3, #36]	@ 0x24
	        Set_color(0,0,0);
 8000276:	2200      	movs	r2, #0
 8000278:	2100      	movs	r1, #0
 800027a:	2000      	movs	r0, #0
 800027c:	f000 fa00 	bl	8000680 <Set_color>
	        HAL_Delay(300);
 8000280:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000284:	f000 fc66 	bl	8000b54 <HAL_Delay>
	        Set_color(300,300,300);
 8000288:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800028c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000290:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000294:	f000 f9f4 	bl	8000680 <Set_color>
	        HAL_Delay(300);
 8000298:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800029c:	f000 fc5a 	bl	8000b54 <HAL_Delay>
	        Set_color(0,0,0);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2100      	movs	r1, #0
 80002a4:	2000      	movs	r0, #0
 80002a6:	f000 f9eb 	bl	8000680 <Set_color>
	        HAL_Delay(300);
 80002aa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80002ae:	f000 fc51 	bl	8000b54 <HAL_Delay>
	        Set_color(300,300,300);
 80002b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80002b6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80002ba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80002be:	f000 f9df 	bl	8000680 <Set_color>
	        HAL_Delay(300);
 80002c2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80002c6:	f000 fc45 	bl	8000b54 <HAL_Delay>
	        Set_color(0,0,0);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2100      	movs	r1, #0
 80002ce:	2000      	movs	r0, #0
 80002d0:	f000 f9d6 	bl	8000680 <Set_color>
	        HAL_Delay(300);
 80002d4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80002d8:	f000 fc3c 	bl	8000b54 <HAL_Delay>
	        HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80002dc:	2100      	movs	r1, #0
 80002de:	4810      	ldr	r0, [pc, #64]	@ (8000320 <main+0x1c4>)
 80002e0:	f002 f964 	bl	80025ac <HAL_TIM_Encoder_Start>
	        HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 80002e4:	2104      	movs	r1, #4
 80002e6:	480e      	ldr	r0, [pc, #56]	@ (8000320 <main+0x1c4>)
 80002e8:	f002 f960 	bl	80025ac <HAL_TIM_Encoder_Start>
	    }

      Set_color(encoderCount,encoderCount,encoderCount);
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	6879      	ldr	r1, [r7, #4]
 80002f0:	6878      	ldr	r0, [r7, #4]
 80002f2:	f000 f9c5 	bl	8000680 <Set_color>
      previousCount = encoderCount;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	60bb      	str	r3, [r7, #8]
	  if (HAL_GetTick() - previousTime >= 1000)
 80002fa:	f000 fc21 	bl	8000b40 <HAL_GetTick>
 80002fe:	4602      	mov	r2, r0
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	1ad3      	subs	r3, r2, r3
 8000304:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000308:	f4ff af53 	bcc.w	80001b2 <main+0x56>

      {
    	  previousTime = HAL_GetTick();  // Обновляем время
 800030c:	f000 fc18 	bl	8000b40 <HAL_GetTick>
 8000310:	60f8      	str	r0, [r7, #12]
          UART_SendText(encoderCount); // Отправка текста
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f000 f9ce 	bl	80006b4 <UART_SendText>
  {
 8000318:	e74b      	b.n	80001b2 <main+0x56>
 800031a:	bf00      	nop
 800031c:	20000078 	.word	0x20000078
 8000320:	200000c0 	.word	0x200000c0

08000324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b090      	sub	sp, #64	@ 0x40
 8000328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800032a:	f107 0318 	add.w	r3, r7, #24
 800032e:	2228      	movs	r2, #40	@ 0x28
 8000330:	2100      	movs	r1, #0
 8000332:	4618      	mov	r0, r3
 8000334:	f003 fe68 	bl	8004008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	605a      	str	r2, [r3, #4]
 8000340:	609a      	str	r2, [r3, #8]
 8000342:	60da      	str	r2, [r3, #12]
 8000344:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000346:	2302      	movs	r3, #2
 8000348:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034a:	2301      	movs	r3, #1
 800034c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800034e:	2310      	movs	r3, #16
 8000350:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000352:	2300      	movs	r3, #0
 8000354:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000356:	f107 0318 	add.w	r3, r7, #24
 800035a:	4618      	mov	r0, r3
 800035c:	f000 ffb6 	bl	80012cc <HAL_RCC_OscConfig>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000366:	f000 f9c9 	bl	80006fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800036a:	230f      	movs	r3, #15
 800036c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800036e:	2300      	movs	r3, #0
 8000370:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000372:	2300      	movs	r3, #0
 8000374:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f001 fb10 	bl	80019a8 <HAL_RCC_ClockConfig>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800038e:	f000 f9b5 	bl	80006fc <Error_Handler>
  }
}
 8000392:	bf00      	nop
 8000394:	3740      	adds	r7, #64	@ 0x40
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
	...

0800039c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b08e      	sub	sp, #56	@ 0x38
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80003a6:	2200      	movs	r2, #0
 80003a8:	601a      	str	r2, [r3, #0]
 80003aa:	605a      	str	r2, [r3, #4]
 80003ac:	609a      	str	r2, [r3, #8]
 80003ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003b0:	f107 0320 	add.w	r3, r7, #32
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
 80003c8:	615a      	str	r2, [r3, #20]
 80003ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003cc:	4b38      	ldr	r3, [pc, #224]	@ (80004b0 <MX_TIM2_Init+0x114>)
 80003ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 80003d4:	4b36      	ldr	r3, [pc, #216]	@ (80004b0 <MX_TIM2_Init+0x114>)
 80003d6:	220e      	movs	r2, #14
 80003d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003da:	4b35      	ldr	r3, [pc, #212]	@ (80004b0 <MX_TIM2_Init+0x114>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 300;
 80003e0:	4b33      	ldr	r3, [pc, #204]	@ (80004b0 <MX_TIM2_Init+0x114>)
 80003e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80003e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e8:	4b31      	ldr	r3, [pc, #196]	@ (80004b0 <MX_TIM2_Init+0x114>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003ee:	4b30      	ldr	r3, [pc, #192]	@ (80004b0 <MX_TIM2_Init+0x114>)
 80003f0:	2280      	movs	r2, #128	@ 0x80
 80003f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003f4:	482e      	ldr	r0, [pc, #184]	@ (80004b0 <MX_TIM2_Init+0x114>)
 80003f6:	f001 fd0b 	bl	8001e10 <HAL_TIM_Base_Init>
 80003fa:	4603      	mov	r3, r0
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d001      	beq.n	8000404 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000400:	f000 f97c 	bl	80006fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000404:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000408:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800040a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800040e:	4619      	mov	r1, r3
 8000410:	4827      	ldr	r0, [pc, #156]	@ (80004b0 <MX_TIM2_Init+0x114>)
 8000412:	f002 fc69 	bl	8002ce8 <HAL_TIM_ConfigClockSource>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800041c:	f000 f96e 	bl	80006fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000420:	4823      	ldr	r0, [pc, #140]	@ (80004b0 <MX_TIM2_Init+0x114>)
 8000422:	f001 fda5 	bl	8001f70 <HAL_TIM_PWM_Init>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800042c:	f000 f966 	bl	80006fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000430:	2300      	movs	r3, #0
 8000432:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000434:	2300      	movs	r3, #0
 8000436:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000438:	f107 0320 	add.w	r3, r7, #32
 800043c:	4619      	mov	r1, r3
 800043e:	481c      	ldr	r0, [pc, #112]	@ (80004b0 <MX_TIM2_Init+0x114>)
 8000440:	f003 fa5e 	bl	8003900 <HAL_TIMEx_MasterConfigSynchronization>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800044a:	f000 f957 	bl	80006fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800044e:	2360      	movs	r3, #96	@ 0x60
 8000450:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 150;
 8000452:	2396      	movs	r3, #150	@ 0x96
 8000454:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000456:	2302      	movs	r3, #2
 8000458:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2204      	movs	r2, #4
 8000462:	4619      	mov	r1, r3
 8000464:	4812      	ldr	r0, [pc, #72]	@ (80004b0 <MX_TIM2_Init+0x114>)
 8000466:	f002 faeb 	bl	8002a40 <HAL_TIM_PWM_ConfigChannel>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000470:	f000 f944 	bl	80006fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2208      	movs	r2, #8
 8000478:	4619      	mov	r1, r3
 800047a:	480d      	ldr	r0, [pc, #52]	@ (80004b0 <MX_TIM2_Init+0x114>)
 800047c:	f002 fae0 	bl	8002a40 <HAL_TIM_PWM_ConfigChannel>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000486:	f000 f939 	bl	80006fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	220c      	movs	r2, #12
 800048e:	4619      	mov	r1, r3
 8000490:	4807      	ldr	r0, [pc, #28]	@ (80004b0 <MX_TIM2_Init+0x114>)
 8000492:	f002 fad5 	bl	8002a40 <HAL_TIM_PWM_ConfigChannel>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 800049c:	f000 f92e 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80004a0:	4803      	ldr	r0, [pc, #12]	@ (80004b0 <MX_TIM2_Init+0x114>)
 80004a2:	f000 f9d7 	bl	8000854 <HAL_TIM_MspPostInit>

}
 80004a6:	bf00      	nop
 80004a8:	3738      	adds	r7, #56	@ 0x38
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000078 	.word	0x20000078

080004b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08c      	sub	sp, #48	@ 0x30
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004ba:	f107 030c 	add.w	r3, r7, #12
 80004be:	2224      	movs	r2, #36	@ 0x24
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f003 fda0 	bl	8004008 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004d0:	4b20      	ldr	r3, [pc, #128]	@ (8000554 <MX_TIM3_Init+0xa0>)
 80004d2:	4a21      	ldr	r2, [pc, #132]	@ (8000558 <MX_TIM3_Init+0xa4>)
 80004d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000554 <MX_TIM3_Init+0xa0>)
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000554 <MX_TIM3_Init+0xa0>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 300;
 80004e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000554 <MX_TIM3_Init+0xa0>)
 80004e4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80004e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000554 <MX_TIM3_Init+0xa0>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f0:	4b18      	ldr	r3, [pc, #96]	@ (8000554 <MX_TIM3_Init+0xa0>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80004f6:	2303      	movs	r3, #3
 80004f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004fa:	2300      	movs	r3, #0
 80004fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004fe:	2301      	movs	r3, #1
 8000500:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 1;
 8000506:	2301      	movs	r3, #1
 8000508:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800050a:	2300      	movs	r3, #0
 800050c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800050e:	2301      	movs	r3, #1
 8000510:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 1;
 8000516:	2301      	movs	r3, #1
 8000518:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800051a:	f107 030c 	add.w	r3, r7, #12
 800051e:	4619      	mov	r1, r3
 8000520:	480c      	ldr	r0, [pc, #48]	@ (8000554 <MX_TIM3_Init+0xa0>)
 8000522:	f001 feb5 	bl	8002290 <HAL_TIM_Encoder_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800052c:	f000 f8e6 	bl	80006fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000534:	2300      	movs	r3, #0
 8000536:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	4619      	mov	r1, r3
 800053c:	4805      	ldr	r0, [pc, #20]	@ (8000554 <MX_TIM3_Init+0xa0>)
 800053e:	f003 f9df 	bl	8003900 <HAL_TIMEx_MasterConfigSynchronization>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000548:	f000 f8d8 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800054c:	bf00      	nop
 800054e:	3730      	adds	r7, #48	@ 0x30
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	200000c0 	.word	0x200000c0
 8000558:	40000400 	.word	0x40000400

0800055c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000560:	4b11      	ldr	r3, [pc, #68]	@ (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000562:	4a12      	ldr	r2, [pc, #72]	@ (80005ac <MX_USART1_UART_Init+0x50>)
 8000564:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000568:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800056c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800056e:	4b0e      	ldr	r3, [pc, #56]	@ (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000574:	4b0c      	ldr	r3, [pc, #48]	@ (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800057a:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <MX_USART1_UART_Init+0x4c>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000580:	4b09      	ldr	r3, [pc, #36]	@ (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000582:	220c      	movs	r2, #12
 8000584:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000586:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800058c:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <MX_USART1_UART_Init+0x4c>)
 800058e:	2200      	movs	r2, #0
 8000590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000592:	4805      	ldr	r0, [pc, #20]	@ (80005a8 <MX_USART1_UART_Init+0x4c>)
 8000594:	f003 fa64 	bl	8003a60 <HAL_UART_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800059e:	f000 f8ad 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000108 	.word	0x20000108
 80005ac:	40013800 	.word	0x40013800

080005b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000670 <MX_GPIO_Init+0xc0>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a29      	ldr	r2, [pc, #164]	@ (8000670 <MX_GPIO_Init+0xc0>)
 80005ca:	f043 0310 	orr.w	r3, r3, #16
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b27      	ldr	r3, [pc, #156]	@ (8000670 <MX_GPIO_Init+0xc0>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0310 	and.w	r3, r3, #16
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005dc:	4b24      	ldr	r3, [pc, #144]	@ (8000670 <MX_GPIO_Init+0xc0>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a23      	ldr	r2, [pc, #140]	@ (8000670 <MX_GPIO_Init+0xc0>)
 80005e2:	f043 0320 	orr.w	r3, r3, #32
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b21      	ldr	r3, [pc, #132]	@ (8000670 <MX_GPIO_Init+0xc0>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0320 	and.w	r3, r3, #32
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000670 <MX_GPIO_Init+0xc0>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000670 <MX_GPIO_Init+0xc0>)
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b1b      	ldr	r3, [pc, #108]	@ (8000670 <MX_GPIO_Init+0xc0>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0304 	and.w	r3, r3, #4
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b18      	ldr	r3, [pc, #96]	@ (8000670 <MX_GPIO_Init+0xc0>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a17      	ldr	r2, [pc, #92]	@ (8000670 <MX_GPIO_Init+0xc0>)
 8000612:	f043 0308 	orr.w	r3, r3, #8
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <MX_GPIO_Init+0xc0>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0308 	and.w	r3, r3, #8
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000624:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800062a:	2303      	movs	r3, #3
 800062c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	4619      	mov	r1, r3
 8000634:	480f      	ldr	r0, [pc, #60]	@ (8000674 <MX_GPIO_Init+0xc4>)
 8000636:	f000 fbed 	bl	8000e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA8 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_11
 800063a:	f649 1330 	movw	r3, #39216	@ 0x9930
 800063e:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000640:	2303      	movs	r3, #3
 8000642:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	4619      	mov	r1, r3
 800064a:	480b      	ldr	r0, [pc, #44]	@ (8000678 <MX_GPIO_Init+0xc8>)
 800064c:	f000 fbe2 	bl	8000e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000650:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000654:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000656:	2303      	movs	r3, #3
 8000658:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	4619      	mov	r1, r3
 8000660:	4806      	ldr	r0, [pc, #24]	@ (800067c <MX_GPIO_Init+0xcc>)
 8000662:	f000 fbd7 	bl	8000e14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000666:	bf00      	nop
 8000668:	3720      	adds	r7, #32
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40021000 	.word	0x40021000
 8000674:	40011000 	.word	0x40011000
 8000678:	40010800 	.word	0x40010800
 800067c:	40010c00 	.word	0x40010c00

08000680 <Set_color>:

/* USER CODE BEGIN 4 */
void Set_color(int blu,int gre, int red)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, blu);
 800068c:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <Set_color+0x30>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	639a      	str	r2, [r3, #56]	@ 0x38
 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, red);
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <Set_color+0x30>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	63da      	str	r2, [r3, #60]	@ 0x3c
 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, gre);
 800069c:	4b04      	ldr	r3, [pc, #16]	@ (80006b0 <Set_color+0x30>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	68ba      	ldr	r2, [r7, #8]
 80006a2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	20000078 	.word	0x20000078

080006b4 <UART_SendText>:

void UART_SendText(int number)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b09c      	sub	sp, #112	@ 0x70
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
    // Буфер для строки + \r\n (дополнительные 2 символа)
    char buffer[100];

    // Копируем текст в буфер и добавляем \r\n
//    snprintf(buffer, sizeof(buffer), "%s\r\n", text);
    sprintf(buffer, "%d\r\n", number);  // Преобразует число в строку
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	490c      	ldr	r1, [pc, #48]	@ (80006f4 <UART_SendText+0x40>)
 80006c4:	4618      	mov	r0, r3
 80006c6:	f003 fc7f 	bl	8003fc8 <siprintf>
    // Определяем длину строки с \r\n
    uint16_t length = strlen(buffer);
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fd3c 	bl	800014c <strlen>
 80006d4:	4603      	mov	r3, r0
 80006d6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

    // Отправляем строку через UART
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, length, HAL_MAX_DELAY);
 80006da:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80006de:	f107 0108 	add.w	r1, r7, #8
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006e6:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <UART_SendText+0x44>)
 80006e8:	f003 fa5a 	bl	8003ba0 <HAL_UART_Transmit>
}
 80006ec:	bf00      	nop
 80006ee:	3770      	adds	r7, #112	@ 0x70
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	08004940 	.word	0x08004940
 80006f8:	20000108 	.word	0x20000108

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <Error_Handler+0x8>

08000708 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000722:	4b15      	ldr	r3, [pc, #84]	@ (8000778 <HAL_MspInit+0x5c>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	4a14      	ldr	r2, [pc, #80]	@ (8000778 <HAL_MspInit+0x5c>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6193      	str	r3, [r2, #24]
 800072e:	4b12      	ldr	r3, [pc, #72]	@ (8000778 <HAL_MspInit+0x5c>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <HAL_MspInit+0x5c>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	4a0e      	ldr	r2, [pc, #56]	@ (8000778 <HAL_MspInit+0x5c>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000744:	61d3      	str	r3, [r2, #28]
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <HAL_MspInit+0x5c>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000752:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <HAL_MspInit+0x60>)
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	4a04      	ldr	r2, [pc, #16]	@ (800077c <HAL_MspInit+0x60>)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	40021000 	.word	0x40021000
 800077c:	40010000 	.word	0x40010000

08000780 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000790:	d113      	bne.n	80007ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000792:	4b0c      	ldr	r3, [pc, #48]	@ (80007c4 <HAL_TIM_Base_MspInit+0x44>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	4a0b      	ldr	r2, [pc, #44]	@ (80007c4 <HAL_TIM_Base_MspInit+0x44>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	61d3      	str	r3, [r2, #28]
 800079e:	4b09      	ldr	r3, [pc, #36]	@ (80007c4 <HAL_TIM_Base_MspInit+0x44>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	201c      	movs	r0, #28
 80007b0:	f000 fae0 	bl	8000d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007b4:	201c      	movs	r0, #28
 80007b6:	f000 fb09 	bl	8000dcc <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000

080007c8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a19      	ldr	r2, [pc, #100]	@ (8000848 <HAL_TIM_Encoder_MspInit+0x80>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d12b      	bne.n	8000840 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007e8:	4b18      	ldr	r3, [pc, #96]	@ (800084c <HAL_TIM_Encoder_MspInit+0x84>)
 80007ea:	69db      	ldr	r3, [r3, #28]
 80007ec:	4a17      	ldr	r2, [pc, #92]	@ (800084c <HAL_TIM_Encoder_MspInit+0x84>)
 80007ee:	f043 0302 	orr.w	r3, r3, #2
 80007f2:	61d3      	str	r3, [r2, #28]
 80007f4:	4b15      	ldr	r3, [pc, #84]	@ (800084c <HAL_TIM_Encoder_MspInit+0x84>)
 80007f6:	69db      	ldr	r3, [r3, #28]
 80007f8:	f003 0302 	and.w	r3, r3, #2
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000800:	4b12      	ldr	r3, [pc, #72]	@ (800084c <HAL_TIM_Encoder_MspInit+0x84>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a11      	ldr	r2, [pc, #68]	@ (800084c <HAL_TIM_Encoder_MspInit+0x84>)
 8000806:	f043 0304 	orr.w	r3, r3, #4
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <HAL_TIM_Encoder_MspInit+0x84>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0304 	and.w	r3, r3, #4
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000818:	23c0      	movs	r3, #192	@ 0xc0
 800081a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4619      	mov	r1, r3
 800082a:	4809      	ldr	r0, [pc, #36]	@ (8000850 <HAL_TIM_Encoder_MspInit+0x88>)
 800082c:	f000 faf2 	bl	8000e14 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000830:	2200      	movs	r2, #0
 8000832:	2100      	movs	r1, #0
 8000834:	201d      	movs	r0, #29
 8000836:	f000 fa9d 	bl	8000d74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800083a:	201d      	movs	r0, #29
 800083c:	f000 fac6 	bl	8000dcc <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40000400 	.word	0x40000400
 800084c:	40021000 	.word	0x40021000
 8000850:	40010800 	.word	0x40010800

08000854 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000872:	d117      	bne.n	80008a4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <HAL_TIM_MspPostInit+0x58>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a0c      	ldr	r2, [pc, #48]	@ (80008ac <HAL_TIM_MspPostInit+0x58>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <HAL_TIM_MspPostInit+0x58>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = blu_pwm_Pin|red_pwm_Pin|gre_pwn_Pin;
 800088c:	230e      	movs	r3, #14
 800088e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000890:	2302      	movs	r3, #2
 8000892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2302      	movs	r3, #2
 8000896:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4619      	mov	r1, r3
 800089e:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <HAL_TIM_MspPostInit+0x5c>)
 80008a0:	f000 fab8 	bl	8000e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80008a4:	bf00      	nop
 80008a6:	3720      	adds	r7, #32
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010800 	.word	0x40010800

080008b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000940 <HAL_UART_MspInit+0x8c>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d131      	bne.n	8000938 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000944 <HAL_UART_MspInit+0x90>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a1a      	ldr	r2, [pc, #104]	@ (8000944 <HAL_UART_MspInit+0x90>)
 80008da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <HAL_UART_MspInit+0x90>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <HAL_UART_MspInit+0x90>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a14      	ldr	r2, [pc, #80]	@ (8000944 <HAL_UART_MspInit+0x90>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <HAL_UART_MspInit+0x90>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000904:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000908:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090e:	2303      	movs	r3, #3
 8000910:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 0310 	add.w	r3, r7, #16
 8000916:	4619      	mov	r1, r3
 8000918:	480b      	ldr	r0, [pc, #44]	@ (8000948 <HAL_UART_MspInit+0x94>)
 800091a:	f000 fa7b 	bl	8000e14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800091e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	4619      	mov	r1, r3
 8000932:	4805      	ldr	r0, [pc, #20]	@ (8000948 <HAL_UART_MspInit+0x94>)
 8000934:	f000 fa6e 	bl	8000e14 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000938:	bf00      	nop
 800093a:	3720      	adds	r7, #32
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40013800 	.word	0x40013800
 8000944:	40021000 	.word	0x40021000
 8000948:	40010800 	.word	0x40010800

0800094c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <NMI_Handler+0x4>

08000954 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <MemManage_Handler+0x4>

08000964 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <BusFault_Handler+0x4>

0800096c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <UsageFault_Handler+0x4>

08000974 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099c:	f000 f8be 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009a8:	4802      	ldr	r0, [pc, #8]	@ (80009b4 <TIM2_IRQHandler+0x10>)
 80009aa:	f001 ff59 	bl	8002860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000078 	.word	0x20000078

080009b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009bc:	4802      	ldr	r0, [pc, #8]	@ (80009c8 <TIM3_IRQHandler+0x10>)
 80009be:	f001 ff4f 	bl	8002860 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000c0 	.word	0x200000c0

080009cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d4:	4a14      	ldr	r2, [pc, #80]	@ (8000a28 <_sbrk+0x5c>)
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <_sbrk+0x60>)
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e0:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <_sbrk+0x64>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d102      	bne.n	80009ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e8:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <_sbrk+0x64>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	@ (8000a34 <_sbrk+0x68>)
 80009ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ee:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <_sbrk+0x64>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	429a      	cmp	r2, r3
 80009fa:	d207      	bcs.n	8000a0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009fc:	f003 fb0c 	bl	8004018 <__errno>
 8000a00:	4603      	mov	r3, r0
 8000a02:	220c      	movs	r2, #12
 8000a04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a0a:	e009      	b.n	8000a20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a0c:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a12:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <_sbrk+0x64>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4413      	add	r3, r2
 8000a1a:	4a05      	ldr	r2, [pc, #20]	@ (8000a30 <_sbrk+0x64>)
 8000a1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20002800 	.word	0x20002800
 8000a2c:	00000400 	.word	0x00000400
 8000a30:	20000150 	.word	0x20000150
 8000a34:	200002a0 	.word	0x200002a0

08000a38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a44:	f7ff fff8 	bl	8000a38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a48:	480b      	ldr	r0, [pc, #44]	@ (8000a78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a4a:	490c      	ldr	r1, [pc, #48]	@ (8000a7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a09      	ldr	r2, [pc, #36]	@ (8000a84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a60:	4c09      	ldr	r4, [pc, #36]	@ (8000a88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6e:	f003 fad9 	bl	8004024 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a72:	f7ff fb73 	bl	800015c <main>
  bx lr
 8000a76:	4770      	bx	lr
  ldr r0, =_sdata
 8000a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a7c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a80:	08004b18 	.word	0x08004b18
  ldr r2, =_sbss
 8000a84:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a88:	200002a0 	.word	0x200002a0

08000a8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC1_2_IRQHandler>
	...

08000a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a94:	4b08      	ldr	r3, [pc, #32]	@ (8000ab8 <HAL_Init+0x28>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a07      	ldr	r2, [pc, #28]	@ (8000ab8 <HAL_Init+0x28>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	f000 f947 	bl	8000d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa6:	200f      	movs	r0, #15
 8000aa8:	f000 f808 	bl	8000abc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff fe36 	bl	800071c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40022000 	.word	0x40022000

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac4:	4b12      	ldr	r3, [pc, #72]	@ (8000b10 <HAL_InitTick+0x54>)
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <HAL_InitTick+0x58>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f98e 	bl	8000dfc <HAL_SYSTICK_Config>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00e      	b.n	8000b08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2b0f      	cmp	r3, #15
 8000aee:	d80a      	bhi.n	8000b06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000af8:	f000 f93c 	bl	8000d74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4a06      	ldr	r2, [pc, #24]	@ (8000b18 <HAL_InitTick+0x5c>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3708      	adds	r7, #8
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000004 	.word	0x20000004

08000b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <HAL_IncTick+0x1c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <HAL_IncTick+0x20>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	4a03      	ldr	r2, [pc, #12]	@ (8000b3c <HAL_IncTick+0x20>)
 8000b2e:	6013      	str	r3, [r2, #0]
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000154 	.word	0x20000154

08000b40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b02      	ldr	r3, [pc, #8]	@ (8000b50 <HAL_GetTick+0x10>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr
 8000b50:	20000154 	.word	0x20000154

08000b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b5c:	f7ff fff0 	bl	8000b40 <HAL_GetTick>
 8000b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000b6c:	d005      	beq.n	8000b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b98 <HAL_Delay+0x44>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4413      	add	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b7a:	bf00      	nop
 8000b7c:	f7ff ffe0 	bl	8000b40 <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d8f7      	bhi.n	8000b7c <HAL_Delay+0x28>
  {
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000008 	.word	0x20000008

08000b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bac:	4b0c      	ldr	r3, [pc, #48]	@ (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bce:	4a04      	ldr	r2, [pc, #16]	@ (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	60d3      	str	r3, [r2, #12]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be8:	4b04      	ldr	r3, [pc, #16]	@ (8000bfc <__NVIC_GetPriorityGrouping+0x18>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	f003 0307 	and.w	r3, r3, #7
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	db0b      	blt.n	8000c2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	f003 021f 	and.w	r2, r3, #31
 8000c18:	4906      	ldr	r1, [pc, #24]	@ (8000c34 <__NVIC_EnableIRQ+0x34>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	095b      	lsrs	r3, r3, #5
 8000c20:	2001      	movs	r0, #1
 8000c22:	fa00 f202 	lsl.w	r2, r0, r2
 8000c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100

08000c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	6039      	str	r1, [r7, #0]
 8000c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	db0a      	blt.n	8000c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	490c      	ldr	r1, [pc, #48]	@ (8000c84 <__NVIC_SetPriority+0x4c>)
 8000c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c56:	0112      	lsls	r2, r2, #4
 8000c58:	b2d2      	uxtb	r2, r2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c60:	e00a      	b.n	8000c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4908      	ldr	r1, [pc, #32]	@ (8000c88 <__NVIC_SetPriority+0x50>)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	3b04      	subs	r3, #4
 8000c70:	0112      	lsls	r2, r2, #4
 8000c72:	b2d2      	uxtb	r2, r2
 8000c74:	440b      	add	r3, r1
 8000c76:	761a      	strb	r2, [r3, #24]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000e100 	.word	0xe000e100
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	@ 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f1c3 0307 	rsb	r3, r3, #7
 8000ca6:	2b04      	cmp	r3, #4
 8000ca8:	bf28      	it	cs
 8000caa:	2304      	movcs	r3, #4
 8000cac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	2b06      	cmp	r3, #6
 8000cb4:	d902      	bls.n	8000cbc <NVIC_EncodePriority+0x30>
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	3b03      	subs	r3, #3
 8000cba:	e000      	b.n	8000cbe <NVIC_EncodePriority+0x32>
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	401a      	ands	r2, r3
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cd4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa01 f303 	lsl.w	r3, r1, r3
 8000cde:	43d9      	mvns	r1, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	4313      	orrs	r3, r2
         );
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3724      	adds	r7, #36	@ 0x24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d00:	d301      	bcc.n	8000d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d02:	2301      	movs	r3, #1
 8000d04:	e00f      	b.n	8000d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d06:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <SysTick_Config+0x40>)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0e:	210f      	movs	r1, #15
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d14:	f7ff ff90 	bl	8000c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d18:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <SysTick_Config+0x40>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1e:	4b04      	ldr	r3, [pc, #16]	@ (8000d30 <SysTick_Config+0x40>)
 8000d20:	2207      	movs	r2, #7
 8000d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	e000e010 	.word	0xe000e010

08000d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b07      	cmp	r3, #7
 8000d40:	d00f      	beq.n	8000d62 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b06      	cmp	r3, #6
 8000d46:	d00c      	beq.n	8000d62 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b05      	cmp	r3, #5
 8000d4c:	d009      	beq.n	8000d62 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b04      	cmp	r3, #4
 8000d52:	d006      	beq.n	8000d62 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d003      	beq.n	8000d62 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000d5a:	2191      	movs	r1, #145	@ 0x91
 8000d5c:	4804      	ldr	r0, [pc, #16]	@ (8000d70 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000d5e:	f7ff fcd3 	bl	8000708 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ff1a 	bl	8000b9c <__NVIC_SetPriorityGrouping>
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	08004948 	.word	0x08004948

08000d74 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
 8000d80:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d903      	bls.n	8000d94 <HAL_NVIC_SetPriority+0x20>
 8000d8c:	21a9      	movs	r1, #169	@ 0xa9
 8000d8e:	480e      	ldr	r0, [pc, #56]	@ (8000dc8 <HAL_NVIC_SetPriority+0x54>)
 8000d90:	f7ff fcba 	bl	8000708 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	2b0f      	cmp	r3, #15
 8000d98:	d903      	bls.n	8000da2 <HAL_NVIC_SetPriority+0x2e>
 8000d9a:	21aa      	movs	r1, #170	@ 0xaa
 8000d9c:	480a      	ldr	r0, [pc, #40]	@ (8000dc8 <HAL_NVIC_SetPriority+0x54>)
 8000d9e:	f7ff fcb3 	bl	8000708 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da2:	f7ff ff1f 	bl	8000be4 <__NVIC_GetPriorityGrouping>
 8000da6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	68b9      	ldr	r1, [r7, #8]
 8000dac:	6978      	ldr	r0, [r7, #20]
 8000dae:	f7ff ff6d 	bl	8000c8c <NVIC_EncodePriority>
 8000db2:	4602      	mov	r2, r0
 8000db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ff3c 	bl	8000c38 <__NVIC_SetPriority>
}
 8000dc0:	bf00      	nop
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	08004948 	.word	0x08004948

08000dcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	da03      	bge.n	8000de6 <HAL_NVIC_EnableIRQ+0x1a>
 8000dde:	21bd      	movs	r1, #189	@ 0xbd
 8000de0:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <HAL_NVIC_EnableIRQ+0x2c>)
 8000de2:	f7ff fc91 	bl	8000708 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff08 	bl	8000c00 <__NVIC_EnableIRQ>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	08004948 	.word	0x08004948

08000dfc <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff73 	bl	8000cf0 <SysTick_Config>
 8000e0a:	4603      	mov	r3, r0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	@ 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a92      	ldr	r2, [pc, #584]	@ (8001074 <HAL_GPIO_Init+0x260>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d00f      	beq.n	8000e4e <HAL_GPIO_Init+0x3a>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a91      	ldr	r2, [pc, #580]	@ (8001078 <HAL_GPIO_Init+0x264>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d00b      	beq.n	8000e4e <HAL_GPIO_Init+0x3a>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a90      	ldr	r2, [pc, #576]	@ (800107c <HAL_GPIO_Init+0x268>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d007      	beq.n	8000e4e <HAL_GPIO_Init+0x3a>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a8f      	ldr	r2, [pc, #572]	@ (8001080 <HAL_GPIO_Init+0x26c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_Init+0x3a>
 8000e46:	21bd      	movs	r1, #189	@ 0xbd
 8000e48:	488e      	ldr	r0, [pc, #568]	@ (8001084 <HAL_GPIO_Init+0x270>)
 8000e4a:	f7ff fc5d 	bl	8000708 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d004      	beq.n	8000e62 <HAL_GPIO_Init+0x4e>
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e60:	d303      	bcc.n	8000e6a <HAL_GPIO_Init+0x56>
 8000e62:	21be      	movs	r1, #190	@ 0xbe
 8000e64:	4887      	ldr	r0, [pc, #540]	@ (8001084 <HAL_GPIO_Init+0x270>)
 8000e66:	f7ff fc4f 	bl	8000708 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8211 	beq.w	8001296 <HAL_GPIO_Init+0x482>
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	f000 820c 	beq.w	8001296 <HAL_GPIO_Init+0x482>
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b11      	cmp	r3, #17
 8000e84:	f000 8207 	beq.w	8001296 <HAL_GPIO_Init+0x482>
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	f000 8202 	beq.w	8001296 <HAL_GPIO_Init+0x482>
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b12      	cmp	r3, #18
 8000e98:	f000 81fd 	beq.w	8001296 <HAL_GPIO_Init+0x482>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	4a79      	ldr	r2, [pc, #484]	@ (8001088 <HAL_GPIO_Init+0x274>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	f000 81f7 	beq.w	8001296 <HAL_GPIO_Init+0x482>
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	4a77      	ldr	r2, [pc, #476]	@ (800108c <HAL_GPIO_Init+0x278>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	f000 81f1 	beq.w	8001296 <HAL_GPIO_Init+0x482>
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	4a75      	ldr	r2, [pc, #468]	@ (8001090 <HAL_GPIO_Init+0x27c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	f000 81eb 	beq.w	8001296 <HAL_GPIO_Init+0x482>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	4a73      	ldr	r2, [pc, #460]	@ (8001094 <HAL_GPIO_Init+0x280>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	f000 81e5 	beq.w	8001296 <HAL_GPIO_Init+0x482>
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	4a71      	ldr	r2, [pc, #452]	@ (8001098 <HAL_GPIO_Init+0x284>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	f000 81df 	beq.w	8001296 <HAL_GPIO_Init+0x482>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	4a6f      	ldr	r2, [pc, #444]	@ (800109c <HAL_GPIO_Init+0x288>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	f000 81d9 	beq.w	8001296 <HAL_GPIO_Init+0x482>
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	f000 81d4 	beq.w	8001296 <HAL_GPIO_Init+0x482>
 8000eee:	21bf      	movs	r1, #191	@ 0xbf
 8000ef0:	4864      	ldr	r0, [pc, #400]	@ (8001084 <HAL_GPIO_Init+0x270>)
 8000ef2:	f7ff fc09 	bl	8000708 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef6:	e1ce      	b.n	8001296 <HAL_GPIO_Init+0x482>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	69fa      	ldr	r2, [r7, #28]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	f040 81bd 	bne.w	8001290 <HAL_GPIO_Init+0x47c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a56      	ldr	r2, [pc, #344]	@ (8001074 <HAL_GPIO_Init+0x260>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d00f      	beq.n	8000f3e <HAL_GPIO_Init+0x12a>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a55      	ldr	r2, [pc, #340]	@ (8001078 <HAL_GPIO_Init+0x264>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00b      	beq.n	8000f3e <HAL_GPIO_Init+0x12a>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a54      	ldr	r2, [pc, #336]	@ (800107c <HAL_GPIO_Init+0x268>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d007      	beq.n	8000f3e <HAL_GPIO_Init+0x12a>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a53      	ldr	r2, [pc, #332]	@ (8001080 <HAL_GPIO_Init+0x26c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d003      	beq.n	8000f3e <HAL_GPIO_Init+0x12a>
 8000f36:	21cd      	movs	r1, #205	@ 0xcd
 8000f38:	4852      	ldr	r0, [pc, #328]	@ (8001084 <HAL_GPIO_Init+0x270>)
 8000f3a:	f7ff fbe5 	bl	8000708 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	4a56      	ldr	r2, [pc, #344]	@ (800109c <HAL_GPIO_Init+0x288>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	f000 80c0 	beq.w	80010ca <HAL_GPIO_Init+0x2b6>
 8000f4a:	4a54      	ldr	r2, [pc, #336]	@ (800109c <HAL_GPIO_Init+0x288>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	f200 80e6 	bhi.w	800111e <HAL_GPIO_Init+0x30a>
 8000f52:	4a4f      	ldr	r2, [pc, #316]	@ (8001090 <HAL_GPIO_Init+0x27c>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	f000 80b8 	beq.w	80010ca <HAL_GPIO_Init+0x2b6>
 8000f5a:	4a4d      	ldr	r2, [pc, #308]	@ (8001090 <HAL_GPIO_Init+0x27c>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	f200 80de 	bhi.w	800111e <HAL_GPIO_Init+0x30a>
 8000f62:	4a4d      	ldr	r2, [pc, #308]	@ (8001098 <HAL_GPIO_Init+0x284>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	f000 80b0 	beq.w	80010ca <HAL_GPIO_Init+0x2b6>
 8000f6a:	4a4b      	ldr	r2, [pc, #300]	@ (8001098 <HAL_GPIO_Init+0x284>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	f200 80d6 	bhi.w	800111e <HAL_GPIO_Init+0x30a>
 8000f72:	4a46      	ldr	r2, [pc, #280]	@ (800108c <HAL_GPIO_Init+0x278>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	f000 80a8 	beq.w	80010ca <HAL_GPIO_Init+0x2b6>
 8000f7a:	4a44      	ldr	r2, [pc, #272]	@ (800108c <HAL_GPIO_Init+0x278>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	f200 80ce 	bhi.w	800111e <HAL_GPIO_Init+0x30a>
 8000f82:	4a44      	ldr	r2, [pc, #272]	@ (8001094 <HAL_GPIO_Init+0x280>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	f000 80a0 	beq.w	80010ca <HAL_GPIO_Init+0x2b6>
 8000f8a:	4a42      	ldr	r2, [pc, #264]	@ (8001094 <HAL_GPIO_Init+0x280>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	f200 80c6 	bhi.w	800111e <HAL_GPIO_Init+0x30a>
 8000f92:	2b12      	cmp	r3, #18
 8000f94:	d82c      	bhi.n	8000ff0 <HAL_GPIO_Init+0x1dc>
 8000f96:	2b12      	cmp	r3, #18
 8000f98:	f200 80c1 	bhi.w	800111e <HAL_GPIO_Init+0x30a>
 8000f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8000fa4 <HAL_GPIO_Init+0x190>)
 8000f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa2:	bf00      	nop
 8000fa4:	080010cb 	.word	0x080010cb
 8000fa8:	08000ff9 	.word	0x08000ff9
 8000fac:	0800104b 	.word	0x0800104b
 8000fb0:	08001119 	.word	0x08001119
 8000fb4:	0800111f 	.word	0x0800111f
 8000fb8:	0800111f 	.word	0x0800111f
 8000fbc:	0800111f 	.word	0x0800111f
 8000fc0:	0800111f 	.word	0x0800111f
 8000fc4:	0800111f 	.word	0x0800111f
 8000fc8:	0800111f 	.word	0x0800111f
 8000fcc:	0800111f 	.word	0x0800111f
 8000fd0:	0800111f 	.word	0x0800111f
 8000fd4:	0800111f 	.word	0x0800111f
 8000fd8:	0800111f 	.word	0x0800111f
 8000fdc:	0800111f 	.word	0x0800111f
 8000fe0:	0800111f 	.word	0x0800111f
 8000fe4:	0800111f 	.word	0x0800111f
 8000fe8:	08001021 	.word	0x08001021
 8000fec:	080010a1 	.word	0x080010a1
 8000ff0:	4a25      	ldr	r2, [pc, #148]	@ (8001088 <HAL_GPIO_Init+0x274>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d069      	beq.n	80010ca <HAL_GPIO_Init+0x2b6>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ff6:	e092      	b.n	800111e <HAL_GPIO_Init+0x30a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d00b      	beq.n	8001018 <HAL_GPIO_Init+0x204>
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d007      	beq.n	8001018 <HAL_GPIO_Init+0x204>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	2b03      	cmp	r3, #3
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x204>
 8001010:	21d5      	movs	r1, #213	@ 0xd5
 8001012:	481c      	ldr	r0, [pc, #112]	@ (8001084 <HAL_GPIO_Init+0x270>)
 8001014:	f7ff fb78 	bl	8000708 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	623b      	str	r3, [r7, #32]
          break;
 800101e:	e07f      	b.n	8001120 <HAL_GPIO_Init+0x30c>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d00b      	beq.n	8001040 <HAL_GPIO_Init+0x22c>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d007      	beq.n	8001040 <HAL_GPIO_Init+0x22c>
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	2b03      	cmp	r3, #3
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x22c>
 8001038:	21dc      	movs	r1, #220	@ 0xdc
 800103a:	4812      	ldr	r0, [pc, #72]	@ (8001084 <HAL_GPIO_Init+0x270>)
 800103c:	f7ff fb64 	bl	8000708 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	3304      	adds	r3, #4
 8001046:	623b      	str	r3, [r7, #32]
          break;
 8001048:	e06a      	b.n	8001120 <HAL_GPIO_Init+0x30c>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	2b02      	cmp	r3, #2
 8001050:	d00b      	beq.n	800106a <HAL_GPIO_Init+0x256>
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d007      	beq.n	800106a <HAL_GPIO_Init+0x256>
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	68db      	ldr	r3, [r3, #12]
 800105e:	2b03      	cmp	r3, #3
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x256>
 8001062:	21e3      	movs	r1, #227	@ 0xe3
 8001064:	4807      	ldr	r0, [pc, #28]	@ (8001084 <HAL_GPIO_Init+0x270>)
 8001066:	f7ff fb4f 	bl	8000708 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	3308      	adds	r3, #8
 8001070:	623b      	str	r3, [r7, #32]
          break;
 8001072:	e055      	b.n	8001120 <HAL_GPIO_Init+0x30c>
 8001074:	40010800 	.word	0x40010800
 8001078:	40010c00 	.word	0x40010c00
 800107c:	40011000 	.word	0x40011000
 8001080:	40011400 	.word	0x40011400
 8001084:	08004984 	.word	0x08004984
 8001088:	10110000 	.word	0x10110000
 800108c:	10210000 	.word	0x10210000
 8001090:	10310000 	.word	0x10310000
 8001094:	10120000 	.word	0x10120000
 8001098:	10220000 	.word	0x10220000
 800109c:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d00b      	beq.n	80010c0 <HAL_GPIO_Init+0x2ac>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d007      	beq.n	80010c0 <HAL_GPIO_Init+0x2ac>
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x2ac>
 80010b8:	21ea      	movs	r1, #234	@ 0xea
 80010ba:	487d      	ldr	r0, [pc, #500]	@ (80012b0 <HAL_GPIO_Init+0x49c>)
 80010bc:	f7ff fb24 	bl	8000708 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	330c      	adds	r3, #12
 80010c6:	623b      	str	r3, [r7, #32]
          break;
 80010c8:	e02a      	b.n	8001120 <HAL_GPIO_Init+0x30c>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00b      	beq.n	80010ea <HAL_GPIO_Init+0x2d6>
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d007      	beq.n	80010ea <HAL_GPIO_Init+0x2d6>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x2d6>
 80010e2:	21f7      	movs	r1, #247	@ 0xf7
 80010e4:	4872      	ldr	r0, [pc, #456]	@ (80012b0 <HAL_GPIO_Init+0x49c>)
 80010e6:	f7ff fb0f 	bl	8000708 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d102      	bne.n	80010f8 <HAL_GPIO_Init+0x2e4>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010f2:	2304      	movs	r3, #4
 80010f4:	623b      	str	r3, [r7, #32]
          break;
 80010f6:	e013      	b.n	8001120 <HAL_GPIO_Init+0x30c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d105      	bne.n	800110c <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001100:	2308      	movs	r3, #8
 8001102:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	611a      	str	r2, [r3, #16]
          break;
 800110a:	e009      	b.n	8001120 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800110c:	2308      	movs	r3, #8
 800110e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69fa      	ldr	r2, [r7, #28]
 8001114:	615a      	str	r2, [r3, #20]
          break;
 8001116:	e003      	b.n	8001120 <HAL_GPIO_Init+0x30c>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
          break;
 800111c:	e000      	b.n	8001120 <HAL_GPIO_Init+0x30c>
          break;
 800111e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	2bff      	cmp	r3, #255	@ 0xff
 8001124:	d801      	bhi.n	800112a <HAL_GPIO_Init+0x316>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	e001      	b.n	800112e <HAL_GPIO_Init+0x31a>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3304      	adds	r3, #4
 800112e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	2bff      	cmp	r3, #255	@ 0xff
 8001134:	d802      	bhi.n	800113c <HAL_GPIO_Init+0x328>
 8001136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	e002      	b.n	8001142 <HAL_GPIO_Init+0x32e>
 800113c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113e:	3b08      	subs	r3, #8
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	210f      	movs	r1, #15
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	fa01 f303 	lsl.w	r3, r1, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	401a      	ands	r2, r3
 8001154:	6a39      	ldr	r1, [r7, #32]
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	431a      	orrs	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 8090 	beq.w	8001290 <HAL_GPIO_Init+0x47c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001170:	4b50      	ldr	r3, [pc, #320]	@ (80012b4 <HAL_GPIO_Init+0x4a0>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a4f      	ldr	r2, [pc, #316]	@ (80012b4 <HAL_GPIO_Init+0x4a0>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b4d      	ldr	r3, [pc, #308]	@ (80012b4 <HAL_GPIO_Init+0x4a0>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001188:	4a4b      	ldr	r2, [pc, #300]	@ (80012b8 <HAL_GPIO_Init+0x4a4>)
 800118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118c:	089b      	lsrs	r3, r3, #2
 800118e:	3302      	adds	r3, #2
 8001190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001194:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	220f      	movs	r2, #15
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	4013      	ands	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a43      	ldr	r2, [pc, #268]	@ (80012bc <HAL_GPIO_Init+0x4a8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d00d      	beq.n	80011d0 <HAL_GPIO_Init+0x3bc>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a42      	ldr	r2, [pc, #264]	@ (80012c0 <HAL_GPIO_Init+0x4ac>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d007      	beq.n	80011cc <HAL_GPIO_Init+0x3b8>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a41      	ldr	r2, [pc, #260]	@ (80012c4 <HAL_GPIO_Init+0x4b0>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d101      	bne.n	80011c8 <HAL_GPIO_Init+0x3b4>
 80011c4:	2302      	movs	r3, #2
 80011c6:	e004      	b.n	80011d2 <HAL_GPIO_Init+0x3be>
 80011c8:	2303      	movs	r3, #3
 80011ca:	e002      	b.n	80011d2 <HAL_GPIO_Init+0x3be>
 80011cc:	2301      	movs	r3, #1
 80011ce:	e000      	b.n	80011d2 <HAL_GPIO_Init+0x3be>
 80011d0:	2300      	movs	r3, #0
 80011d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011d4:	f002 0203 	and.w	r2, r2, #3
 80011d8:	0092      	lsls	r2, r2, #2
 80011da:	4093      	lsls	r3, r2
 80011dc:	68fa      	ldr	r2, [r7, #12]
 80011de:	4313      	orrs	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011e2:	4935      	ldr	r1, [pc, #212]	@ (80012b8 <HAL_GPIO_Init+0x4a4>)
 80011e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3302      	adds	r3, #2
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d006      	beq.n	800120a <HAL_GPIO_Init+0x3f6>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011fc:	4b32      	ldr	r3, [pc, #200]	@ (80012c8 <HAL_GPIO_Init+0x4b4>)
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	4931      	ldr	r1, [pc, #196]	@ (80012c8 <HAL_GPIO_Init+0x4b4>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	608b      	str	r3, [r1, #8]
 8001208:	e006      	b.n	8001218 <HAL_GPIO_Init+0x404>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800120a:	4b2f      	ldr	r3, [pc, #188]	@ (80012c8 <HAL_GPIO_Init+0x4b4>)
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	43db      	mvns	r3, r3
 8001212:	492d      	ldr	r1, [pc, #180]	@ (80012c8 <HAL_GPIO_Init+0x4b4>)
 8001214:	4013      	ands	r3, r2
 8001216:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d006      	beq.n	8001232 <HAL_GPIO_Init+0x41e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001224:	4b28      	ldr	r3, [pc, #160]	@ (80012c8 <HAL_GPIO_Init+0x4b4>)
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	4927      	ldr	r1, [pc, #156]	@ (80012c8 <HAL_GPIO_Init+0x4b4>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	60cb      	str	r3, [r1, #12]
 8001230:	e006      	b.n	8001240 <HAL_GPIO_Init+0x42c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001232:	4b25      	ldr	r3, [pc, #148]	@ (80012c8 <HAL_GPIO_Init+0x4b4>)
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	43db      	mvns	r3, r3
 800123a:	4923      	ldr	r1, [pc, #140]	@ (80012c8 <HAL_GPIO_Init+0x4b4>)
 800123c:	4013      	ands	r3, r2
 800123e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <HAL_GPIO_Init+0x446>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800124c:	4b1e      	ldr	r3, [pc, #120]	@ (80012c8 <HAL_GPIO_Init+0x4b4>)
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	491d      	ldr	r1, [pc, #116]	@ (80012c8 <HAL_GPIO_Init+0x4b4>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	604b      	str	r3, [r1, #4]
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x454>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800125a:	4b1b      	ldr	r3, [pc, #108]	@ (80012c8 <HAL_GPIO_Init+0x4b4>)
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	43db      	mvns	r3, r3
 8001262:	4919      	ldr	r1, [pc, #100]	@ (80012c8 <HAL_GPIO_Init+0x4b4>)
 8001264:	4013      	ands	r3, r2
 8001266:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <HAL_GPIO_Init+0x46e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001274:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <HAL_GPIO_Init+0x4b4>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4913      	ldr	r1, [pc, #76]	@ (80012c8 <HAL_GPIO_Init+0x4b4>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	600b      	str	r3, [r1, #0]
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x47c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001282:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <HAL_GPIO_Init+0x4b4>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	43db      	mvns	r3, r3
 800128a:	490f      	ldr	r1, [pc, #60]	@ (80012c8 <HAL_GPIO_Init+0x4b4>)
 800128c:	4013      	ands	r3, r2
 800128e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001292:	3301      	adds	r3, #1
 8001294:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129c:	fa22 f303 	lsr.w	r3, r2, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f47f ae29 	bne.w	8000ef8 <HAL_GPIO_Init+0xe4>
  }
}
 80012a6:	bf00      	nop
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	@ 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	08004984 	.word	0x08004984
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010000 	.word	0x40010000
 80012bc:	40010800 	.word	0x40010800
 80012c0:	40010c00 	.word	0x40010c00
 80012c4:	40011000 	.word	0x40011000
 80012c8:	40010400 	.word	0x40010400

080012cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e35a      	b.n	8001994 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d01c      	beq.n	8001320 <HAL_RCC_OscConfig+0x54>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d116      	bne.n	8001320 <HAL_RCC_OscConfig+0x54>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d110      	bne.n	8001320 <HAL_RCC_OscConfig+0x54>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10a      	bne.n	8001320 <HAL_RCC_OscConfig+0x54>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	2b00      	cmp	r3, #0
 8001314:	d104      	bne.n	8001320 <HAL_RCC_OscConfig+0x54>
 8001316:	f240 1165 	movw	r1, #357	@ 0x165
 800131a:	488f      	ldr	r0, [pc, #572]	@ (8001558 <HAL_RCC_OscConfig+0x28c>)
 800131c:	f7ff f9f4 	bl	8000708 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 809a 	beq.w	8001462 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00e      	beq.n	8001354 <HAL_RCC_OscConfig+0x88>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800133e:	d009      	beq.n	8001354 <HAL_RCC_OscConfig+0x88>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001348:	d004      	beq.n	8001354 <HAL_RCC_OscConfig+0x88>
 800134a:	f240 116b 	movw	r1, #363	@ 0x16b
 800134e:	4882      	ldr	r0, [pc, #520]	@ (8001558 <HAL_RCC_OscConfig+0x28c>)
 8001350:	f7ff f9da 	bl	8000708 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001354:	4b81      	ldr	r3, [pc, #516]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f003 030c 	and.w	r3, r3, #12
 800135c:	2b04      	cmp	r3, #4
 800135e:	d00c      	beq.n	800137a <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001360:	4b7e      	ldr	r3, [pc, #504]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f003 030c 	and.w	r3, r3, #12
 8001368:	2b08      	cmp	r3, #8
 800136a:	d112      	bne.n	8001392 <HAL_RCC_OscConfig+0xc6>
 800136c:	4b7b      	ldr	r3, [pc, #492]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001378:	d10b      	bne.n	8001392 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137a:	4b78      	ldr	r3, [pc, #480]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d06c      	beq.n	8001460 <HAL_RCC_OscConfig+0x194>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d168      	bne.n	8001460 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e300      	b.n	8001994 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800139a:	d106      	bne.n	80013aa <HAL_RCC_OscConfig+0xde>
 800139c:	4b6f      	ldr	r3, [pc, #444]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a6e      	ldr	r2, [pc, #440]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 80013a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	e02e      	b.n	8001408 <HAL_RCC_OscConfig+0x13c>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x100>
 80013b2:	4b6a      	ldr	r3, [pc, #424]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a69      	ldr	r2, [pc, #420]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 80013b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b67      	ldr	r3, [pc, #412]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a66      	ldr	r2, [pc, #408]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 80013c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e01d      	b.n	8001408 <HAL_RCC_OscConfig+0x13c>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x124>
 80013d6:	4b61      	ldr	r3, [pc, #388]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a60      	ldr	r2, [pc, #384]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 80013dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b5e      	ldr	r3, [pc, #376]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a5d      	ldr	r2, [pc, #372]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e00b      	b.n	8001408 <HAL_RCC_OscConfig+0x13c>
 80013f0:	4b5a      	ldr	r3, [pc, #360]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a59      	ldr	r2, [pc, #356]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 80013f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b57      	ldr	r3, [pc, #348]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a56      	ldr	r2, [pc, #344]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 8001402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001406:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d013      	beq.n	8001438 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff fb96 	bl	8000b40 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fb92 	bl	8000b40 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	@ 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e2b4      	b.n	8001994 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	4b4c      	ldr	r3, [pc, #304]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0x14c>
 8001436:	e014      	b.n	8001462 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fb82 	bl	8000b40 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fb7e 	bl	8000b40 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	@ 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e2a0      	b.n	8001994 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001452:	4b42      	ldr	r3, [pc, #264]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x174>
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 8080 	beq.w	8001570 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d008      	beq.n	800148a <HAL_RCC_OscConfig+0x1be>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d004      	beq.n	800148a <HAL_RCC_OscConfig+0x1be>
 8001480:	f240 119f 	movw	r1, #415	@ 0x19f
 8001484:	4834      	ldr	r0, [pc, #208]	@ (8001558 <HAL_RCC_OscConfig+0x28c>)
 8001486:	f7ff f93f 	bl	8000708 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	2b1f      	cmp	r3, #31
 8001490:	d904      	bls.n	800149c <HAL_RCC_OscConfig+0x1d0>
 8001492:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8001496:	4830      	ldr	r0, [pc, #192]	@ (8001558 <HAL_RCC_OscConfig+0x28c>)
 8001498:	f7ff f936 	bl	8000708 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800149c:	4b2f      	ldr	r3, [pc, #188]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 030c 	and.w	r3, r3, #12
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00b      	beq.n	80014c0 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014a8:	4b2c      	ldr	r3, [pc, #176]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 030c 	and.w	r3, r3, #12
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	d11c      	bne.n	80014ee <HAL_RCC_OscConfig+0x222>
 80014b4:	4b29      	ldr	r3, [pc, #164]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d116      	bne.n	80014ee <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c0:	4b26      	ldr	r3, [pc, #152]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_OscConfig+0x20c>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e25d      	b.n	8001994 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d8:	4b20      	ldr	r3, [pc, #128]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	695b      	ldr	r3, [r3, #20]
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	491d      	ldr	r1, [pc, #116]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ec:	e040      	b.n	8001570 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d020      	beq.n	8001538 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <HAL_RCC_OscConfig+0x294>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fb20 	bl	8000b40 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001504:	f7ff fb1c 	bl	8000b40 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e23e      	b.n	8001994 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001516:	4b11      	ldr	r3, [pc, #68]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	490a      	ldr	r1, [pc, #40]	@ (800155c <HAL_RCC_OscConfig+0x290>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
 8001536:	e01b      	b.n	8001570 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <HAL_RCC_OscConfig+0x294>)
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153e:	f7ff faff 	bl	8000b40 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001544:	e00e      	b.n	8001564 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001546:	f7ff fafb 	bl	8000b40 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d907      	bls.n	8001564 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e21d      	b.n	8001994 <HAL_RCC_OscConfig+0x6c8>
 8001558:	080049c0 	.word	0x080049c0
 800155c:	40021000 	.word	0x40021000
 8001560:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001564:	4b7d      	ldr	r3, [pc, #500]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1ea      	bne.n	8001546 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b00      	cmp	r3, #0
 800157a:	d040      	beq.n	80015fe <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_RCC_OscConfig+0x2ca>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d004      	beq.n	8001596 <HAL_RCC_OscConfig+0x2ca>
 800158c:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8001590:	4873      	ldr	r0, [pc, #460]	@ (8001760 <HAL_RCC_OscConfig+0x494>)
 8001592:	f7ff f8b9 	bl	8000708 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d019      	beq.n	80015d2 <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800159e:	4b71      	ldr	r3, [pc, #452]	@ (8001764 <HAL_RCC_OscConfig+0x498>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a4:	f7ff facc 	bl	8000b40 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ac:	f7ff fac8 	bl	8000b40 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e1ea      	b.n	8001994 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015be:	4b67      	ldr	r3, [pc, #412]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 80015c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015ca:	2001      	movs	r0, #1
 80015cc:	f000 fc02 	bl	8001dd4 <RCC_Delay>
 80015d0:	e015      	b.n	80015fe <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d2:	4b64      	ldr	r3, [pc, #400]	@ (8001764 <HAL_RCC_OscConfig+0x498>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d8:	f7ff fab2 	bl	8000b40 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e0:	f7ff faae 	bl	8000b40 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e1d0      	b.n	8001994 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f2:	4b5a      	ldr	r3, [pc, #360]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 80015f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	2b00      	cmp	r3, #0
 8001608:	f000 80bf 	beq.w	800178a <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 800160c:	2300      	movs	r3, #0
 800160e:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00c      	beq.n	8001632 <HAL_RCC_OscConfig+0x366>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d008      	beq.n	8001632 <HAL_RCC_OscConfig+0x366>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b05      	cmp	r3, #5
 8001626:	d004      	beq.n	8001632 <HAL_RCC_OscConfig+0x366>
 8001628:	f240 210f 	movw	r1, #527	@ 0x20f
 800162c:	484c      	ldr	r0, [pc, #304]	@ (8001760 <HAL_RCC_OscConfig+0x494>)
 800162e:	f7ff f86b 	bl	8000708 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001632:	4b4a      	ldr	r3, [pc, #296]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10d      	bne.n	800165a <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	4b47      	ldr	r3, [pc, #284]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4a46      	ldr	r2, [pc, #280]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001648:	61d3      	str	r3, [r2, #28]
 800164a:	4b44      	ldr	r3, [pc, #272]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001656:	2301      	movs	r3, #1
 8001658:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165a:	4b43      	ldr	r3, [pc, #268]	@ (8001768 <HAL_RCC_OscConfig+0x49c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001662:	2b00      	cmp	r3, #0
 8001664:	d118      	bne.n	8001698 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001666:	4b40      	ldr	r3, [pc, #256]	@ (8001768 <HAL_RCC_OscConfig+0x49c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a3f      	ldr	r2, [pc, #252]	@ (8001768 <HAL_RCC_OscConfig+0x49c>)
 800166c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001672:	f7ff fa65 	bl	8000b40 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	e008      	b.n	800168c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800167a:	f7ff fa61 	bl	8000b40 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	2b64      	cmp	r3, #100	@ 0x64
 8001686:	d901      	bls.n	800168c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e183      	b.n	8001994 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168c:	4b36      	ldr	r3, [pc, #216]	@ (8001768 <HAL_RCC_OscConfig+0x49c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0f0      	beq.n	800167a <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d106      	bne.n	80016ae <HAL_RCC_OscConfig+0x3e2>
 80016a0:	4b2e      	ldr	r3, [pc, #184]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4a2d      	ldr	r2, [pc, #180]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	6213      	str	r3, [r2, #32]
 80016ac:	e02d      	b.n	800170a <HAL_RCC_OscConfig+0x43e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x404>
 80016b6:	4b29      	ldr	r3, [pc, #164]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4a28      	ldr	r2, [pc, #160]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	6213      	str	r3, [r2, #32]
 80016c2:	4b26      	ldr	r3, [pc, #152]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4a25      	ldr	r2, [pc, #148]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 80016c8:	f023 0304 	bic.w	r3, r3, #4
 80016cc:	6213      	str	r3, [r2, #32]
 80016ce:	e01c      	b.n	800170a <HAL_RCC_OscConfig+0x43e>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	d10c      	bne.n	80016f2 <HAL_RCC_OscConfig+0x426>
 80016d8:	4b20      	ldr	r3, [pc, #128]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4a1f      	ldr	r2, [pc, #124]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	6213      	str	r3, [r2, #32]
 80016e4:	4b1d      	ldr	r3, [pc, #116]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	4a1c      	ldr	r2, [pc, #112]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 80016ea:	f043 0301 	orr.w	r3, r3, #1
 80016ee:	6213      	str	r3, [r2, #32]
 80016f0:	e00b      	b.n	800170a <HAL_RCC_OscConfig+0x43e>
 80016f2:	4b1a      	ldr	r3, [pc, #104]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	4a19      	ldr	r2, [pc, #100]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 80016f8:	f023 0301 	bic.w	r3, r3, #1
 80016fc:	6213      	str	r3, [r2, #32]
 80016fe:	4b17      	ldr	r3, [pc, #92]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	4a16      	ldr	r2, [pc, #88]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 8001704:	f023 0304 	bic.w	r3, r3, #4
 8001708:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d015      	beq.n	800173e <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001712:	f7ff fa15 	bl	8000b40 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001718:	e00a      	b.n	8001730 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171a:	f7ff fa11 	bl	8000b40 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001728:	4293      	cmp	r3, r2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e131      	b.n	8001994 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001730:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_RCC_OscConfig+0x490>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0ee      	beq.n	800171a <HAL_RCC_OscConfig+0x44e>
 800173c:	e01c      	b.n	8001778 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173e:	f7ff f9ff 	bl	8000b40 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001744:	e012      	b.n	800176c <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001746:	f7ff f9fb 	bl	8000b40 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001754:	4293      	cmp	r3, r2
 8001756:	d909      	bls.n	800176c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e11b      	b.n	8001994 <HAL_RCC_OscConfig+0x6c8>
 800175c:	40021000 	.word	0x40021000
 8001760:	080049c0 	.word	0x080049c0
 8001764:	42420480 	.word	0x42420480
 8001768:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176c:	4b8b      	ldr	r3, [pc, #556]	@ (800199c <HAL_RCC_OscConfig+0x6d0>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1e6      	bne.n	8001746 <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001778:	7dfb      	ldrb	r3, [r7, #23]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d105      	bne.n	800178a <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177e:	4b87      	ldr	r3, [pc, #540]	@ (800199c <HAL_RCC_OscConfig+0x6d0>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	4a86      	ldr	r2, [pc, #536]	@ (800199c <HAL_RCC_OscConfig+0x6d0>)
 8001784:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001788:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00c      	beq.n	80017ac <HAL_RCC_OscConfig+0x4e0>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d008      	beq.n	80017ac <HAL_RCC_OscConfig+0x4e0>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d004      	beq.n	80017ac <HAL_RCC_OscConfig+0x4e0>
 80017a2:	f240 21ad 	movw	r1, #685	@ 0x2ad
 80017a6:	487e      	ldr	r0, [pc, #504]	@ (80019a0 <HAL_RCC_OscConfig+0x6d4>)
 80017a8:	f7fe ffae 	bl	8000708 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 80ee 	beq.w	8001992 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b6:	4b79      	ldr	r3, [pc, #484]	@ (800199c <HAL_RCC_OscConfig+0x6d0>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 030c 	and.w	r3, r3, #12
 80017be:	2b08      	cmp	r3, #8
 80017c0:	f000 80ce 	beq.w	8001960 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	f040 80b2 	bne.w	8001932 <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d009      	beq.n	80017ea <HAL_RCC_OscConfig+0x51e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017de:	d004      	beq.n	80017ea <HAL_RCC_OscConfig+0x51e>
 80017e0:	f240 21b6 	movw	r1, #694	@ 0x2b6
 80017e4:	486e      	ldr	r0, [pc, #440]	@ (80019a0 <HAL_RCC_OscConfig+0x6d4>)
 80017e6:	f7fe ff8f 	bl	8000708 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d04a      	beq.n	8001888 <HAL_RCC_OscConfig+0x5bc>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80017fa:	d045      	beq.n	8001888 <HAL_RCC_OscConfig+0x5bc>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001800:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001804:	d040      	beq.n	8001888 <HAL_RCC_OscConfig+0x5bc>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800180e:	d03b      	beq.n	8001888 <HAL_RCC_OscConfig+0x5bc>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001814:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001818:	d036      	beq.n	8001888 <HAL_RCC_OscConfig+0x5bc>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8001822:	d031      	beq.n	8001888 <HAL_RCC_OscConfig+0x5bc>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001828:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800182c:	d02c      	beq.n	8001888 <HAL_RCC_OscConfig+0x5bc>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001832:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001836:	d027      	beq.n	8001888 <HAL_RCC_OscConfig+0x5bc>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001840:	d022      	beq.n	8001888 <HAL_RCC_OscConfig+0x5bc>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001846:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800184a:	d01d      	beq.n	8001888 <HAL_RCC_OscConfig+0x5bc>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001850:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001854:	d018      	beq.n	8001888 <HAL_RCC_OscConfig+0x5bc>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800185e:	d013      	beq.n	8001888 <HAL_RCC_OscConfig+0x5bc>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001864:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001868:	d00e      	beq.n	8001888 <HAL_RCC_OscConfig+0x5bc>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186e:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 8001872:	d009      	beq.n	8001888 <HAL_RCC_OscConfig+0x5bc>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001878:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 800187c:	d004      	beq.n	8001888 <HAL_RCC_OscConfig+0x5bc>
 800187e:	f240 21b7 	movw	r1, #695	@ 0x2b7
 8001882:	4847      	ldr	r0, [pc, #284]	@ (80019a0 <HAL_RCC_OscConfig+0x6d4>)
 8001884:	f7fe ff40 	bl	8000708 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001888:	4b46      	ldr	r3, [pc, #280]	@ (80019a4 <HAL_RCC_OscConfig+0x6d8>)
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188e:	f7ff f957 	bl	8000b40 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001896:	f7ff f953 	bl	8000b40 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e075      	b.n	8001994 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a8:	4b3c      	ldr	r3, [pc, #240]	@ (800199c <HAL_RCC_OscConfig+0x6d0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1f0      	bne.n	8001896 <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018bc:	d116      	bne.n	80018ec <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d009      	beq.n	80018da <HAL_RCC_OscConfig+0x60e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80018ce:	d004      	beq.n	80018da <HAL_RCC_OscConfig+0x60e>
 80018d0:	f240 21cd 	movw	r1, #717	@ 0x2cd
 80018d4:	4832      	ldr	r0, [pc, #200]	@ (80019a0 <HAL_RCC_OscConfig+0x6d4>)
 80018d6:	f7fe ff17 	bl	8000708 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018da:	4b30      	ldr	r3, [pc, #192]	@ (800199c <HAL_RCC_OscConfig+0x6d0>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	492d      	ldr	r1, [pc, #180]	@ (800199c <HAL_RCC_OscConfig+0x6d0>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ec:	4b2b      	ldr	r3, [pc, #172]	@ (800199c <HAL_RCC_OscConfig+0x6d0>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a19      	ldr	r1, [r3, #32]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fc:	430b      	orrs	r3, r1
 80018fe:	4927      	ldr	r1, [pc, #156]	@ (800199c <HAL_RCC_OscConfig+0x6d0>)
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001904:	4b27      	ldr	r3, [pc, #156]	@ (80019a4 <HAL_RCC_OscConfig+0x6d8>)
 8001906:	2201      	movs	r2, #1
 8001908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190a:	f7ff f919 	bl	8000b40 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001912:	f7ff f915 	bl	8000b40 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e037      	b.n	8001994 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001924:	4b1d      	ldr	r3, [pc, #116]	@ (800199c <HAL_RCC_OscConfig+0x6d0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x646>
 8001930:	e02f      	b.n	8001992 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001932:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <HAL_RCC_OscConfig+0x6d8>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001938:	f7ff f902 	bl	8000b40 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001940:	f7ff f8fe 	bl	8000b40 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e020      	b.n	8001994 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001952:	4b12      	ldr	r3, [pc, #72]	@ (800199c <HAL_RCC_OscConfig+0x6d0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x674>
 800195e:	e018      	b.n	8001992 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e013      	b.n	8001994 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800196c:	4b0b      	ldr	r3, [pc, #44]	@ (800199c <HAL_RCC_OscConfig+0x6d0>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	429a      	cmp	r2, r3
 800197e:	d106      	bne.n	800198e <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d001      	beq.n	8001992 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000
 80019a0:	080049c0 	.word	0x080049c0
 80019a4:	42420060 	.word	0x42420060

080019a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e176      	b.n	8001caa <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d116      	bne.n	80019f6 <HAL_RCC_ClockConfig+0x4e>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d110      	bne.n	80019f6 <HAL_RCC_ClockConfig+0x4e>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10a      	bne.n	80019f6 <HAL_RCC_ClockConfig+0x4e>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d104      	bne.n	80019f6 <HAL_RCC_ClockConfig+0x4e>
 80019ec:	f240 3136 	movw	r1, #822	@ 0x336
 80019f0:	4874      	ldr	r0, [pc, #464]	@ (8001bc4 <HAL_RCC_ClockConfig+0x21c>)
 80019f2:	f7fe fe89 	bl	8000708 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00a      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x6a>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d007      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x6a>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d004      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x6a>
 8001a08:	f240 3137 	movw	r1, #823	@ 0x337
 8001a0c:	486d      	ldr	r0, [pc, #436]	@ (8001bc4 <HAL_RCC_ClockConfig+0x21c>)
 8001a0e:	f7fe fe7b 	bl	8000708 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a12:	4b6d      	ldr	r3, [pc, #436]	@ (8001bc8 <HAL_RCC_ClockConfig+0x220>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d910      	bls.n	8001a42 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a20:	4b69      	ldr	r3, [pc, #420]	@ (8001bc8 <HAL_RCC_ClockConfig+0x220>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f023 0207 	bic.w	r2, r3, #7
 8001a28:	4967      	ldr	r1, [pc, #412]	@ (8001bc8 <HAL_RCC_ClockConfig+0x220>)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a30:	4b65      	ldr	r3, [pc, #404]	@ (8001bc8 <HAL_RCC_ClockConfig+0x220>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d001      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e133      	b.n	8001caa <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d049      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d005      	beq.n	8001a66 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a5a:	4b5c      	ldr	r3, [pc, #368]	@ (8001bcc <HAL_RCC_ClockConfig+0x224>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bcc <HAL_RCC_ClockConfig+0x224>)
 8001a60:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a64:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a72:	4b56      	ldr	r3, [pc, #344]	@ (8001bcc <HAL_RCC_ClockConfig+0x224>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4a55      	ldr	r2, [pc, #340]	@ (8001bcc <HAL_RCC_ClockConfig+0x224>)
 8001a78:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a7c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d024      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x128>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2b80      	cmp	r3, #128	@ 0x80
 8001a8c:	d020      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x128>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b90      	cmp	r3, #144	@ 0x90
 8001a94:	d01c      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x128>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001a9c:	d018      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x128>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2bb0      	cmp	r3, #176	@ 0xb0
 8001aa4:	d014      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x128>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2bc0      	cmp	r3, #192	@ 0xc0
 8001aac:	d010      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x128>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2bd0      	cmp	r3, #208	@ 0xd0
 8001ab4:	d00c      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x128>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2be0      	cmp	r3, #224	@ 0xe0
 8001abc:	d008      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x128>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2bf0      	cmp	r3, #240	@ 0xf0
 8001ac4:	d004      	beq.n	8001ad0 <HAL_RCC_ClockConfig+0x128>
 8001ac6:	f240 315d 	movw	r1, #861	@ 0x35d
 8001aca:	483e      	ldr	r0, [pc, #248]	@ (8001bc4 <HAL_RCC_ClockConfig+0x21c>)
 8001acc:	f7fe fe1c 	bl	8000708 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b3e      	ldr	r3, [pc, #248]	@ (8001bcc <HAL_RCC_ClockConfig+0x224>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	493b      	ldr	r1, [pc, #236]	@ (8001bcc <HAL_RCC_ClockConfig+0x224>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d051      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00c      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x168>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d008      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x168>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d004      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x168>
 8001b06:	f44f 7159 	mov.w	r1, #868	@ 0x364
 8001b0a:	482e      	ldr	r0, [pc, #184]	@ (8001bc4 <HAL_RCC_ClockConfig+0x21c>)
 8001b0c:	f7fe fdfc 	bl	8000708 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d107      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b18:	4b2c      	ldr	r3, [pc, #176]	@ (8001bcc <HAL_RCC_ClockConfig+0x224>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d115      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0c0      	b.n	8001caa <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d107      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b30:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <HAL_RCC_ClockConfig+0x224>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d109      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0b4      	b.n	8001caa <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b40:	4b22      	ldr	r3, [pc, #136]	@ (8001bcc <HAL_RCC_ClockConfig+0x224>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0ac      	b.n	8001caa <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b50:	4b1e      	ldr	r3, [pc, #120]	@ (8001bcc <HAL_RCC_ClockConfig+0x224>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f023 0203 	bic.w	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	491b      	ldr	r1, [pc, #108]	@ (8001bcc <HAL_RCC_ClockConfig+0x224>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b62:	f7fe ffed 	bl	8000b40 <HAL_GetTick>
 8001b66:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b68:	e00a      	b.n	8001b80 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6a:	f7fe ffe9 	bl	8000b40 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e094      	b.n	8001caa <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <HAL_RCC_ClockConfig+0x224>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 020c 	and.w	r2, r3, #12
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d1eb      	bne.n	8001b6a <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b92:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc8 <HAL_RCC_ClockConfig+0x220>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d217      	bcs.n	8001bd0 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba0:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <HAL_RCC_ClockConfig+0x220>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 0207 	bic.w	r2, r3, #7
 8001ba8:	4907      	ldr	r1, [pc, #28]	@ (8001bc8 <HAL_RCC_ClockConfig+0x220>)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb0:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <HAL_RCC_ClockConfig+0x220>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d008      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e073      	b.n	8001caa <HAL_RCC_ClockConfig+0x302>
 8001bc2:	bf00      	nop
 8001bc4:	080049c0 	.word	0x080049c0
 8001bc8:	40022000 	.word	0x40022000
 8001bcc:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d025      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d018      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x26e>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bec:	d013      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x26e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8001bf6:	d00e      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x26e>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8001c00:	d009      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x26e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001c0a:	d004      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x26e>
 8001c0c:	f240 31a2 	movw	r1, #930	@ 0x3a2
 8001c10:	4828      	ldr	r0, [pc, #160]	@ (8001cb4 <HAL_RCC_ClockConfig+0x30c>)
 8001c12:	f7fe fd79 	bl	8000708 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c16:	4b28      	ldr	r3, [pc, #160]	@ (8001cb8 <HAL_RCC_ClockConfig+0x310>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	4925      	ldr	r1, [pc, #148]	@ (8001cb8 <HAL_RCC_ClockConfig+0x310>)
 8001c24:	4313      	orrs	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d026      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d018      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x2c6>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c44:	d013      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x2c6>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8001c4e:	d00e      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x2c6>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8001c58:	d009      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x2c6>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001c62:	d004      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x2c6>
 8001c64:	f240 31a9 	movw	r1, #937	@ 0x3a9
 8001c68:	4812      	ldr	r0, [pc, #72]	@ (8001cb4 <HAL_RCC_ClockConfig+0x30c>)
 8001c6a:	f7fe fd4d 	bl	8000708 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c6e:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <HAL_RCC_ClockConfig+0x310>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	490e      	ldr	r1, [pc, #56]	@ (8001cb8 <HAL_RCC_ClockConfig+0x310>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c82:	f000 f821 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c86:	4602      	mov	r2, r0
 8001c88:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb8 <HAL_RCC_ClockConfig+0x310>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	490a      	ldr	r1, [pc, #40]	@ (8001cbc <HAL_RCC_ClockConfig+0x314>)
 8001c94:	5ccb      	ldrb	r3, [r1, r3]
 8001c96:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9a:	4a09      	ldr	r2, [pc, #36]	@ (8001cc0 <HAL_RCC_ClockConfig+0x318>)
 8001c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c9e:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <HAL_RCC_ClockConfig+0x31c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe ff0a 	bl	8000abc <HAL_InitTick>

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	080049c0 	.word	0x080049c0
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	08004aa8 	.word	0x08004aa8
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	2300      	movs	r3, #0
 8001cdc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f003 030c 	and.w	r3, r3, #12
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d002      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x30>
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d003      	beq.n	8001cfe <HAL_RCC_GetSysClockFreq+0x36>
 8001cf6:	e027      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cf8:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cfa:	613b      	str	r3, [r7, #16]
      break;
 8001cfc:	e027      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	0c9b      	lsrs	r3, r3, #18
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	4a17      	ldr	r2, [pc, #92]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d08:	5cd3      	ldrb	r3, [r2, r3]
 8001d0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d010      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d16:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	0c5b      	lsrs	r3, r3, #17
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	4a11      	ldr	r2, [pc, #68]	@ (8001d68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d22:	5cd3      	ldrb	r3, [r2, r3]
 8001d24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a0d      	ldr	r2, [pc, #52]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d2a:	fb03 f202 	mul.w	r2, r3, r2
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	e004      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d3c:	fb02 f303 	mul.w	r3, r2, r3
 8001d40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	613b      	str	r3, [r7, #16]
      break;
 8001d46:	e002      	b.n	8001d4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d4a:	613b      	str	r3, [r7, #16]
      break;
 8001d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d4e:	693b      	ldr	r3, [r7, #16]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	371c      	adds	r7, #28
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	007a1200 	.word	0x007a1200
 8001d64:	08004ac0 	.word	0x08004ac0
 8001d68:	08004ad0 	.word	0x08004ad0
 8001d6c:	003d0900 	.word	0x003d0900

08001d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d74:	4b02      	ldr	r3, [pc, #8]	@ (8001d80 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	20000000 	.word	0x20000000

08001d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d88:	f7ff fff2 	bl	8001d70 <HAL_RCC_GetHCLKFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	0a1b      	lsrs	r3, r3, #8
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	4903      	ldr	r1, [pc, #12]	@ (8001da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	08004ab8 	.word	0x08004ab8

08001dac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001db0:	f7ff ffde 	bl	8001d70 <HAL_RCC_GetHCLKFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	0adb      	lsrs	r3, r3, #11
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	4903      	ldr	r1, [pc, #12]	@ (8001dd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dc2:	5ccb      	ldrb	r3, [r1, r3]
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	08004ab8 	.word	0x08004ab8

08001dd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8001e08 <RCC_Delay+0x34>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0a      	ldr	r2, [pc, #40]	@ (8001e0c <RCC_Delay+0x38>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	0a5b      	lsrs	r3, r3, #9
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001df0:	bf00      	nop
  }
  while (Delay --);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1e5a      	subs	r2, r3, #1
 8001df6:	60fa      	str	r2, [r7, #12]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f9      	bne.n	8001df0 <RCC_Delay+0x1c>
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	10624dd3 	.word	0x10624dd3

08001e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e09c      	b.n	8001f5c <HAL_TIM_Base_Init+0x14c>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a4f      	ldr	r2, [pc, #316]	@ (8001f64 <HAL_TIM_Base_Init+0x154>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d00e      	beq.n	8001e4a <HAL_TIM_Base_Init+0x3a>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e34:	d009      	beq.n	8001e4a <HAL_TIM_Base_Init+0x3a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a4b      	ldr	r2, [pc, #300]	@ (8001f68 <HAL_TIM_Base_Init+0x158>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d004      	beq.n	8001e4a <HAL_TIM_Base_Init+0x3a>
 8001e40:	f240 1113 	movw	r1, #275	@ 0x113
 8001e44:	4849      	ldr	r0, [pc, #292]	@ (8001f6c <HAL_TIM_Base_Init+0x15c>)
 8001e46:	f7fe fc5f 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d014      	beq.n	8001e7c <HAL_TIM_Base_Init+0x6c>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b10      	cmp	r3, #16
 8001e58:	d010      	beq.n	8001e7c <HAL_TIM_Base_Init+0x6c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b20      	cmp	r3, #32
 8001e60:	d00c      	beq.n	8001e7c <HAL_TIM_Base_Init+0x6c>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b40      	cmp	r3, #64	@ 0x40
 8001e68:	d008      	beq.n	8001e7c <HAL_TIM_Base_Init+0x6c>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b60      	cmp	r3, #96	@ 0x60
 8001e70:	d004      	beq.n	8001e7c <HAL_TIM_Base_Init+0x6c>
 8001e72:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001e76:	483d      	ldr	r0, [pc, #244]	@ (8001f6c <HAL_TIM_Base_Init+0x15c>)
 8001e78:	f7fe fc46 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00e      	beq.n	8001ea2 <HAL_TIM_Base_Init+0x92>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e8c:	d009      	beq.n	8001ea2 <HAL_TIM_Base_Init+0x92>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e96:	d004      	beq.n	8001ea2 <HAL_TIM_Base_Init+0x92>
 8001e98:	f240 1115 	movw	r1, #277	@ 0x115
 8001e9c:	4833      	ldr	r0, [pc, #204]	@ (8001f6c <HAL_TIM_Base_Init+0x15c>)
 8001e9e:	f7fe fc33 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d004      	beq.n	8001eb4 <HAL_TIM_Base_Init+0xa4>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eb2:	d304      	bcc.n	8001ebe <HAL_TIM_Base_Init+0xae>
 8001eb4:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8001eb8:	482c      	ldr	r0, [pc, #176]	@ (8001f6c <HAL_TIM_Base_Init+0x15c>)
 8001eba:	f7fe fc25 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d008      	beq.n	8001ed8 <HAL_TIM_Base_Init+0xc8>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	2b80      	cmp	r3, #128	@ 0x80
 8001ecc:	d004      	beq.n	8001ed8 <HAL_TIM_Base_Init+0xc8>
 8001ece:	f240 1117 	movw	r1, #279	@ 0x117
 8001ed2:	4826      	ldr	r0, [pc, #152]	@ (8001f6c <HAL_TIM_Base_Init+0x15c>)
 8001ed4:	f7fe fc18 	bl	8000708 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d106      	bne.n	8001ef2 <HAL_TIM_Base_Init+0xe2>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7fe fc47 	bl	8000780 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3304      	adds	r3, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	4610      	mov	r0, r2
 8001f06:	f001 f99d 	bl	8003244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40012c00 	.word	0x40012c00
 8001f68:	40000400 	.word	0x40000400
 8001f6c:	080049f8 	.word	0x080049f8

08001f70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e09c      	b.n	80020bc <HAL_TIM_PWM_Init+0x14c>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a4f      	ldr	r2, [pc, #316]	@ (80020c4 <HAL_TIM_PWM_Init+0x154>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d00e      	beq.n	8001faa <HAL_TIM_PWM_Init+0x3a>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f94:	d009      	beq.n	8001faa <HAL_TIM_PWM_Init+0x3a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a4b      	ldr	r2, [pc, #300]	@ (80020c8 <HAL_TIM_PWM_Init+0x158>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d004      	beq.n	8001faa <HAL_TIM_PWM_Init+0x3a>
 8001fa0:	f240 512c 	movw	r1, #1324	@ 0x52c
 8001fa4:	4849      	ldr	r0, [pc, #292]	@ (80020cc <HAL_TIM_PWM_Init+0x15c>)
 8001fa6:	f7fe fbaf 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d014      	beq.n	8001fdc <HAL_TIM_PWM_Init+0x6c>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b10      	cmp	r3, #16
 8001fb8:	d010      	beq.n	8001fdc <HAL_TIM_PWM_Init+0x6c>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b20      	cmp	r3, #32
 8001fc0:	d00c      	beq.n	8001fdc <HAL_TIM_PWM_Init+0x6c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b40      	cmp	r3, #64	@ 0x40
 8001fc8:	d008      	beq.n	8001fdc <HAL_TIM_PWM_Init+0x6c>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2b60      	cmp	r3, #96	@ 0x60
 8001fd0:	d004      	beq.n	8001fdc <HAL_TIM_PWM_Init+0x6c>
 8001fd2:	f240 512d 	movw	r1, #1325	@ 0x52d
 8001fd6:	483d      	ldr	r0, [pc, #244]	@ (80020cc <HAL_TIM_PWM_Init+0x15c>)
 8001fd8:	f7fe fb96 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00e      	beq.n	8002002 <HAL_TIM_PWM_Init+0x92>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fec:	d009      	beq.n	8002002 <HAL_TIM_PWM_Init+0x92>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ff6:	d004      	beq.n	8002002 <HAL_TIM_PWM_Init+0x92>
 8001ff8:	f240 512e 	movw	r1, #1326	@ 0x52e
 8001ffc:	4833      	ldr	r0, [pc, #204]	@ (80020cc <HAL_TIM_PWM_Init+0x15c>)
 8001ffe:	f7fe fb83 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d004      	beq.n	8002014 <HAL_TIM_PWM_Init+0xa4>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002012:	d304      	bcc.n	800201e <HAL_TIM_PWM_Init+0xae>
 8002014:	f240 512f 	movw	r1, #1327	@ 0x52f
 8002018:	482c      	ldr	r0, [pc, #176]	@ (80020cc <HAL_TIM_PWM_Init+0x15c>)
 800201a:	f7fe fb75 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d008      	beq.n	8002038 <HAL_TIM_PWM_Init+0xc8>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b80      	cmp	r3, #128	@ 0x80
 800202c:	d004      	beq.n	8002038 <HAL_TIM_PWM_Init+0xc8>
 800202e:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 8002032:	4826      	ldr	r0, [pc, #152]	@ (80020cc <HAL_TIM_PWM_Init+0x15c>)
 8002034:	f7fe fb68 	bl	8000708 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d106      	bne.n	8002052 <HAL_TIM_PWM_Init+0xe2>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f83f 	bl	80020d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2202      	movs	r2, #2
 8002056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3304      	adds	r3, #4
 8002062:	4619      	mov	r1, r3
 8002064:	4610      	mov	r0, r2
 8002066:	f001 f8ed 	bl	8003244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40012c00 	.word	0x40012c00
 80020c8:	40000400 	.word	0x40000400
 80020cc:	080049f8 	.word	0x080049f8

080020d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr
	...

080020e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a64      	ldr	r2, [pc, #400]	@ (8002284 <HAL_TIM_PWM_Start+0x1a0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d10b      	bne.n	8002110 <HAL_TIM_PWM_Start+0x2c>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d02f      	beq.n	800215e <HAL_TIM_PWM_Start+0x7a>
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2b04      	cmp	r3, #4
 8002102:	d02c      	beq.n	800215e <HAL_TIM_PWM_Start+0x7a>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	2b08      	cmp	r3, #8
 8002108:	d029      	beq.n	800215e <HAL_TIM_PWM_Start+0x7a>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b0c      	cmp	r3, #12
 800210e:	d026      	beq.n	800215e <HAL_TIM_PWM_Start+0x7a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002118:	d10b      	bne.n	8002132 <HAL_TIM_PWM_Start+0x4e>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01e      	beq.n	800215e <HAL_TIM_PWM_Start+0x7a>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	2b04      	cmp	r3, #4
 8002124:	d01b      	beq.n	800215e <HAL_TIM_PWM_Start+0x7a>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b08      	cmp	r3, #8
 800212a:	d018      	beq.n	800215e <HAL_TIM_PWM_Start+0x7a>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2b0c      	cmp	r3, #12
 8002130:	d015      	beq.n	800215e <HAL_TIM_PWM_Start+0x7a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a54      	ldr	r2, [pc, #336]	@ (8002288 <HAL_TIM_PWM_Start+0x1a4>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d10b      	bne.n	8002154 <HAL_TIM_PWM_Start+0x70>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00d      	beq.n	800215e <HAL_TIM_PWM_Start+0x7a>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b04      	cmp	r3, #4
 8002146:	d00a      	beq.n	800215e <HAL_TIM_PWM_Start+0x7a>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2b08      	cmp	r3, #8
 800214c:	d007      	beq.n	800215e <HAL_TIM_PWM_Start+0x7a>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2b0c      	cmp	r3, #12
 8002152:	d004      	beq.n	800215e <HAL_TIM_PWM_Start+0x7a>
 8002154:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 8002158:	484c      	ldr	r0, [pc, #304]	@ (800228c <HAL_TIM_PWM_Start+0x1a8>)
 800215a:	f7fe fad5 	bl	8000708 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d109      	bne.n	8002178 <HAL_TIM_PWM_Start+0x94>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b01      	cmp	r3, #1
 800216e:	bf14      	ite	ne
 8002170:	2301      	movne	r3, #1
 8002172:	2300      	moveq	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	e022      	b.n	80021be <HAL_TIM_PWM_Start+0xda>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2b04      	cmp	r3, #4
 800217c:	d109      	bne.n	8002192 <HAL_TIM_PWM_Start+0xae>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b01      	cmp	r3, #1
 8002188:	bf14      	ite	ne
 800218a:	2301      	movne	r3, #1
 800218c:	2300      	moveq	r3, #0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	e015      	b.n	80021be <HAL_TIM_PWM_Start+0xda>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b08      	cmp	r3, #8
 8002196:	d109      	bne.n	80021ac <HAL_TIM_PWM_Start+0xc8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	bf14      	ite	ne
 80021a4:	2301      	movne	r3, #1
 80021a6:	2300      	moveq	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	e008      	b.n	80021be <HAL_TIM_PWM_Start+0xda>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	bf14      	ite	ne
 80021b8:	2301      	movne	r3, #1
 80021ba:	2300      	moveq	r3, #0
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_TIM_PWM_Start+0xe2>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e059      	b.n	800227a <HAL_TIM_PWM_Start+0x196>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d104      	bne.n	80021d6 <HAL_TIM_PWM_Start+0xf2>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021d4:	e013      	b.n	80021fe <HAL_TIM_PWM_Start+0x11a>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d104      	bne.n	80021e6 <HAL_TIM_PWM_Start+0x102>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2202      	movs	r2, #2
 80021e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021e4:	e00b      	b.n	80021fe <HAL_TIM_PWM_Start+0x11a>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d104      	bne.n	80021f6 <HAL_TIM_PWM_Start+0x112>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2202      	movs	r2, #2
 80021f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021f4:	e003      	b.n	80021fe <HAL_TIM_PWM_Start+0x11a>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2202      	movs	r2, #2
 80021fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2201      	movs	r2, #1
 8002204:	6839      	ldr	r1, [r7, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f001 fb2c 	bl	8003864 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a1c      	ldr	r2, [pc, #112]	@ (8002284 <HAL_TIM_PWM_Start+0x1a0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d107      	bne.n	8002226 <HAL_TIM_PWM_Start+0x142>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002224:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a16      	ldr	r2, [pc, #88]	@ (8002284 <HAL_TIM_PWM_Start+0x1a0>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d009      	beq.n	8002244 <HAL_TIM_PWM_Start+0x160>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002238:	d004      	beq.n	8002244 <HAL_TIM_PWM_Start+0x160>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a12      	ldr	r2, [pc, #72]	@ (8002288 <HAL_TIM_PWM_Start+0x1a4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d111      	bne.n	8002268 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b06      	cmp	r3, #6
 8002254:	d010      	beq.n	8002278 <HAL_TIM_PWM_Start+0x194>
    {
      __HAL_TIM_ENABLE(htim);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0201 	orr.w	r2, r2, #1
 8002264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002266:	e007      	b.n	8002278 <HAL_TIM_PWM_Start+0x194>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40012c00 	.word	0x40012c00
 8002288:	40000400 	.word	0x40000400
 800228c:	080049f8 	.word	0x080049f8

08002290 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e17e      	b.n	80025a2 <HAL_TIM_Encoder_Init+0x312>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a77      	ldr	r2, [pc, #476]	@ (8002488 <HAL_TIM_Encoder_Init+0x1f8>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d00e      	beq.n	80022cc <HAL_TIM_Encoder_Init+0x3c>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022b6:	d009      	beq.n	80022cc <HAL_TIM_Encoder_Init+0x3c>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a73      	ldr	r2, [pc, #460]	@ (800248c <HAL_TIM_Encoder_Init+0x1fc>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d004      	beq.n	80022cc <HAL_TIM_Encoder_Init+0x3c>
 80022c2:	f640 31d8 	movw	r1, #3032	@ 0xbd8
 80022c6:	4872      	ldr	r0, [pc, #456]	@ (8002490 <HAL_TIM_Encoder_Init+0x200>)
 80022c8:	f7fe fa1e 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d014      	beq.n	80022fe <HAL_TIM_Encoder_Init+0x6e>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b10      	cmp	r3, #16
 80022da:	d010      	beq.n	80022fe <HAL_TIM_Encoder_Init+0x6e>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	d00c      	beq.n	80022fe <HAL_TIM_Encoder_Init+0x6e>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b40      	cmp	r3, #64	@ 0x40
 80022ea:	d008      	beq.n	80022fe <HAL_TIM_Encoder_Init+0x6e>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	2b60      	cmp	r3, #96	@ 0x60
 80022f2:	d004      	beq.n	80022fe <HAL_TIM_Encoder_Init+0x6e>
 80022f4:	f640 31d9 	movw	r1, #3033	@ 0xbd9
 80022f8:	4865      	ldr	r0, [pc, #404]	@ (8002490 <HAL_TIM_Encoder_Init+0x200>)
 80022fa:	f7fe fa05 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00e      	beq.n	8002324 <HAL_TIM_Encoder_Init+0x94>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800230e:	d009      	beq.n	8002324 <HAL_TIM_Encoder_Init+0x94>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002318:	d004      	beq.n	8002324 <HAL_TIM_Encoder_Init+0x94>
 800231a:	f640 31da 	movw	r1, #3034	@ 0xbda
 800231e:	485c      	ldr	r0, [pc, #368]	@ (8002490 <HAL_TIM_Encoder_Init+0x200>)
 8002320:	f7fe f9f2 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d008      	beq.n	800233e <HAL_TIM_Encoder_Init+0xae>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	2b80      	cmp	r3, #128	@ 0x80
 8002332:	d004      	beq.n	800233e <HAL_TIM_Encoder_Init+0xae>
 8002334:	f640 31db 	movw	r1, #3035	@ 0xbdb
 8002338:	4855      	ldr	r0, [pc, #340]	@ (8002490 <HAL_TIM_Encoder_Init+0x200>)
 800233a:	f7fe f9e5 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d00c      	beq.n	8002360 <HAL_TIM_Encoder_Init+0xd0>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d008      	beq.n	8002360 <HAL_TIM_Encoder_Init+0xd0>
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b03      	cmp	r3, #3
 8002354:	d004      	beq.n	8002360 <HAL_TIM_Encoder_Init+0xd0>
 8002356:	f640 31dc 	movw	r1, #3036	@ 0xbdc
 800235a:	484d      	ldr	r0, [pc, #308]	@ (8002490 <HAL_TIM_Encoder_Init+0x200>)
 800235c:	f7fe f9d4 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d00c      	beq.n	8002382 <HAL_TIM_Encoder_Init+0xf2>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d008      	beq.n	8002382 <HAL_TIM_Encoder_Init+0xf2>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d004      	beq.n	8002382 <HAL_TIM_Encoder_Init+0xf2>
 8002378:	f640 31dd 	movw	r1, #3037	@ 0xbdd
 800237c:	4844      	ldr	r0, [pc, #272]	@ (8002490 <HAL_TIM_Encoder_Init+0x200>)
 800237e:	f7fe f9c3 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d00c      	beq.n	80023a4 <HAL_TIM_Encoder_Init+0x114>
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d008      	beq.n	80023a4 <HAL_TIM_Encoder_Init+0x114>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b03      	cmp	r3, #3
 8002398:	d004      	beq.n	80023a4 <HAL_TIM_Encoder_Init+0x114>
 800239a:	f640 31de 	movw	r1, #3038	@ 0xbde
 800239e:	483c      	ldr	r0, [pc, #240]	@ (8002490 <HAL_TIM_Encoder_Init+0x200>)
 80023a0:	f7fe f9b2 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_TIM_Encoder_Init+0x12e>
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d004      	beq.n	80023be <HAL_TIM_Encoder_Init+0x12e>
 80023b4:	f640 31df 	movw	r1, #3039	@ 0xbdf
 80023b8:	4835      	ldr	r0, [pc, #212]	@ (8002490 <HAL_TIM_Encoder_Init+0x200>)
 80023ba:	f7fe f9a5 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d008      	beq.n	80023d8 <HAL_TIM_Encoder_Init+0x148>
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d004      	beq.n	80023d8 <HAL_TIM_Encoder_Init+0x148>
 80023ce:	f44f 613e 	mov.w	r1, #3040	@ 0xbe0
 80023d2:	482f      	ldr	r0, [pc, #188]	@ (8002490 <HAL_TIM_Encoder_Init+0x200>)
 80023d4:	f7fe f998 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d010      	beq.n	8002402 <HAL_TIM_Encoder_Init+0x172>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d00c      	beq.n	8002402 <HAL_TIM_Encoder_Init+0x172>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d008      	beq.n	8002402 <HAL_TIM_Encoder_Init+0x172>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	2b0c      	cmp	r3, #12
 80023f6:	d004      	beq.n	8002402 <HAL_TIM_Encoder_Init+0x172>
 80023f8:	f640 31e1 	movw	r1, #3041	@ 0xbe1
 80023fc:	4824      	ldr	r0, [pc, #144]	@ (8002490 <HAL_TIM_Encoder_Init+0x200>)
 80023fe:	f7fe f983 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d010      	beq.n	800242c <HAL_TIM_Encoder_Init+0x19c>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	2b04      	cmp	r3, #4
 8002410:	d00c      	beq.n	800242c <HAL_TIM_Encoder_Init+0x19c>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	2b08      	cmp	r3, #8
 8002418:	d008      	beq.n	800242c <HAL_TIM_Encoder_Init+0x19c>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	2b0c      	cmp	r3, #12
 8002420:	d004      	beq.n	800242c <HAL_TIM_Encoder_Init+0x19c>
 8002422:	f640 31e2 	movw	r1, #3042	@ 0xbe2
 8002426:	481a      	ldr	r0, [pc, #104]	@ (8002490 <HAL_TIM_Encoder_Init+0x200>)
 8002428:	f7fe f96e 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	2b0f      	cmp	r3, #15
 8002432:	d904      	bls.n	800243e <HAL_TIM_Encoder_Init+0x1ae>
 8002434:	f640 31e3 	movw	r1, #3043	@ 0xbe3
 8002438:	4815      	ldr	r0, [pc, #84]	@ (8002490 <HAL_TIM_Encoder_Init+0x200>)
 800243a:	f7fe f965 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	2b0f      	cmp	r3, #15
 8002444:	d904      	bls.n	8002450 <HAL_TIM_Encoder_Init+0x1c0>
 8002446:	f640 31e4 	movw	r1, #3044	@ 0xbe4
 800244a:	4811      	ldr	r0, [pc, #68]	@ (8002490 <HAL_TIM_Encoder_Init+0x200>)
 800244c:	f7fe f95c 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d004      	beq.n	8002462 <HAL_TIM_Encoder_Init+0x1d2>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002460:	d304      	bcc.n	800246c <HAL_TIM_Encoder_Init+0x1dc>
 8002462:	f640 31e5 	movw	r1, #3045	@ 0xbe5
 8002466:	480a      	ldr	r0, [pc, #40]	@ (8002490 <HAL_TIM_Encoder_Init+0x200>)
 8002468:	f7fe f94e 	bl	8000708 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10d      	bne.n	8002494 <HAL_TIM_Encoder_Init+0x204>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7fe f9a1 	bl	80007c8 <HAL_TIM_Encoder_MspInit>
 8002486:	e005      	b.n	8002494 <HAL_TIM_Encoder_Init+0x204>
 8002488:	40012c00 	.word	0x40012c00
 800248c:	40000400 	.word	0x40000400
 8002490:	080049f8 	.word	0x080049f8
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2202      	movs	r2, #2
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024aa:	f023 0307 	bic.w	r3, r3, #7
 80024ae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3304      	adds	r3, #4
 80024b8:	4619      	mov	r1, r3
 80024ba:	4610      	mov	r0, r2
 80024bc:	f000 fec2 	bl	8003244 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	4313      	orrs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024e8:	f023 0303 	bic.w	r3, r3, #3
 80024ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	4313      	orrs	r3, r2
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002506:	f023 030c 	bic.w	r3, r3, #12
 800250a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002512:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	68da      	ldr	r2, [r3, #12]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	4313      	orrs	r3, r2
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	011a      	lsls	r2, r3, #4
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	031b      	lsls	r3, r3, #12
 8002536:	4313      	orrs	r3, r2
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002544:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	4313      	orrs	r3, r2
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop

080025ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80025bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80025c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80025d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a45      	ldr	r2, [pc, #276]	@ (80026f0 <HAL_TIM_Encoder_Start+0x144>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d00e      	beq.n	80025fe <HAL_TIM_Encoder_Start+0x52>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025e8:	d009      	beq.n	80025fe <HAL_TIM_Encoder_Start+0x52>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a41      	ldr	r2, [pc, #260]	@ (80026f4 <HAL_TIM_Encoder_Start+0x148>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d004      	beq.n	80025fe <HAL_TIM_Encoder_Start+0x52>
 80025f4:	f640 4195 	movw	r1, #3221	@ 0xc95
 80025f8:	483f      	ldr	r0, [pc, #252]	@ (80026f8 <HAL_TIM_Encoder_Start+0x14c>)
 80025fa:	f7fe f885 	bl	8000708 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d110      	bne.n	8002626 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d102      	bne.n	8002610 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800260a:	7b7b      	ldrb	r3, [r7, #13]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d001      	beq.n	8002614 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e069      	b.n	80026e8 <HAL_TIM_Encoder_Start+0x13c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002624:	e031      	b.n	800268a <HAL_TIM_Encoder_Start+0xde>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b04      	cmp	r3, #4
 800262a:	d110      	bne.n	800264e <HAL_TIM_Encoder_Start+0xa2>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800262c:	7bbb      	ldrb	r3, [r7, #14]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d102      	bne.n	8002638 <HAL_TIM_Encoder_Start+0x8c>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002632:	7b3b      	ldrb	r3, [r7, #12]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d001      	beq.n	800263c <HAL_TIM_Encoder_Start+0x90>
    {
      return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e055      	b.n	80026e8 <HAL_TIM_Encoder_Start+0x13c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800264c:	e01d      	b.n	800268a <HAL_TIM_Encoder_Start+0xde>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d108      	bne.n	8002666 <HAL_TIM_Encoder_Start+0xba>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002654:	7bbb      	ldrb	r3, [r7, #14]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d105      	bne.n	8002666 <HAL_TIM_Encoder_Start+0xba>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800265a:	7b7b      	ldrb	r3, [r7, #13]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d102      	bne.n	8002666 <HAL_TIM_Encoder_Start+0xba>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002660:	7b3b      	ldrb	r3, [r7, #12]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d001      	beq.n	800266a <HAL_TIM_Encoder_Start+0xbe>
    {
      return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e03e      	b.n	80026e8 <HAL_TIM_Encoder_Start+0x13c>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2202      	movs	r2, #2
 800266e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2202      	movs	r2, #2
 8002676:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2202      	movs	r2, #2
 800267e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2202      	movs	r2, #2
 8002686:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_TIM_Encoder_Start+0xec>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2b04      	cmp	r3, #4
 8002694:	d008      	beq.n	80026a8 <HAL_TIM_Encoder_Start+0xfc>
 8002696:	e00f      	b.n	80026b8 <HAL_TIM_Encoder_Start+0x10c>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2201      	movs	r2, #1
 800269e:	2100      	movs	r1, #0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f001 f8df 	bl	8003864 <TIM_CCxChannelCmd>
      break;
 80026a6:	e016      	b.n	80026d6 <HAL_TIM_Encoder_Start+0x12a>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2201      	movs	r2, #1
 80026ae:	2104      	movs	r1, #4
 80026b0:	4618      	mov	r0, r3
 80026b2:	f001 f8d7 	bl	8003864 <TIM_CCxChannelCmd>
      break;
 80026b6:	e00e      	b.n	80026d6 <HAL_TIM_Encoder_Start+0x12a>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2201      	movs	r2, #1
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f001 f8cf 	bl	8003864 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2201      	movs	r2, #1
 80026cc:	2104      	movs	r1, #4
 80026ce:	4618      	mov	r0, r3
 80026d0:	f001 f8c8 	bl	8003864 <TIM_CCxChannelCmd>
      break;
 80026d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0201 	orr.w	r2, r2, #1
 80026e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40012c00 	.word	0x40012c00
 80026f4:	40000400 	.word	0x40000400
 80026f8:	080049f8 	.word	0x080049f8

080026fc <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a52      	ldr	r2, [pc, #328]	@ (8002854 <HAL_TIM_Encoder_Stop+0x158>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d00e      	beq.n	800272e <HAL_TIM_Encoder_Stop+0x32>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002718:	d009      	beq.n	800272e <HAL_TIM_Encoder_Stop+0x32>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a4e      	ldr	r2, [pc, #312]	@ (8002858 <HAL_TIM_Encoder_Stop+0x15c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d004      	beq.n	800272e <HAL_TIM_Encoder_Stop+0x32>
 8002724:	f640 41ee 	movw	r1, #3310	@ 0xcee
 8002728:	484c      	ldr	r0, [pc, #304]	@ (800285c <HAL_TIM_Encoder_Stop+0x160>)
 800272a:	f7fd ffed 	bl	8000708 <assert_failed>

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_TIM_Encoder_Stop+0x40>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2b04      	cmp	r3, #4
 8002738:	d008      	beq.n	800274c <HAL_TIM_Encoder_Stop+0x50>
 800273a:	e00f      	b.n	800275c <HAL_TIM_Encoder_Stop+0x60>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2200      	movs	r2, #0
 8002742:	2100      	movs	r1, #0
 8002744:	4618      	mov	r0, r3
 8002746:	f001 f88d 	bl	8003864 <TIM_CCxChannelCmd>
      break;
 800274a:	e016      	b.n	800277a <HAL_TIM_Encoder_Stop+0x7e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2200      	movs	r2, #0
 8002752:	2104      	movs	r1, #4
 8002754:	4618      	mov	r0, r3
 8002756:	f001 f885 	bl	8003864 <TIM_CCxChannelCmd>
      break;
 800275a:	e00e      	b.n	800277a <HAL_TIM_Encoder_Stop+0x7e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2200      	movs	r2, #0
 8002762:	2100      	movs	r1, #0
 8002764:	4618      	mov	r0, r3
 8002766:	f001 f87d 	bl	8003864 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2200      	movs	r2, #0
 8002770:	2104      	movs	r1, #4
 8002772:	4618      	mov	r0, r3
 8002774:	f001 f876 	bl	8003864 <TIM_CCxChannelCmd>
      break;
 8002778:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6a1a      	ldr	r2, [r3, #32]
 8002780:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002784:	4013      	ands	r3, r2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10f      	bne.n	80027aa <HAL_TIM_Encoder_Stop+0xae>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6a1a      	ldr	r2, [r3, #32]
 8002790:	f240 4344 	movw	r3, #1092	@ 0x444
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d107      	bne.n	80027aa <HAL_TIM_Encoder_Stop+0xae>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0201 	bic.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <HAL_TIM_Encoder_Stop+0xba>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d138      	bne.n	8002828 <HAL_TIM_Encoder_Stop+0x12c>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d104      	bne.n	80027c6 <HAL_TIM_Encoder_Stop+0xca>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027c4:	e013      	b.n	80027ee <HAL_TIM_Encoder_Stop+0xf2>
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d104      	bne.n	80027d6 <HAL_TIM_Encoder_Stop+0xda>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027d4:	e00b      	b.n	80027ee <HAL_TIM_Encoder_Stop+0xf2>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d104      	bne.n	80027e6 <HAL_TIM_Encoder_Stop+0xea>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027e4:	e003      	b.n	80027ee <HAL_TIM_Encoder_Stop+0xf2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d104      	bne.n	80027fe <HAL_TIM_Encoder_Stop+0x102>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027fc:	e024      	b.n	8002848 <HAL_TIM_Encoder_Stop+0x14c>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b04      	cmp	r3, #4
 8002802:	d104      	bne.n	800280e <HAL_TIM_Encoder_Stop+0x112>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800280c:	e01c      	b.n	8002848 <HAL_TIM_Encoder_Stop+0x14c>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b08      	cmp	r3, #8
 8002812:	d104      	bne.n	800281e <HAL_TIM_Encoder_Stop+0x122>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800281c:	e014      	b.n	8002848 <HAL_TIM_Encoder_Stop+0x14c>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002826:	e00f      	b.n	8002848 <HAL_TIM_Encoder_Stop+0x14c>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40012c00 	.word	0x40012c00
 8002858:	40000400 	.word	0x40000400
 800285c:	080049f8 	.word	0x080049f8

08002860 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d020      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01b      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0202 	mvn.w	r2, #2
 8002894:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fcae 	bl	800320c <HAL_TIM_IC_CaptureCallback>
 80028b0:	e005      	b.n	80028be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fca1 	bl	80031fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 fcb0 	bl	800321e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d020      	beq.n	8002910 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01b      	beq.n	8002910 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0204 	mvn.w	r2, #4
 80028e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2202      	movs	r2, #2
 80028e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 fc88 	bl	800320c <HAL_TIM_IC_CaptureCallback>
 80028fc:	e005      	b.n	800290a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fc7b 	bl	80031fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 fc8a 	bl	800321e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d020      	beq.n	800295c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d01b      	beq.n	800295c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0208 	mvn.w	r2, #8
 800292c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2204      	movs	r2, #4
 8002932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 fc62 	bl	800320c <HAL_TIM_IC_CaptureCallback>
 8002948:	e005      	b.n	8002956 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fc55 	bl	80031fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 fc64 	bl	800321e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	2b00      	cmp	r3, #0
 8002964:	d020      	beq.n	80029a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b00      	cmp	r3, #0
 800296e:	d01b      	beq.n	80029a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0210 	mvn.w	r2, #16
 8002978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2208      	movs	r2, #8
 800297e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 fc3c 	bl	800320c <HAL_TIM_IC_CaptureCallback>
 8002994:	e005      	b.n	80029a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 fc2f 	bl	80031fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 fc3e 	bl	800321e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00c      	beq.n	80029cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f06f 0201 	mvn.w	r2, #1
 80029c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fc0e 	bl	80031e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00c      	beq.n	80029f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d007      	beq.n	80029f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80029e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f001 f82f 	bl	8003a4e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00c      	beq.n	8002a14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fc0e 	bl	8003230 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00c      	beq.n	8002a38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f003 0320 	and.w	r3, r3, #32
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d007      	beq.n	8002a38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f06f 0220 	mvn.w	r2, #32
 8002a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f001 f802 	bl	8003a3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a38:	bf00      	nop
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d010      	beq.n	8002a78 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d00d      	beq.n	8002a78 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d00a      	beq.n	8002a78 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b0c      	cmp	r3, #12
 8002a66:	d007      	beq.n	8002a78 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b3c      	cmp	r3, #60	@ 0x3c
 8002a6c:	d004      	beq.n	8002a78 <HAL_TIM_PWM_ConfigChannel+0x38>
 8002a6e:	f241 0181 	movw	r1, #4225	@ 0x1081
 8002a72:	489a      	ldr	r0, [pc, #616]	@ (8002cdc <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8002a74:	f7fd fe48 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b60      	cmp	r3, #96	@ 0x60
 8002a7e:	d008      	beq.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x52>
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b70      	cmp	r3, #112	@ 0x70
 8002a86:	d004      	beq.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x52>
 8002a88:	f241 0182 	movw	r1, #4226	@ 0x1082
 8002a8c:	4893      	ldr	r0, [pc, #588]	@ (8002cdc <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8002a8e:	f7fd fe3b 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d008      	beq.n	8002aac <HAL_TIM_PWM_ConfigChannel+0x6c>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d004      	beq.n	8002aac <HAL_TIM_PWM_ConfigChannel+0x6c>
 8002aa2:	f241 0183 	movw	r1, #4227	@ 0x1083
 8002aa6:	488d      	ldr	r0, [pc, #564]	@ (8002cdc <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8002aa8:	f7fd fe2e 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d008      	beq.n	8002ac6 <HAL_TIM_PWM_ConfigChannel+0x86>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d004      	beq.n	8002ac6 <HAL_TIM_PWM_ConfigChannel+0x86>
 8002abc:	f241 0184 	movw	r1, #4228	@ 0x1084
 8002ac0:	4886      	ldr	r0, [pc, #536]	@ (8002cdc <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8002ac2:	f7fd fe21 	bl	8000708 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_TIM_PWM_ConfigChannel+0x94>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e0ff      	b.n	8002cd4 <HAL_TIM_PWM_ConfigChannel+0x294>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b0c      	cmp	r3, #12
 8002ae0:	f200 80f0 	bhi.w	8002cc4 <HAL_TIM_PWM_ConfigChannel+0x284>
 8002ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8002aec <HAL_TIM_PWM_ConfigChannel+0xac>)
 8002ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aea:	bf00      	nop
 8002aec:	08002b21 	.word	0x08002b21
 8002af0:	08002cc5 	.word	0x08002cc5
 8002af4:	08002cc5 	.word	0x08002cc5
 8002af8:	08002cc5 	.word	0x08002cc5
 8002afc:	08002b89 	.word	0x08002b89
 8002b00:	08002cc5 	.word	0x08002cc5
 8002b04:	08002cc5 	.word	0x08002cc5
 8002b08:	08002cc5 	.word	0x08002cc5
 8002b0c:	08002bf3 	.word	0x08002bf3
 8002b10:	08002cc5 	.word	0x08002cc5
 8002b14:	08002cc5 	.word	0x08002cc5
 8002b18:	08002cc5 	.word	0x08002cc5
 8002b1c:	08002c5b 	.word	0x08002c5b
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a6e      	ldr	r2, [pc, #440]	@ (8002ce0 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00e      	beq.n	8002b48 <HAL_TIM_PWM_ConfigChannel+0x108>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b32:	d009      	beq.n	8002b48 <HAL_TIM_PWM_ConfigChannel+0x108>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a6a      	ldr	r2, [pc, #424]	@ (8002ce4 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d004      	beq.n	8002b48 <HAL_TIM_PWM_ConfigChannel+0x108>
 8002b3e:	f241 018e 	movw	r1, #4238	@ 0x108e
 8002b42:	4866      	ldr	r0, [pc, #408]	@ (8002cdc <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8002b44:	f7fd fde0 	bl	8000708 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fbdc 	bl	800330c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699a      	ldr	r2, [r3, #24]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0208 	orr.w	r2, r2, #8
 8002b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699a      	ldr	r2, [r3, #24]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0204 	bic.w	r2, r2, #4
 8002b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6999      	ldr	r1, [r3, #24]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	619a      	str	r2, [r3, #24]
      break;
 8002b86:	e0a0      	b.n	8002cca <HAL_TIM_PWM_ConfigChannel+0x28a>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a54      	ldr	r2, [pc, #336]	@ (8002ce0 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00e      	beq.n	8002bb0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b9a:	d009      	beq.n	8002bb0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a50      	ldr	r2, [pc, #320]	@ (8002ce4 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002ba6:	f241 019f 	movw	r1, #4255	@ 0x109f
 8002baa:	484c      	ldr	r0, [pc, #304]	@ (8002cdc <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8002bac:	f7fd fdac 	bl	8000708 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 fc38 	bl	800342c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699a      	ldr	r2, [r3, #24]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6999      	ldr	r1, [r3, #24]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	021a      	lsls	r2, r3, #8
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	619a      	str	r2, [r3, #24]
      break;
 8002bf0:	e06b      	b.n	8002cca <HAL_TIM_PWM_ConfigChannel+0x28a>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a3a      	ldr	r2, [pc, #232]	@ (8002ce0 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00e      	beq.n	8002c1a <HAL_TIM_PWM_ConfigChannel+0x1da>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c04:	d009      	beq.n	8002c1a <HAL_TIM_PWM_ConfigChannel+0x1da>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a36      	ldr	r2, [pc, #216]	@ (8002ce4 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d004      	beq.n	8002c1a <HAL_TIM_PWM_ConfigChannel+0x1da>
 8002c10:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 8002c14:	4831      	ldr	r0, [pc, #196]	@ (8002cdc <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8002c16:	f7fd fd77 	bl	8000708 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68b9      	ldr	r1, [r7, #8]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fc97 	bl	8003554 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	69da      	ldr	r2, [r3, #28]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0208 	orr.w	r2, r2, #8
 8002c34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0204 	bic.w	r2, r2, #4
 8002c44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69d9      	ldr	r1, [r3, #28]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	61da      	str	r2, [r3, #28]
      break;
 8002c58:	e037      	b.n	8002cca <HAL_TIM_PWM_ConfigChannel+0x28a>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a20      	ldr	r2, [pc, #128]	@ (8002ce0 <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d00e      	beq.n	8002c82 <HAL_TIM_PWM_ConfigChannel+0x242>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c6c:	d009      	beq.n	8002c82 <HAL_TIM_PWM_ConfigChannel+0x242>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a1c      	ldr	r2, [pc, #112]	@ (8002ce4 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d004      	beq.n	8002c82 <HAL_TIM_PWM_ConfigChannel+0x242>
 8002c78:	f241 01c1 	movw	r1, #4289	@ 0x10c1
 8002c7c:	4817      	ldr	r0, [pc, #92]	@ (8002cdc <HAL_TIM_PWM_ConfigChannel+0x29c>)
 8002c7e:	f7fd fd43 	bl	8000708 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 fcf7 	bl	800367c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69da      	ldr	r2, [r3, #28]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	69da      	ldr	r2, [r3, #28]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	69d9      	ldr	r1, [r3, #28]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	021a      	lsls	r2, r3, #8
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	61da      	str	r2, [r3, #28]
      break;
 8002cc2:	e002      	b.n	8002cca <HAL_TIM_PWM_ConfigChannel+0x28a>
    }

    default:
      status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8002cc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	080049f8 	.word	0x080049f8
 8002ce0:	40012c00 	.word	0x40012c00
 8002ce4:	40000400 	.word	0x40000400

08002ce8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_TIM_ConfigClockSource+0x1c>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e266      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0x4ea>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d1c:	d029      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x8a>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b70      	cmp	r3, #112	@ 0x70
 8002d24:	d025      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x8a>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d2e:	d020      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x8a>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b40      	cmp	r3, #64	@ 0x40
 8002d36:	d01c      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x8a>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2b50      	cmp	r3, #80	@ 0x50
 8002d3e:	d018      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x8a>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b60      	cmp	r3, #96	@ 0x60
 8002d46:	d014      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x8a>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d010      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x8a>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b10      	cmp	r3, #16
 8002d56:	d00c      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x8a>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d008      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x8a>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b30      	cmp	r3, #48	@ 0x30
 8002d66:	d004      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0x8a>
 8002d68:	f241 41c2 	movw	r1, #5314	@ 0x14c2
 8002d6c:	4896      	ldr	r0, [pc, #600]	@ (8002fc8 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002d6e:	f7fd fccb 	bl	8000708 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d80:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d88:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d9a:	f000 80b3 	beq.w	8002f04 <HAL_TIM_ConfigClockSource+0x21c>
 8002d9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da2:	f200 8209 	bhi.w	80031b8 <HAL_TIM_ConfigClockSource+0x4d0>
 8002da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002daa:	d02d      	beq.n	8002e08 <HAL_TIM_ConfigClockSource+0x120>
 8002dac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002db0:	f200 8202 	bhi.w	80031b8 <HAL_TIM_ConfigClockSource+0x4d0>
 8002db4:	2b70      	cmp	r3, #112	@ 0x70
 8002db6:	d03f      	beq.n	8002e38 <HAL_TIM_ConfigClockSource+0x150>
 8002db8:	2b70      	cmp	r3, #112	@ 0x70
 8002dba:	f200 81fd 	bhi.w	80031b8 <HAL_TIM_ConfigClockSource+0x4d0>
 8002dbe:	2b60      	cmp	r3, #96	@ 0x60
 8002dc0:	f000 814f 	beq.w	8003062 <HAL_TIM_ConfigClockSource+0x37a>
 8002dc4:	2b60      	cmp	r3, #96	@ 0x60
 8002dc6:	f200 81f7 	bhi.w	80031b8 <HAL_TIM_ConfigClockSource+0x4d0>
 8002dca:	2b50      	cmp	r3, #80	@ 0x50
 8002dcc:	f000 8102 	beq.w	8002fd4 <HAL_TIM_ConfigClockSource+0x2ec>
 8002dd0:	2b50      	cmp	r3, #80	@ 0x50
 8002dd2:	f200 81f1 	bhi.w	80031b8 <HAL_TIM_ConfigClockSource+0x4d0>
 8002dd6:	2b40      	cmp	r3, #64	@ 0x40
 8002dd8:	f000 818a 	beq.w	80030f0 <HAL_TIM_ConfigClockSource+0x408>
 8002ddc:	2b40      	cmp	r3, #64	@ 0x40
 8002dde:	f200 81eb 	bhi.w	80031b8 <HAL_TIM_ConfigClockSource+0x4d0>
 8002de2:	2b30      	cmp	r3, #48	@ 0x30
 8002de4:	f000 81cb 	beq.w	800317e <HAL_TIM_ConfigClockSource+0x496>
 8002de8:	2b30      	cmp	r3, #48	@ 0x30
 8002dea:	f200 81e5 	bhi.w	80031b8 <HAL_TIM_ConfigClockSource+0x4d0>
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	f000 81c5 	beq.w	800317e <HAL_TIM_ConfigClockSource+0x496>
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	f200 81df 	bhi.w	80031b8 <HAL_TIM_ConfigClockSource+0x4d0>
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 81bf 	beq.w	800317e <HAL_TIM_ConfigClockSource+0x496>
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	f000 81bc 	beq.w	800317e <HAL_TIM_ConfigClockSource+0x496>
 8002e06:	e1d7      	b.n	80031b8 <HAL_TIM_ConfigClockSource+0x4d0>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a6f      	ldr	r2, [pc, #444]	@ (8002fcc <HAL_TIM_ConfigClockSource+0x2e4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	f000 81d5 	beq.w	80031be <HAL_TIM_ConfigClockSource+0x4d6>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e1c:	f000 81cf 	beq.w	80031be <HAL_TIM_ConfigClockSource+0x4d6>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a6a      	ldr	r2, [pc, #424]	@ (8002fd0 <HAL_TIM_ConfigClockSource+0x2e8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	f000 81c9 	beq.w	80031be <HAL_TIM_ConfigClockSource+0x4d6>
 8002e2c:	f241 41ce 	movw	r1, #5326	@ 0x14ce
 8002e30:	4865      	ldr	r0, [pc, #404]	@ (8002fc8 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002e32:	f7fd fc69 	bl	8000708 <assert_failed>
      break;
 8002e36:	e1c2      	b.n	80031be <HAL_TIM_ConfigClockSource+0x4d6>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a63      	ldr	r2, [pc, #396]	@ (8002fcc <HAL_TIM_ConfigClockSource+0x2e4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d00e      	beq.n	8002e60 <HAL_TIM_ConfigClockSource+0x178>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e4a:	d009      	beq.n	8002e60 <HAL_TIM_ConfigClockSource+0x178>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a5f      	ldr	r2, [pc, #380]	@ (8002fd0 <HAL_TIM_ConfigClockSource+0x2e8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d004      	beq.n	8002e60 <HAL_TIM_ConfigClockSource+0x178>
 8002e56:	f241 41d5 	movw	r1, #5333	@ 0x14d5
 8002e5a:	485b      	ldr	r0, [pc, #364]	@ (8002fc8 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002e5c:	f7fd fc54 	bl	8000708 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d013      	beq.n	8002e90 <HAL_TIM_ConfigClockSource+0x1a8>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e70:	d00e      	beq.n	8002e90 <HAL_TIM_ConfigClockSource+0x1a8>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e7a:	d009      	beq.n	8002e90 <HAL_TIM_ConfigClockSource+0x1a8>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e84:	d004      	beq.n	8002e90 <HAL_TIM_ConfigClockSource+0x1a8>
 8002e86:	f241 41d8 	movw	r1, #5336	@ 0x14d8
 8002e8a:	484f      	ldr	r0, [pc, #316]	@ (8002fc8 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002e8c:	f7fd fc3c 	bl	8000708 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e98:	d014      	beq.n	8002ec4 <HAL_TIM_ConfigClockSource+0x1dc>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d010      	beq.n	8002ec4 <HAL_TIM_ConfigClockSource+0x1dc>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_TIM_ConfigClockSource+0x1dc>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d008      	beq.n	8002ec4 <HAL_TIM_ConfigClockSource+0x1dc>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b0a      	cmp	r3, #10
 8002eb8:	d004      	beq.n	8002ec4 <HAL_TIM_ConfigClockSource+0x1dc>
 8002eba:	f241 41d9 	movw	r1, #5337	@ 0x14d9
 8002ebe:	4842      	ldr	r0, [pc, #264]	@ (8002fc8 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002ec0:	f7fd fc22 	bl	8000708 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b0f      	cmp	r3, #15
 8002eca:	d904      	bls.n	8002ed6 <HAL_TIM_ConfigClockSource+0x1ee>
 8002ecc:	f241 41da 	movw	r1, #5338	@ 0x14da
 8002ed0:	483d      	ldr	r0, [pc, #244]	@ (8002fc8 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002ed2:	f7fd fc19 	bl	8000708 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ee6:	f000 fc9e 	bl	8003826 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ef8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	609a      	str	r2, [r3, #8]
      break;
 8002f02:	e15d      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x4d8>
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a30      	ldr	r2, [pc, #192]	@ (8002fcc <HAL_TIM_ConfigClockSource+0x2e4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00e      	beq.n	8002f2c <HAL_TIM_ConfigClockSource+0x244>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f16:	d009      	beq.n	8002f2c <HAL_TIM_ConfigClockSource+0x244>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a2c      	ldr	r2, [pc, #176]	@ (8002fd0 <HAL_TIM_ConfigClockSource+0x2e8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d004      	beq.n	8002f2c <HAL_TIM_ConfigClockSource+0x244>
 8002f22:	f241 41ed 	movw	r1, #5357	@ 0x14ed
 8002f26:	4828      	ldr	r0, [pc, #160]	@ (8002fc8 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002f28:	f7fd fbee 	bl	8000708 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d013      	beq.n	8002f5c <HAL_TIM_ConfigClockSource+0x274>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f3c:	d00e      	beq.n	8002f5c <HAL_TIM_ConfigClockSource+0x274>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f46:	d009      	beq.n	8002f5c <HAL_TIM_ConfigClockSource+0x274>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f50:	d004      	beq.n	8002f5c <HAL_TIM_ConfigClockSource+0x274>
 8002f52:	f241 41f0 	movw	r1, #5360	@ 0x14f0
 8002f56:	481c      	ldr	r0, [pc, #112]	@ (8002fc8 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002f58:	f7fd fbd6 	bl	8000708 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f64:	d014      	beq.n	8002f90 <HAL_TIM_ConfigClockSource+0x2a8>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d010      	beq.n	8002f90 <HAL_TIM_ConfigClockSource+0x2a8>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00c      	beq.n	8002f90 <HAL_TIM_ConfigClockSource+0x2a8>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d008      	beq.n	8002f90 <HAL_TIM_ConfigClockSource+0x2a8>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b0a      	cmp	r3, #10
 8002f84:	d004      	beq.n	8002f90 <HAL_TIM_ConfigClockSource+0x2a8>
 8002f86:	f241 41f1 	movw	r1, #5361	@ 0x14f1
 8002f8a:	480f      	ldr	r0, [pc, #60]	@ (8002fc8 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002f8c:	f7fd fbbc 	bl	8000708 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	2b0f      	cmp	r3, #15
 8002f96:	d904      	bls.n	8002fa2 <HAL_TIM_ConfigClockSource+0x2ba>
 8002f98:	f241 41f2 	movw	r1, #5362	@ 0x14f2
 8002f9c:	480a      	ldr	r0, [pc, #40]	@ (8002fc8 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002f9e:	f7fd fbb3 	bl	8000708 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fb2:	f000 fc38 	bl	8003826 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fc4:	609a      	str	r2, [r3, #8]
      break;
 8002fc6:	e0fb      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x4d8>
 8002fc8:	080049f8 	.word	0x080049f8
 8002fcc:	40012c00 	.word	0x40012c00
 8002fd0:	40000400 	.word	0x40000400
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a80      	ldr	r2, [pc, #512]	@ (80031dc <HAL_TIM_ConfigClockSource+0x4f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d00e      	beq.n	8002ffc <HAL_TIM_ConfigClockSource+0x314>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe6:	d009      	beq.n	8002ffc <HAL_TIM_ConfigClockSource+0x314>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a7c      	ldr	r2, [pc, #496]	@ (80031e0 <HAL_TIM_ConfigClockSource+0x4f8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d004      	beq.n	8002ffc <HAL_TIM_ConfigClockSource+0x314>
 8002ff2:	f241 5101 	movw	r1, #5377	@ 0x1501
 8002ff6:	487b      	ldr	r0, [pc, #492]	@ (80031e4 <HAL_TIM_ConfigClockSource+0x4fc>)
 8002ff8:	f7fd fb86 	bl	8000708 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003004:	d014      	beq.n	8003030 <HAL_TIM_ConfigClockSource+0x348>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d010      	beq.n	8003030 <HAL_TIM_ConfigClockSource+0x348>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00c      	beq.n	8003030 <HAL_TIM_ConfigClockSource+0x348>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d008      	beq.n	8003030 <HAL_TIM_ConfigClockSource+0x348>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2b0a      	cmp	r3, #10
 8003024:	d004      	beq.n	8003030 <HAL_TIM_ConfigClockSource+0x348>
 8003026:	f241 5104 	movw	r1, #5380	@ 0x1504
 800302a:	486e      	ldr	r0, [pc, #440]	@ (80031e4 <HAL_TIM_ConfigClockSource+0x4fc>)
 800302c:	f7fd fb6c 	bl	8000708 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	2b0f      	cmp	r3, #15
 8003036:	d904      	bls.n	8003042 <HAL_TIM_ConfigClockSource+0x35a>
 8003038:	f241 5105 	movw	r1, #5381	@ 0x1505
 800303c:	4869      	ldr	r0, [pc, #420]	@ (80031e4 <HAL_TIM_ConfigClockSource+0x4fc>)
 800303e:	f7fd fb63 	bl	8000708 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800304e:	461a      	mov	r2, r3
 8003050:	f000 fb72 	bl	8003738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2150      	movs	r1, #80	@ 0x50
 800305a:	4618      	mov	r0, r3
 800305c:	f000 fbc9 	bl	80037f2 <TIM_ITRx_SetConfig>
      break;
 8003060:	e0ae      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x4d8>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a5d      	ldr	r2, [pc, #372]	@ (80031dc <HAL_TIM_ConfigClockSource+0x4f4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d00e      	beq.n	800308a <HAL_TIM_ConfigClockSource+0x3a2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003074:	d009      	beq.n	800308a <HAL_TIM_ConfigClockSource+0x3a2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a59      	ldr	r2, [pc, #356]	@ (80031e0 <HAL_TIM_ConfigClockSource+0x4f8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d004      	beq.n	800308a <HAL_TIM_ConfigClockSource+0x3a2>
 8003080:	f241 5111 	movw	r1, #5393	@ 0x1511
 8003084:	4857      	ldr	r0, [pc, #348]	@ (80031e4 <HAL_TIM_ConfigClockSource+0x4fc>)
 8003086:	f7fd fb3f 	bl	8000708 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003092:	d014      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x3d6>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d010      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x3d6>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00c      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x3d6>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d008      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x3d6>
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b0a      	cmp	r3, #10
 80030b2:	d004      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x3d6>
 80030b4:	f241 5114 	movw	r1, #5396	@ 0x1514
 80030b8:	484a      	ldr	r0, [pc, #296]	@ (80031e4 <HAL_TIM_ConfigClockSource+0x4fc>)
 80030ba:	f7fd fb25 	bl	8000708 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2b0f      	cmp	r3, #15
 80030c4:	d904      	bls.n	80030d0 <HAL_TIM_ConfigClockSource+0x3e8>
 80030c6:	f241 5115 	movw	r1, #5397	@ 0x1515
 80030ca:	4846      	ldr	r0, [pc, #280]	@ (80031e4 <HAL_TIM_ConfigClockSource+0x4fc>)
 80030cc:	f7fd fb1c 	bl	8000708 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030dc:	461a      	mov	r2, r3
 80030de:	f000 fb59 	bl	8003794 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2160      	movs	r1, #96	@ 0x60
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fb82 	bl	80037f2 <TIM_ITRx_SetConfig>
      break;
 80030ee:	e067      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x4d8>
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a39      	ldr	r2, [pc, #228]	@ (80031dc <HAL_TIM_ConfigClockSource+0x4f4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00e      	beq.n	8003118 <HAL_TIM_ConfigClockSource+0x430>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003102:	d009      	beq.n	8003118 <HAL_TIM_ConfigClockSource+0x430>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a35      	ldr	r2, [pc, #212]	@ (80031e0 <HAL_TIM_ConfigClockSource+0x4f8>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d004      	beq.n	8003118 <HAL_TIM_ConfigClockSource+0x430>
 800310e:	f241 5121 	movw	r1, #5409	@ 0x1521
 8003112:	4834      	ldr	r0, [pc, #208]	@ (80031e4 <HAL_TIM_ConfigClockSource+0x4fc>)
 8003114:	f7fd faf8 	bl	8000708 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003120:	d014      	beq.n	800314c <HAL_TIM_ConfigClockSource+0x464>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d010      	beq.n	800314c <HAL_TIM_ConfigClockSource+0x464>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00c      	beq.n	800314c <HAL_TIM_ConfigClockSource+0x464>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b02      	cmp	r3, #2
 8003138:	d008      	beq.n	800314c <HAL_TIM_ConfigClockSource+0x464>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b0a      	cmp	r3, #10
 8003140:	d004      	beq.n	800314c <HAL_TIM_ConfigClockSource+0x464>
 8003142:	f241 5124 	movw	r1, #5412	@ 0x1524
 8003146:	4827      	ldr	r0, [pc, #156]	@ (80031e4 <HAL_TIM_ConfigClockSource+0x4fc>)
 8003148:	f7fd fade 	bl	8000708 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b0f      	cmp	r3, #15
 8003152:	d904      	bls.n	800315e <HAL_TIM_ConfigClockSource+0x476>
 8003154:	f241 5125 	movw	r1, #5413	@ 0x1525
 8003158:	4822      	ldr	r0, [pc, #136]	@ (80031e4 <HAL_TIM_ConfigClockSource+0x4fc>)
 800315a:	f7fd fad5 	bl	8000708 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800316a:	461a      	mov	r2, r3
 800316c:	f000 fae4 	bl	8003738 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2140      	movs	r1, #64	@ 0x40
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fb3b 	bl	80037f2 <TIM_ITRx_SetConfig>
      break;
 800317c:	e020      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x4d8>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a16      	ldr	r2, [pc, #88]	@ (80031dc <HAL_TIM_ConfigClockSource+0x4f4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d00e      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x4be>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003190:	d009      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x4be>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a12      	ldr	r2, [pc, #72]	@ (80031e0 <HAL_TIM_ConfigClockSource+0x4f8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d004      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x4be>
 800319c:	f241 5134 	movw	r1, #5428	@ 0x1534
 80031a0:	4810      	ldr	r0, [pc, #64]	@ (80031e4 <HAL_TIM_ConfigClockSource+0x4fc>)
 80031a2:	f7fd fab1 	bl	8000708 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4619      	mov	r1, r3
 80031b0:	4610      	mov	r0, r2
 80031b2:	f000 fb1e 	bl	80037f2 <TIM_ITRx_SetConfig>
      break;
 80031b6:	e003      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x4d8>
    }

    default:
      status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
      break;
 80031bc:	e000      	b.n	80031c0 <HAL_TIM_ConfigClockSource+0x4d8>
      break;
 80031be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40012c00 	.word	0x40012c00
 80031e0:	40000400 	.word	0x40000400
 80031e4:	080049f8 	.word	0x080049f8

080031e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr

0800321e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr
	...

08003244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a2b      	ldr	r2, [pc, #172]	@ (8003304 <TIM_Base_SetConfig+0xc0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d007      	beq.n	800326c <TIM_Base_SetConfig+0x28>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003262:	d003      	beq.n	800326c <TIM_Base_SetConfig+0x28>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a28      	ldr	r2, [pc, #160]	@ (8003308 <TIM_Base_SetConfig+0xc4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d108      	bne.n	800327e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a20      	ldr	r2, [pc, #128]	@ (8003304 <TIM_Base_SetConfig+0xc0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d007      	beq.n	8003296 <TIM_Base_SetConfig+0x52>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800328c:	d003      	beq.n	8003296 <TIM_Base_SetConfig+0x52>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a1d      	ldr	r2, [pc, #116]	@ (8003308 <TIM_Base_SetConfig+0xc4>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d108      	bne.n	80032a8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800329c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a0d      	ldr	r2, [pc, #52]	@ (8003304 <TIM_Base_SetConfig+0xc0>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d103      	bne.n	80032dc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d005      	beq.n	80032fa <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f023 0201 	bic.w	r2, r3, #1
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	611a      	str	r2, [r3, #16]
  }
}
 80032fa:	bf00      	nop
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr
 8003304:	40012c00 	.word	0x40012c00
 8003308:	40000400 	.word	0x40000400

0800330c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	f023 0201 	bic.w	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800333a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f023 0303 	bic.w	r3, r3, #3
 8003342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f023 0302 	bic.w	r3, r3, #2
 8003354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a30      	ldr	r2, [pc, #192]	@ (8003424 <TIM_OC1_SetConfig+0x118>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d119      	bne.n	800339c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <TIM_OC1_SetConfig+0x76>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b08      	cmp	r3, #8
 8003376:	d004      	beq.n	8003382 <TIM_OC1_SetConfig+0x76>
 8003378:	f641 21cf 	movw	r1, #6863	@ 0x1acf
 800337c:	482a      	ldr	r0, [pc, #168]	@ (8003428 <TIM_OC1_SetConfig+0x11c>)
 800337e:	f7fd f9c3 	bl	8000708 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f023 0308 	bic.w	r3, r3, #8
 8003388:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f023 0304 	bic.w	r3, r3, #4
 800339a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a21      	ldr	r2, [pc, #132]	@ (8003424 <TIM_OC1_SetConfig+0x118>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d12d      	bne.n	8003400 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033ac:	d008      	beq.n	80033c0 <TIM_OC1_SetConfig+0xb4>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d004      	beq.n	80033c0 <TIM_OC1_SetConfig+0xb4>
 80033b6:	f641 21dc 	movw	r1, #6876	@ 0x1adc
 80033ba:	481b      	ldr	r0, [pc, #108]	@ (8003428 <TIM_OC1_SetConfig+0x11c>)
 80033bc:	f7fd f9a4 	bl	8000708 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033c8:	d008      	beq.n	80033dc <TIM_OC1_SetConfig+0xd0>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <TIM_OC1_SetConfig+0xd0>
 80033d2:	f641 21dd 	movw	r1, #6877	@ 0x1add
 80033d6:	4814      	ldr	r0, [pc, #80]	@ (8003428 <TIM_OC1_SetConfig+0x11c>)
 80033d8:	f7fd f996 	bl	8000708 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80033ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	621a      	str	r2, [r3, #32]
}
 800341a:	bf00      	nop
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40012c00 	.word	0x40012c00
 8003428:	080049f8 	.word	0x080049f8

0800342c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	f023 0210 	bic.w	r2, r3, #16
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800345a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	021b      	lsls	r3, r3, #8
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4313      	orrs	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f023 0320 	bic.w	r3, r3, #32
 8003476:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a31      	ldr	r2, [pc, #196]	@ (800354c <TIM_OC2_SetConfig+0x120>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d11a      	bne.n	80034c2 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <TIM_OC2_SetConfig+0x7a>
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b08      	cmp	r3, #8
 800349a:	d004      	beq.n	80034a6 <TIM_OC2_SetConfig+0x7a>
 800349c:	f641 311b 	movw	r1, #6939	@ 0x1b1b
 80034a0:	482b      	ldr	r0, [pc, #172]	@ (8003550 <TIM_OC2_SetConfig+0x124>)
 80034a2:	f7fd f931 	bl	8000708 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a21      	ldr	r2, [pc, #132]	@ (800354c <TIM_OC2_SetConfig+0x120>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d12f      	bne.n	800352a <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034d2:	d008      	beq.n	80034e6 <TIM_OC2_SetConfig+0xba>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d004      	beq.n	80034e6 <TIM_OC2_SetConfig+0xba>
 80034dc:	f641 3128 	movw	r1, #6952	@ 0x1b28
 80034e0:	481b      	ldr	r0, [pc, #108]	@ (8003550 <TIM_OC2_SetConfig+0x124>)
 80034e2:	f7fd f911 	bl	8000708 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034ee:	d008      	beq.n	8003502 <TIM_OC2_SetConfig+0xd6>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d004      	beq.n	8003502 <TIM_OC2_SetConfig+0xd6>
 80034f8:	f641 3129 	movw	r1, #6953	@ 0x1b29
 80034fc:	4814      	ldr	r0, [pc, #80]	@ (8003550 <TIM_OC2_SetConfig+0x124>)
 80034fe:	f7fd f903 	bl	8000708 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	621a      	str	r2, [r3, #32]
}
 8003544:	bf00      	nop
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40012c00 	.word	0x40012c00
 8003550:	080049f8 	.word	0x080049f8

08003554 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0303 	bic.w	r3, r3, #3
 800358a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800359c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	021b      	lsls	r3, r3, #8
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a31      	ldr	r2, [pc, #196]	@ (8003674 <TIM_OC3_SetConfig+0x120>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d11a      	bne.n	80035e8 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <TIM_OC3_SetConfig+0x78>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d004      	beq.n	80035cc <TIM_OC3_SetConfig+0x78>
 80035c2:	f641 3166 	movw	r1, #7014	@ 0x1b66
 80035c6:	482c      	ldr	r0, [pc, #176]	@ (8003678 <TIM_OC3_SetConfig+0x124>)
 80035c8:	f7fd f89e 	bl	8000708 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	021b      	lsls	r3, r3, #8
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a22      	ldr	r2, [pc, #136]	@ (8003674 <TIM_OC3_SetConfig+0x120>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d12f      	bne.n	8003650 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035f8:	d008      	beq.n	800360c <TIM_OC3_SetConfig+0xb8>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d004      	beq.n	800360c <TIM_OC3_SetConfig+0xb8>
 8003602:	f641 3173 	movw	r1, #7027	@ 0x1b73
 8003606:	481c      	ldr	r0, [pc, #112]	@ (8003678 <TIM_OC3_SetConfig+0x124>)
 8003608:	f7fd f87e 	bl	8000708 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003614:	d008      	beq.n	8003628 <TIM_OC3_SetConfig+0xd4>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d004      	beq.n	8003628 <TIM_OC3_SetConfig+0xd4>
 800361e:	f641 3174 	movw	r1, #7028	@ 0x1b74
 8003622:	4815      	ldr	r0, [pc, #84]	@ (8003678 <TIM_OC3_SetConfig+0x124>)
 8003624:	f7fd f870 	bl	8000708 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800362e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	621a      	str	r2, [r3, #32]
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40012c00 	.word	0x40012c00
 8003678:	080049f8 	.word	0x080049f8

0800367c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	4313      	orrs	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80036c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	031b      	lsls	r3, r3, #12
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a16      	ldr	r2, [pc, #88]	@ (8003730 <TIM_OC4_SetConfig+0xb4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d117      	bne.n	800370c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036e4:	d008      	beq.n	80036f8 <TIM_OC4_SetConfig+0x7c>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d004      	beq.n	80036f8 <TIM_OC4_SetConfig+0x7c>
 80036ee:	f641 31b3 	movw	r1, #7091	@ 0x1bb3
 80036f2:	4810      	ldr	r0, [pc, #64]	@ (8003734 <TIM_OC4_SetConfig+0xb8>)
 80036f4:	f7fd f808 	bl	8000708 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80036fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	019b      	lsls	r3, r3, #6
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	4313      	orrs	r3, r2
 800370a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685a      	ldr	r2, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	621a      	str	r2, [r3, #32]
}
 8003726:	bf00      	nop
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40012c00 	.word	0x40012c00
 8003734:	080049f8 	.word	0x080049f8

08003738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	f023 0201 	bic.w	r2, r3, #1
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f023 030a 	bic.w	r3, r3, #10
 8003774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	621a      	str	r2, [r3, #32]
}
 800378a:	bf00      	nop
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr

08003794 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	f023 0210 	bic.w	r2, r3, #16
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	031b      	lsls	r3, r3, #12
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80037d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	621a      	str	r2, [r3, #32]
}
 80037e8:	bf00      	nop
 80037ea:	371c      	adds	r7, #28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr

080037f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b085      	sub	sp, #20
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	f043 0307 	orr.w	r3, r3, #7
 8003814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	609a      	str	r2, [r3, #8]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr

08003826 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003826:	b480      	push	{r7}
 8003828:	b087      	sub	sp, #28
 800382a:	af00      	add	r7, sp, #0
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003840:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	021a      	lsls	r2, r3, #8
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	431a      	orrs	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	4313      	orrs	r3, r2
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	4313      	orrs	r3, r2
 8003852:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	609a      	str	r2, [r3, #8]
}
 800385a:	bf00      	nop
 800385c:	371c      	adds	r7, #28
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr

08003864 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4a20      	ldr	r2, [pc, #128]	@ (80038f4 <TIM_CCxChannelCmd+0x90>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00c      	beq.n	8003892 <TIM_CCxChannelCmd+0x2e>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800387e:	d008      	beq.n	8003892 <TIM_CCxChannelCmd+0x2e>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a1d      	ldr	r2, [pc, #116]	@ (80038f8 <TIM_CCxChannelCmd+0x94>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d004      	beq.n	8003892 <TIM_CCxChannelCmd+0x2e>
 8003888:	f641 519c 	movw	r1, #7580	@ 0x1d9c
 800388c:	481b      	ldr	r0, [pc, #108]	@ (80038fc <TIM_CCxChannelCmd+0x98>)
 800388e:	f7fc ff3b 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d010      	beq.n	80038ba <TIM_CCxChannelCmd+0x56>
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2b04      	cmp	r3, #4
 800389c:	d00d      	beq.n	80038ba <TIM_CCxChannelCmd+0x56>
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d00a      	beq.n	80038ba <TIM_CCxChannelCmd+0x56>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b0c      	cmp	r3, #12
 80038a8:	d007      	beq.n	80038ba <TIM_CCxChannelCmd+0x56>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b3c      	cmp	r3, #60	@ 0x3c
 80038ae:	d004      	beq.n	80038ba <TIM_CCxChannelCmd+0x56>
 80038b0:	f641 519d 	movw	r1, #7581	@ 0x1d9d
 80038b4:	4811      	ldr	r0, [pc, #68]	@ (80038fc <TIM_CCxChannelCmd+0x98>)
 80038b6:	f7fc ff27 	bl	8000708 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f003 031f 	and.w	r3, r3, #31
 80038c0:	2201      	movs	r2, #1
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a1a      	ldr	r2, [r3, #32]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	43db      	mvns	r3, r3
 80038d0:	401a      	ands	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a1a      	ldr	r2, [r3, #32]
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	f003 031f 	and.w	r3, r3, #31
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	fa01 f303 	lsl.w	r3, r1, r3
 80038e6:	431a      	orrs	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	621a      	str	r2, [r3, #32]
}
 80038ec:	bf00      	nop
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40012c00 	.word	0x40012c00
 80038f8:	40000400 	.word	0x40000400
 80038fc:	080049f8 	.word	0x080049f8

08003900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a48      	ldr	r2, [pc, #288]	@ (8003a30 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00e      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800391c:	d009      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a44      	ldr	r2, [pc, #272]	@ (8003a34 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8003928:	f240 71a9 	movw	r1, #1961	@ 0x7a9
 800392c:	4842      	ldr	r0, [pc, #264]	@ (8003a38 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 800392e:	f7fc feeb 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d020      	beq.n	800397c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b10      	cmp	r3, #16
 8003940:	d01c      	beq.n	800397c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b20      	cmp	r3, #32
 8003948:	d018      	beq.n	800397c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2b30      	cmp	r3, #48	@ 0x30
 8003950:	d014      	beq.n	800397c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b40      	cmp	r3, #64	@ 0x40
 8003958:	d010      	beq.n	800397c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b50      	cmp	r3, #80	@ 0x50
 8003960:	d00c      	beq.n	800397c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2b60      	cmp	r3, #96	@ 0x60
 8003968:	d008      	beq.n	800397c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b70      	cmp	r3, #112	@ 0x70
 8003970:	d004      	beq.n	800397c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003972:	f240 71aa 	movw	r1, #1962	@ 0x7aa
 8003976:	4830      	ldr	r0, [pc, #192]	@ (8003a38 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 8003978:	f7fc fec6 	bl	8000708 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2b80      	cmp	r3, #128	@ 0x80
 8003982:	d008      	beq.n	8003996 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d004      	beq.n	8003996 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800398c:	f240 71ab 	movw	r1, #1963	@ 0x7ab
 8003990:	4829      	ldr	r0, [pc, #164]	@ (8003a38 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 8003992:	f7fc feb9 	bl	8000708 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800399c:	2b01      	cmp	r3, #1
 800399e:	d101      	bne.n	80039a4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 80039a0:	2302      	movs	r3, #2
 80039a2:	e041      	b.n	8003a28 <HAL_TIMEx_MasterConfigSynchronization+0x128>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a13      	ldr	r2, [pc, #76]	@ (8003a30 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d009      	beq.n	80039fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039f0:	d004      	beq.n	80039fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003a34 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d10c      	bne.n	8003a16 <HAL_TIMEx_MasterConfigSynchronization+0x116>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a02:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68ba      	ldr	r2, [r7, #8]
 8003a14:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40012c00 	.word	0x40012c00
 8003a34:	40000400 	.word	0x40000400
 8003a38:	08004a30 	.word	0x08004a30

08003a3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bc80      	pop	{r7}
 8003a4c:	4770      	bx	lr

08003a4e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr

08003a60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e08b      	b.n	8003b8a <HAL_UART_Init+0x12a>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d027      	beq.n	8003aca <HAL_UART_Init+0x6a>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a45      	ldr	r2, [pc, #276]	@ (8003b94 <HAL_UART_Init+0x134>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d009      	beq.n	8003a98 <HAL_UART_Init+0x38>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a43      	ldr	r2, [pc, #268]	@ (8003b98 <HAL_UART_Init+0x138>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d004      	beq.n	8003a98 <HAL_UART_Init+0x38>
 8003a8e:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8003a92:	4842      	ldr	r0, [pc, #264]	@ (8003b9c <HAL_UART_Init+0x13c>)
 8003a94:	f7fc fe38 	bl	8000708 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d023      	beq.n	8003ae8 <HAL_UART_Init+0x88>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003aa8:	d01e      	beq.n	8003ae8 <HAL_UART_Init+0x88>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab2:	d019      	beq.n	8003ae8 <HAL_UART_Init+0x88>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003abc:	d014      	beq.n	8003ae8 <HAL_UART_Init+0x88>
 8003abe:	f240 116f 	movw	r1, #367	@ 0x16f
 8003ac2:	4836      	ldr	r0, [pc, #216]	@ (8003b9c <HAL_UART_Init+0x13c>)
 8003ac4:	f7fc fe20 	bl	8000708 <assert_failed>
 8003ac8:	e00e      	b.n	8003ae8 <HAL_UART_Init+0x88>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a31      	ldr	r2, [pc, #196]	@ (8003b94 <HAL_UART_Init+0x134>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d009      	beq.n	8003ae8 <HAL_UART_Init+0x88>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a2f      	ldr	r2, [pc, #188]	@ (8003b98 <HAL_UART_Init+0x138>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d004      	beq.n	8003ae8 <HAL_UART_Init+0x88>
 8003ade:	f240 1173 	movw	r1, #371	@ 0x173
 8003ae2:	482e      	ldr	r0, [pc, #184]	@ (8003b9c <HAL_UART_Init+0x13c>)
 8003ae4:	f7fc fe10 	bl	8000708 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d009      	beq.n	8003b04 <HAL_UART_Init+0xa4>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003af8:	d004      	beq.n	8003b04 <HAL_UART_Init+0xa4>
 8003afa:	f240 1175 	movw	r1, #373	@ 0x175
 8003afe:	4827      	ldr	r0, [pc, #156]	@ (8003b9c <HAL_UART_Init+0x13c>)
 8003b00:	f7fc fe02 	bl	8000708 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d106      	bne.n	8003b1e <HAL_UART_Init+0xbe>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7fc fecb 	bl	80008b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2224      	movs	r2, #36	@ 0x24
 8003b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b34:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f978 	bl	8003e2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691a      	ldr	r2, [r3, #16]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b4a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695a      	ldr	r2, [r3, #20]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b5a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b6a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40013800 	.word	0x40013800
 8003b98:	40004400 	.word	0x40004400
 8003b9c:	08004a6c 	.word	0x08004a6c

08003ba0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08a      	sub	sp, #40	@ 0x28
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	4613      	mov	r3, r2
 8003bae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d175      	bne.n	8003cac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <HAL_UART_Transmit+0x2c>
 8003bc6:	88fb      	ldrh	r3, [r7, #6]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e06e      	b.n	8003cae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2221      	movs	r2, #33	@ 0x21
 8003bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bde:	f7fc ffaf 	bl	8000b40 <HAL_GetTick>
 8003be2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	88fa      	ldrh	r2, [r7, #6]
 8003be8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	88fa      	ldrh	r2, [r7, #6]
 8003bee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bf8:	d108      	bne.n	8003c0c <HAL_UART_Transmit+0x6c>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d104      	bne.n	8003c0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	e003      	b.n	8003c14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c14:	e02e      	b.n	8003c74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	2180      	movs	r1, #128	@ 0x80
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 f848 	bl	8003cb6 <UART_WaitOnFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e03a      	b.n	8003cae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10b      	bne.n	8003c56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	3302      	adds	r3, #2
 8003c52:	61bb      	str	r3, [r7, #24]
 8003c54:	e007      	b.n	8003c66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	781a      	ldrb	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	3301      	adds	r3, #1
 8003c64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1cb      	bne.n	8003c16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2200      	movs	r2, #0
 8003c86:	2140      	movs	r1, #64	@ 0x40
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f814 	bl	8003cb6 <UART_WaitOnFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e006      	b.n	8003cae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e000      	b.n	8003cae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003cac:	2302      	movs	r3, #2
  }
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3720      	adds	r7, #32
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b086      	sub	sp, #24
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	603b      	str	r3, [r7, #0]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cc6:	e03b      	b.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cce:	d037      	beq.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd0:	f7fc ff36 	bl	8000b40 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	6a3a      	ldr	r2, [r7, #32]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d302      	bcc.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e03a      	b.n	8003d60 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d023      	beq.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b80      	cmp	r3, #128	@ 0x80
 8003cfc:	d020      	beq.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b40      	cmp	r3, #64	@ 0x40
 8003d02:	d01d      	beq.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d116      	bne.n	8003d40 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f81d 	bl	8003d68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2208      	movs	r2, #8
 8003d32:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e00f      	b.n	8003d60 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	461a      	mov	r2, r3
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d0b4      	beq.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b095      	sub	sp, #84	@ 0x54
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	330c      	adds	r3, #12
 8003d76:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d7a:	e853 3f00 	ldrex	r3, [r3]
 8003d7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d90:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d98:	e841 2300 	strex	r3, r2, [r1]
 8003d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1e5      	bne.n	8003d70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3314      	adds	r3, #20
 8003daa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	e853 3f00 	ldrex	r3, [r3]
 8003db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f023 0301 	bic.w	r3, r3, #1
 8003dba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3314      	adds	r3, #20
 8003dc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dcc:	e841 2300 	strex	r3, r2, [r1]
 8003dd0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1e5      	bne.n	8003da4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d119      	bne.n	8003e14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	330c      	adds	r3, #12
 8003de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	e853 3f00 	ldrex	r3, [r3]
 8003dee:	60bb      	str	r3, [r7, #8]
   return(result);
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f023 0310 	bic.w	r3, r3, #16
 8003df6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	330c      	adds	r3, #12
 8003dfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e00:	61ba      	str	r2, [r7, #24]
 8003e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	6979      	ldr	r1, [r7, #20]
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e5      	bne.n	8003de0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e22:	bf00      	nop
 8003e24:	3754      	adds	r7, #84	@ 0x54
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr

08003e2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	4a5f      	ldr	r2, [pc, #380]	@ (8003fb8 <UART_SetConfig+0x18c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d904      	bls.n	8003e48 <UART_SetConfig+0x1c>
 8003e3e:	f640 6175 	movw	r1, #3701	@ 0xe75
 8003e42:	485e      	ldr	r0, [pc, #376]	@ (8003fbc <UART_SetConfig+0x190>)
 8003e44:	f7fc fc60 	bl	8000708 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d009      	beq.n	8003e64 <UART_SetConfig+0x38>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e58:	d004      	beq.n	8003e64 <UART_SetConfig+0x38>
 8003e5a:	f640 6176 	movw	r1, #3702	@ 0xe76
 8003e5e:	4857      	ldr	r0, [pc, #348]	@ (8003fbc <UART_SetConfig+0x190>)
 8003e60:	f7fc fc52 	bl	8000708 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00e      	beq.n	8003e8a <UART_SetConfig+0x5e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e74:	d009      	beq.n	8003e8a <UART_SetConfig+0x5e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003e7e:	d004      	beq.n	8003e8a <UART_SetConfig+0x5e>
 8003e80:	f640 6177 	movw	r1, #3703	@ 0xe77
 8003e84:	484d      	ldr	r0, [pc, #308]	@ (8003fbc <UART_SetConfig+0x190>)
 8003e86:	f7fc fc3f 	bl	8000708 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d103      	bne.n	8003ea0 <UART_SetConfig+0x74>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d104      	bne.n	8003eaa <UART_SetConfig+0x7e>
 8003ea0:	f640 6178 	movw	r1, #3704	@ 0xe78
 8003ea4:	4845      	ldr	r0, [pc, #276]	@ (8003fbc <UART_SetConfig+0x190>)
 8003ea6:	f7fc fc2f 	bl	8000708 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003edc:	f023 030c 	bic.w	r3, r3, #12
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	6812      	ldr	r2, [r2, #0]
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	430b      	orrs	r3, r1
 8003ee8:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	699a      	ldr	r2, [r3, #24]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a2e      	ldr	r2, [pc, #184]	@ (8003fc0 <UART_SetConfig+0x194>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d103      	bne.n	8003f12 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f0a:	f7fd ff4f 	bl	8001dac <HAL_RCC_GetPCLK2Freq>
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	e002      	b.n	8003f18 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f12:	f7fd ff37 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 8003f16:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	009a      	lsls	r2, r3, #2
 8003f22:	441a      	add	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f2e:	4a25      	ldr	r2, [pc, #148]	@ (8003fc4 <UART_SetConfig+0x198>)
 8003f30:	fba2 2303 	umull	r2, r3, r2, r3
 8003f34:	095b      	lsrs	r3, r3, #5
 8003f36:	0119      	lsls	r1, r3, #4
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	009a      	lsls	r2, r3, #2
 8003f42:	441a      	add	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc4 <UART_SetConfig+0x198>)
 8003f50:	fba3 0302 	umull	r0, r3, r3, r2
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	2064      	movs	r0, #100	@ 0x64
 8003f58:	fb00 f303 	mul.w	r3, r0, r3
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	011b      	lsls	r3, r3, #4
 8003f60:	3332      	adds	r3, #50	@ 0x32
 8003f62:	4a18      	ldr	r2, [pc, #96]	@ (8003fc4 <UART_SetConfig+0x198>)
 8003f64:	fba2 2303 	umull	r2, r3, r2, r3
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f6e:	4419      	add	r1, r3
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	009a      	lsls	r2, r3, #2
 8003f7a:	441a      	add	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f86:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc4 <UART_SetConfig+0x198>)
 8003f88:	fba3 0302 	umull	r0, r3, r3, r2
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	2064      	movs	r0, #100	@ 0x64
 8003f90:	fb00 f303 	mul.w	r3, r0, r3
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	3332      	adds	r3, #50	@ 0x32
 8003f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003fc4 <UART_SetConfig+0x198>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	f003 020f 	and.w	r2, r3, #15
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	440a      	add	r2, r1
 8003fac:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003fae:	bf00      	nop
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	0044aa20 	.word	0x0044aa20
 8003fbc:	08004a6c 	.word	0x08004a6c
 8003fc0:	40013800 	.word	0x40013800
 8003fc4:	51eb851f 	.word	0x51eb851f

08003fc8 <siprintf>:
 8003fc8:	b40e      	push	{r1, r2, r3}
 8003fca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003fce:	b500      	push	{lr}
 8003fd0:	b09c      	sub	sp, #112	@ 0x70
 8003fd2:	ab1d      	add	r3, sp, #116	@ 0x74
 8003fd4:	9002      	str	r0, [sp, #8]
 8003fd6:	9006      	str	r0, [sp, #24]
 8003fd8:	9107      	str	r1, [sp, #28]
 8003fda:	9104      	str	r1, [sp, #16]
 8003fdc:	4808      	ldr	r0, [pc, #32]	@ (8004000 <siprintf+0x38>)
 8003fde:	4909      	ldr	r1, [pc, #36]	@ (8004004 <siprintf+0x3c>)
 8003fe0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fe4:	9105      	str	r1, [sp, #20]
 8003fe6:	6800      	ldr	r0, [r0, #0]
 8003fe8:	a902      	add	r1, sp, #8
 8003fea:	9301      	str	r3, [sp, #4]
 8003fec:	f000 f992 	bl	8004314 <_svfiprintf_r>
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	9b02      	ldr	r3, [sp, #8]
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	b01c      	add	sp, #112	@ 0x70
 8003ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ffc:	b003      	add	sp, #12
 8003ffe:	4770      	bx	lr
 8004000:	2000000c 	.word	0x2000000c
 8004004:	ffff0208 	.word	0xffff0208

08004008 <memset>:
 8004008:	4603      	mov	r3, r0
 800400a:	4402      	add	r2, r0
 800400c:	4293      	cmp	r3, r2
 800400e:	d100      	bne.n	8004012 <memset+0xa>
 8004010:	4770      	bx	lr
 8004012:	f803 1b01 	strb.w	r1, [r3], #1
 8004016:	e7f9      	b.n	800400c <memset+0x4>

08004018 <__errno>:
 8004018:	4b01      	ldr	r3, [pc, #4]	@ (8004020 <__errno+0x8>)
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	2000000c 	.word	0x2000000c

08004024 <__libc_init_array>:
 8004024:	b570      	push	{r4, r5, r6, lr}
 8004026:	2600      	movs	r6, #0
 8004028:	4d0c      	ldr	r5, [pc, #48]	@ (800405c <__libc_init_array+0x38>)
 800402a:	4c0d      	ldr	r4, [pc, #52]	@ (8004060 <__libc_init_array+0x3c>)
 800402c:	1b64      	subs	r4, r4, r5
 800402e:	10a4      	asrs	r4, r4, #2
 8004030:	42a6      	cmp	r6, r4
 8004032:	d109      	bne.n	8004048 <__libc_init_array+0x24>
 8004034:	f000 fc78 	bl	8004928 <_init>
 8004038:	2600      	movs	r6, #0
 800403a:	4d0a      	ldr	r5, [pc, #40]	@ (8004064 <__libc_init_array+0x40>)
 800403c:	4c0a      	ldr	r4, [pc, #40]	@ (8004068 <__libc_init_array+0x44>)
 800403e:	1b64      	subs	r4, r4, r5
 8004040:	10a4      	asrs	r4, r4, #2
 8004042:	42a6      	cmp	r6, r4
 8004044:	d105      	bne.n	8004052 <__libc_init_array+0x2e>
 8004046:	bd70      	pop	{r4, r5, r6, pc}
 8004048:	f855 3b04 	ldr.w	r3, [r5], #4
 800404c:	4798      	blx	r3
 800404e:	3601      	adds	r6, #1
 8004050:	e7ee      	b.n	8004030 <__libc_init_array+0xc>
 8004052:	f855 3b04 	ldr.w	r3, [r5], #4
 8004056:	4798      	blx	r3
 8004058:	3601      	adds	r6, #1
 800405a:	e7f2      	b.n	8004042 <__libc_init_array+0x1e>
 800405c:	08004b10 	.word	0x08004b10
 8004060:	08004b10 	.word	0x08004b10
 8004064:	08004b10 	.word	0x08004b10
 8004068:	08004b14 	.word	0x08004b14

0800406c <__retarget_lock_acquire_recursive>:
 800406c:	4770      	bx	lr

0800406e <__retarget_lock_release_recursive>:
 800406e:	4770      	bx	lr

08004070 <_free_r>:
 8004070:	b538      	push	{r3, r4, r5, lr}
 8004072:	4605      	mov	r5, r0
 8004074:	2900      	cmp	r1, #0
 8004076:	d040      	beq.n	80040fa <_free_r+0x8a>
 8004078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800407c:	1f0c      	subs	r4, r1, #4
 800407e:	2b00      	cmp	r3, #0
 8004080:	bfb8      	it	lt
 8004082:	18e4      	addlt	r4, r4, r3
 8004084:	f000 f8de 	bl	8004244 <__malloc_lock>
 8004088:	4a1c      	ldr	r2, [pc, #112]	@ (80040fc <_free_r+0x8c>)
 800408a:	6813      	ldr	r3, [r2, #0]
 800408c:	b933      	cbnz	r3, 800409c <_free_r+0x2c>
 800408e:	6063      	str	r3, [r4, #4]
 8004090:	6014      	str	r4, [r2, #0]
 8004092:	4628      	mov	r0, r5
 8004094:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004098:	f000 b8da 	b.w	8004250 <__malloc_unlock>
 800409c:	42a3      	cmp	r3, r4
 800409e:	d908      	bls.n	80040b2 <_free_r+0x42>
 80040a0:	6820      	ldr	r0, [r4, #0]
 80040a2:	1821      	adds	r1, r4, r0
 80040a4:	428b      	cmp	r3, r1
 80040a6:	bf01      	itttt	eq
 80040a8:	6819      	ldreq	r1, [r3, #0]
 80040aa:	685b      	ldreq	r3, [r3, #4]
 80040ac:	1809      	addeq	r1, r1, r0
 80040ae:	6021      	streq	r1, [r4, #0]
 80040b0:	e7ed      	b.n	800408e <_free_r+0x1e>
 80040b2:	461a      	mov	r2, r3
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	b10b      	cbz	r3, 80040bc <_free_r+0x4c>
 80040b8:	42a3      	cmp	r3, r4
 80040ba:	d9fa      	bls.n	80040b2 <_free_r+0x42>
 80040bc:	6811      	ldr	r1, [r2, #0]
 80040be:	1850      	adds	r0, r2, r1
 80040c0:	42a0      	cmp	r0, r4
 80040c2:	d10b      	bne.n	80040dc <_free_r+0x6c>
 80040c4:	6820      	ldr	r0, [r4, #0]
 80040c6:	4401      	add	r1, r0
 80040c8:	1850      	adds	r0, r2, r1
 80040ca:	4283      	cmp	r3, r0
 80040cc:	6011      	str	r1, [r2, #0]
 80040ce:	d1e0      	bne.n	8004092 <_free_r+0x22>
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	4408      	add	r0, r1
 80040d6:	6010      	str	r0, [r2, #0]
 80040d8:	6053      	str	r3, [r2, #4]
 80040da:	e7da      	b.n	8004092 <_free_r+0x22>
 80040dc:	d902      	bls.n	80040e4 <_free_r+0x74>
 80040de:	230c      	movs	r3, #12
 80040e0:	602b      	str	r3, [r5, #0]
 80040e2:	e7d6      	b.n	8004092 <_free_r+0x22>
 80040e4:	6820      	ldr	r0, [r4, #0]
 80040e6:	1821      	adds	r1, r4, r0
 80040e8:	428b      	cmp	r3, r1
 80040ea:	bf01      	itttt	eq
 80040ec:	6819      	ldreq	r1, [r3, #0]
 80040ee:	685b      	ldreq	r3, [r3, #4]
 80040f0:	1809      	addeq	r1, r1, r0
 80040f2:	6021      	streq	r1, [r4, #0]
 80040f4:	6063      	str	r3, [r4, #4]
 80040f6:	6054      	str	r4, [r2, #4]
 80040f8:	e7cb      	b.n	8004092 <_free_r+0x22>
 80040fa:	bd38      	pop	{r3, r4, r5, pc}
 80040fc:	2000029c 	.word	0x2000029c

08004100 <sbrk_aligned>:
 8004100:	b570      	push	{r4, r5, r6, lr}
 8004102:	4e0f      	ldr	r6, [pc, #60]	@ (8004140 <sbrk_aligned+0x40>)
 8004104:	460c      	mov	r4, r1
 8004106:	6831      	ldr	r1, [r6, #0]
 8004108:	4605      	mov	r5, r0
 800410a:	b911      	cbnz	r1, 8004112 <sbrk_aligned+0x12>
 800410c:	f000 fbaa 	bl	8004864 <_sbrk_r>
 8004110:	6030      	str	r0, [r6, #0]
 8004112:	4621      	mov	r1, r4
 8004114:	4628      	mov	r0, r5
 8004116:	f000 fba5 	bl	8004864 <_sbrk_r>
 800411a:	1c43      	adds	r3, r0, #1
 800411c:	d103      	bne.n	8004126 <sbrk_aligned+0x26>
 800411e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004122:	4620      	mov	r0, r4
 8004124:	bd70      	pop	{r4, r5, r6, pc}
 8004126:	1cc4      	adds	r4, r0, #3
 8004128:	f024 0403 	bic.w	r4, r4, #3
 800412c:	42a0      	cmp	r0, r4
 800412e:	d0f8      	beq.n	8004122 <sbrk_aligned+0x22>
 8004130:	1a21      	subs	r1, r4, r0
 8004132:	4628      	mov	r0, r5
 8004134:	f000 fb96 	bl	8004864 <_sbrk_r>
 8004138:	3001      	adds	r0, #1
 800413a:	d1f2      	bne.n	8004122 <sbrk_aligned+0x22>
 800413c:	e7ef      	b.n	800411e <sbrk_aligned+0x1e>
 800413e:	bf00      	nop
 8004140:	20000298 	.word	0x20000298

08004144 <_malloc_r>:
 8004144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004148:	1ccd      	adds	r5, r1, #3
 800414a:	f025 0503 	bic.w	r5, r5, #3
 800414e:	3508      	adds	r5, #8
 8004150:	2d0c      	cmp	r5, #12
 8004152:	bf38      	it	cc
 8004154:	250c      	movcc	r5, #12
 8004156:	2d00      	cmp	r5, #0
 8004158:	4606      	mov	r6, r0
 800415a:	db01      	blt.n	8004160 <_malloc_r+0x1c>
 800415c:	42a9      	cmp	r1, r5
 800415e:	d904      	bls.n	800416a <_malloc_r+0x26>
 8004160:	230c      	movs	r3, #12
 8004162:	6033      	str	r3, [r6, #0]
 8004164:	2000      	movs	r0, #0
 8004166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800416a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004240 <_malloc_r+0xfc>
 800416e:	f000 f869 	bl	8004244 <__malloc_lock>
 8004172:	f8d8 3000 	ldr.w	r3, [r8]
 8004176:	461c      	mov	r4, r3
 8004178:	bb44      	cbnz	r4, 80041cc <_malloc_r+0x88>
 800417a:	4629      	mov	r1, r5
 800417c:	4630      	mov	r0, r6
 800417e:	f7ff ffbf 	bl	8004100 <sbrk_aligned>
 8004182:	1c43      	adds	r3, r0, #1
 8004184:	4604      	mov	r4, r0
 8004186:	d158      	bne.n	800423a <_malloc_r+0xf6>
 8004188:	f8d8 4000 	ldr.w	r4, [r8]
 800418c:	4627      	mov	r7, r4
 800418e:	2f00      	cmp	r7, #0
 8004190:	d143      	bne.n	800421a <_malloc_r+0xd6>
 8004192:	2c00      	cmp	r4, #0
 8004194:	d04b      	beq.n	800422e <_malloc_r+0xea>
 8004196:	6823      	ldr	r3, [r4, #0]
 8004198:	4639      	mov	r1, r7
 800419a:	4630      	mov	r0, r6
 800419c:	eb04 0903 	add.w	r9, r4, r3
 80041a0:	f000 fb60 	bl	8004864 <_sbrk_r>
 80041a4:	4581      	cmp	r9, r0
 80041a6:	d142      	bne.n	800422e <_malloc_r+0xea>
 80041a8:	6821      	ldr	r1, [r4, #0]
 80041aa:	4630      	mov	r0, r6
 80041ac:	1a6d      	subs	r5, r5, r1
 80041ae:	4629      	mov	r1, r5
 80041b0:	f7ff ffa6 	bl	8004100 <sbrk_aligned>
 80041b4:	3001      	adds	r0, #1
 80041b6:	d03a      	beq.n	800422e <_malloc_r+0xea>
 80041b8:	6823      	ldr	r3, [r4, #0]
 80041ba:	442b      	add	r3, r5
 80041bc:	6023      	str	r3, [r4, #0]
 80041be:	f8d8 3000 	ldr.w	r3, [r8]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	bb62      	cbnz	r2, 8004220 <_malloc_r+0xdc>
 80041c6:	f8c8 7000 	str.w	r7, [r8]
 80041ca:	e00f      	b.n	80041ec <_malloc_r+0xa8>
 80041cc:	6822      	ldr	r2, [r4, #0]
 80041ce:	1b52      	subs	r2, r2, r5
 80041d0:	d420      	bmi.n	8004214 <_malloc_r+0xd0>
 80041d2:	2a0b      	cmp	r2, #11
 80041d4:	d917      	bls.n	8004206 <_malloc_r+0xc2>
 80041d6:	1961      	adds	r1, r4, r5
 80041d8:	42a3      	cmp	r3, r4
 80041da:	6025      	str	r5, [r4, #0]
 80041dc:	bf18      	it	ne
 80041de:	6059      	strne	r1, [r3, #4]
 80041e0:	6863      	ldr	r3, [r4, #4]
 80041e2:	bf08      	it	eq
 80041e4:	f8c8 1000 	streq.w	r1, [r8]
 80041e8:	5162      	str	r2, [r4, r5]
 80041ea:	604b      	str	r3, [r1, #4]
 80041ec:	4630      	mov	r0, r6
 80041ee:	f000 f82f 	bl	8004250 <__malloc_unlock>
 80041f2:	f104 000b 	add.w	r0, r4, #11
 80041f6:	1d23      	adds	r3, r4, #4
 80041f8:	f020 0007 	bic.w	r0, r0, #7
 80041fc:	1ac2      	subs	r2, r0, r3
 80041fe:	bf1c      	itt	ne
 8004200:	1a1b      	subne	r3, r3, r0
 8004202:	50a3      	strne	r3, [r4, r2]
 8004204:	e7af      	b.n	8004166 <_malloc_r+0x22>
 8004206:	6862      	ldr	r2, [r4, #4]
 8004208:	42a3      	cmp	r3, r4
 800420a:	bf0c      	ite	eq
 800420c:	f8c8 2000 	streq.w	r2, [r8]
 8004210:	605a      	strne	r2, [r3, #4]
 8004212:	e7eb      	b.n	80041ec <_malloc_r+0xa8>
 8004214:	4623      	mov	r3, r4
 8004216:	6864      	ldr	r4, [r4, #4]
 8004218:	e7ae      	b.n	8004178 <_malloc_r+0x34>
 800421a:	463c      	mov	r4, r7
 800421c:	687f      	ldr	r7, [r7, #4]
 800421e:	e7b6      	b.n	800418e <_malloc_r+0x4a>
 8004220:	461a      	mov	r2, r3
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	42a3      	cmp	r3, r4
 8004226:	d1fb      	bne.n	8004220 <_malloc_r+0xdc>
 8004228:	2300      	movs	r3, #0
 800422a:	6053      	str	r3, [r2, #4]
 800422c:	e7de      	b.n	80041ec <_malloc_r+0xa8>
 800422e:	230c      	movs	r3, #12
 8004230:	4630      	mov	r0, r6
 8004232:	6033      	str	r3, [r6, #0]
 8004234:	f000 f80c 	bl	8004250 <__malloc_unlock>
 8004238:	e794      	b.n	8004164 <_malloc_r+0x20>
 800423a:	6005      	str	r5, [r0, #0]
 800423c:	e7d6      	b.n	80041ec <_malloc_r+0xa8>
 800423e:	bf00      	nop
 8004240:	2000029c 	.word	0x2000029c

08004244 <__malloc_lock>:
 8004244:	4801      	ldr	r0, [pc, #4]	@ (800424c <__malloc_lock+0x8>)
 8004246:	f7ff bf11 	b.w	800406c <__retarget_lock_acquire_recursive>
 800424a:	bf00      	nop
 800424c:	20000294 	.word	0x20000294

08004250 <__malloc_unlock>:
 8004250:	4801      	ldr	r0, [pc, #4]	@ (8004258 <__malloc_unlock+0x8>)
 8004252:	f7ff bf0c 	b.w	800406e <__retarget_lock_release_recursive>
 8004256:	bf00      	nop
 8004258:	20000294 	.word	0x20000294

0800425c <__ssputs_r>:
 800425c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004260:	461f      	mov	r7, r3
 8004262:	688e      	ldr	r6, [r1, #8]
 8004264:	4682      	mov	sl, r0
 8004266:	42be      	cmp	r6, r7
 8004268:	460c      	mov	r4, r1
 800426a:	4690      	mov	r8, r2
 800426c:	680b      	ldr	r3, [r1, #0]
 800426e:	d82d      	bhi.n	80042cc <__ssputs_r+0x70>
 8004270:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004274:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004278:	d026      	beq.n	80042c8 <__ssputs_r+0x6c>
 800427a:	6965      	ldr	r5, [r4, #20]
 800427c:	6909      	ldr	r1, [r1, #16]
 800427e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004282:	eba3 0901 	sub.w	r9, r3, r1
 8004286:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800428a:	1c7b      	adds	r3, r7, #1
 800428c:	444b      	add	r3, r9
 800428e:	106d      	asrs	r5, r5, #1
 8004290:	429d      	cmp	r5, r3
 8004292:	bf38      	it	cc
 8004294:	461d      	movcc	r5, r3
 8004296:	0553      	lsls	r3, r2, #21
 8004298:	d527      	bpl.n	80042ea <__ssputs_r+0x8e>
 800429a:	4629      	mov	r1, r5
 800429c:	f7ff ff52 	bl	8004144 <_malloc_r>
 80042a0:	4606      	mov	r6, r0
 80042a2:	b360      	cbz	r0, 80042fe <__ssputs_r+0xa2>
 80042a4:	464a      	mov	r2, r9
 80042a6:	6921      	ldr	r1, [r4, #16]
 80042a8:	f000 fafa 	bl	80048a0 <memcpy>
 80042ac:	89a3      	ldrh	r3, [r4, #12]
 80042ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80042b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042b6:	81a3      	strh	r3, [r4, #12]
 80042b8:	6126      	str	r6, [r4, #16]
 80042ba:	444e      	add	r6, r9
 80042bc:	6026      	str	r6, [r4, #0]
 80042be:	463e      	mov	r6, r7
 80042c0:	6165      	str	r5, [r4, #20]
 80042c2:	eba5 0509 	sub.w	r5, r5, r9
 80042c6:	60a5      	str	r5, [r4, #8]
 80042c8:	42be      	cmp	r6, r7
 80042ca:	d900      	bls.n	80042ce <__ssputs_r+0x72>
 80042cc:	463e      	mov	r6, r7
 80042ce:	4632      	mov	r2, r6
 80042d0:	4641      	mov	r1, r8
 80042d2:	6820      	ldr	r0, [r4, #0]
 80042d4:	f000 faac 	bl	8004830 <memmove>
 80042d8:	2000      	movs	r0, #0
 80042da:	68a3      	ldr	r3, [r4, #8]
 80042dc:	1b9b      	subs	r3, r3, r6
 80042de:	60a3      	str	r3, [r4, #8]
 80042e0:	6823      	ldr	r3, [r4, #0]
 80042e2:	4433      	add	r3, r6
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ea:	462a      	mov	r2, r5
 80042ec:	f000 fae6 	bl	80048bc <_realloc_r>
 80042f0:	4606      	mov	r6, r0
 80042f2:	2800      	cmp	r0, #0
 80042f4:	d1e0      	bne.n	80042b8 <__ssputs_r+0x5c>
 80042f6:	4650      	mov	r0, sl
 80042f8:	6921      	ldr	r1, [r4, #16]
 80042fa:	f7ff feb9 	bl	8004070 <_free_r>
 80042fe:	230c      	movs	r3, #12
 8004300:	f8ca 3000 	str.w	r3, [sl]
 8004304:	89a3      	ldrh	r3, [r4, #12]
 8004306:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800430a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800430e:	81a3      	strh	r3, [r4, #12]
 8004310:	e7e9      	b.n	80042e6 <__ssputs_r+0x8a>
	...

08004314 <_svfiprintf_r>:
 8004314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004318:	4698      	mov	r8, r3
 800431a:	898b      	ldrh	r3, [r1, #12]
 800431c:	4607      	mov	r7, r0
 800431e:	061b      	lsls	r3, r3, #24
 8004320:	460d      	mov	r5, r1
 8004322:	4614      	mov	r4, r2
 8004324:	b09d      	sub	sp, #116	@ 0x74
 8004326:	d510      	bpl.n	800434a <_svfiprintf_r+0x36>
 8004328:	690b      	ldr	r3, [r1, #16]
 800432a:	b973      	cbnz	r3, 800434a <_svfiprintf_r+0x36>
 800432c:	2140      	movs	r1, #64	@ 0x40
 800432e:	f7ff ff09 	bl	8004144 <_malloc_r>
 8004332:	6028      	str	r0, [r5, #0]
 8004334:	6128      	str	r0, [r5, #16]
 8004336:	b930      	cbnz	r0, 8004346 <_svfiprintf_r+0x32>
 8004338:	230c      	movs	r3, #12
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004340:	b01d      	add	sp, #116	@ 0x74
 8004342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004346:	2340      	movs	r3, #64	@ 0x40
 8004348:	616b      	str	r3, [r5, #20]
 800434a:	2300      	movs	r3, #0
 800434c:	9309      	str	r3, [sp, #36]	@ 0x24
 800434e:	2320      	movs	r3, #32
 8004350:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004354:	2330      	movs	r3, #48	@ 0x30
 8004356:	f04f 0901 	mov.w	r9, #1
 800435a:	f8cd 800c 	str.w	r8, [sp, #12]
 800435e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80044f8 <_svfiprintf_r+0x1e4>
 8004362:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004366:	4623      	mov	r3, r4
 8004368:	469a      	mov	sl, r3
 800436a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800436e:	b10a      	cbz	r2, 8004374 <_svfiprintf_r+0x60>
 8004370:	2a25      	cmp	r2, #37	@ 0x25
 8004372:	d1f9      	bne.n	8004368 <_svfiprintf_r+0x54>
 8004374:	ebba 0b04 	subs.w	fp, sl, r4
 8004378:	d00b      	beq.n	8004392 <_svfiprintf_r+0x7e>
 800437a:	465b      	mov	r3, fp
 800437c:	4622      	mov	r2, r4
 800437e:	4629      	mov	r1, r5
 8004380:	4638      	mov	r0, r7
 8004382:	f7ff ff6b 	bl	800425c <__ssputs_r>
 8004386:	3001      	adds	r0, #1
 8004388:	f000 80a7 	beq.w	80044da <_svfiprintf_r+0x1c6>
 800438c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800438e:	445a      	add	r2, fp
 8004390:	9209      	str	r2, [sp, #36]	@ 0x24
 8004392:	f89a 3000 	ldrb.w	r3, [sl]
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 809f 	beq.w	80044da <_svfiprintf_r+0x1c6>
 800439c:	2300      	movs	r3, #0
 800439e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80043a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043a6:	f10a 0a01 	add.w	sl, sl, #1
 80043aa:	9304      	str	r3, [sp, #16]
 80043ac:	9307      	str	r3, [sp, #28]
 80043ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80043b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80043b4:	4654      	mov	r4, sl
 80043b6:	2205      	movs	r2, #5
 80043b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043bc:	484e      	ldr	r0, [pc, #312]	@ (80044f8 <_svfiprintf_r+0x1e4>)
 80043be:	f000 fa61 	bl	8004884 <memchr>
 80043c2:	9a04      	ldr	r2, [sp, #16]
 80043c4:	b9d8      	cbnz	r0, 80043fe <_svfiprintf_r+0xea>
 80043c6:	06d0      	lsls	r0, r2, #27
 80043c8:	bf44      	itt	mi
 80043ca:	2320      	movmi	r3, #32
 80043cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043d0:	0711      	lsls	r1, r2, #28
 80043d2:	bf44      	itt	mi
 80043d4:	232b      	movmi	r3, #43	@ 0x2b
 80043d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80043da:	f89a 3000 	ldrb.w	r3, [sl]
 80043de:	2b2a      	cmp	r3, #42	@ 0x2a
 80043e0:	d015      	beq.n	800440e <_svfiprintf_r+0xfa>
 80043e2:	4654      	mov	r4, sl
 80043e4:	2000      	movs	r0, #0
 80043e6:	f04f 0c0a 	mov.w	ip, #10
 80043ea:	9a07      	ldr	r2, [sp, #28]
 80043ec:	4621      	mov	r1, r4
 80043ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043f2:	3b30      	subs	r3, #48	@ 0x30
 80043f4:	2b09      	cmp	r3, #9
 80043f6:	d94b      	bls.n	8004490 <_svfiprintf_r+0x17c>
 80043f8:	b1b0      	cbz	r0, 8004428 <_svfiprintf_r+0x114>
 80043fa:	9207      	str	r2, [sp, #28]
 80043fc:	e014      	b.n	8004428 <_svfiprintf_r+0x114>
 80043fe:	eba0 0308 	sub.w	r3, r0, r8
 8004402:	fa09 f303 	lsl.w	r3, r9, r3
 8004406:	4313      	orrs	r3, r2
 8004408:	46a2      	mov	sl, r4
 800440a:	9304      	str	r3, [sp, #16]
 800440c:	e7d2      	b.n	80043b4 <_svfiprintf_r+0xa0>
 800440e:	9b03      	ldr	r3, [sp, #12]
 8004410:	1d19      	adds	r1, r3, #4
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	9103      	str	r1, [sp, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	bfbb      	ittet	lt
 800441a:	425b      	neglt	r3, r3
 800441c:	f042 0202 	orrlt.w	r2, r2, #2
 8004420:	9307      	strge	r3, [sp, #28]
 8004422:	9307      	strlt	r3, [sp, #28]
 8004424:	bfb8      	it	lt
 8004426:	9204      	strlt	r2, [sp, #16]
 8004428:	7823      	ldrb	r3, [r4, #0]
 800442a:	2b2e      	cmp	r3, #46	@ 0x2e
 800442c:	d10a      	bne.n	8004444 <_svfiprintf_r+0x130>
 800442e:	7863      	ldrb	r3, [r4, #1]
 8004430:	2b2a      	cmp	r3, #42	@ 0x2a
 8004432:	d132      	bne.n	800449a <_svfiprintf_r+0x186>
 8004434:	9b03      	ldr	r3, [sp, #12]
 8004436:	3402      	adds	r4, #2
 8004438:	1d1a      	adds	r2, r3, #4
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	9203      	str	r2, [sp, #12]
 800443e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004442:	9305      	str	r3, [sp, #20]
 8004444:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80044fc <_svfiprintf_r+0x1e8>
 8004448:	2203      	movs	r2, #3
 800444a:	4650      	mov	r0, sl
 800444c:	7821      	ldrb	r1, [r4, #0]
 800444e:	f000 fa19 	bl	8004884 <memchr>
 8004452:	b138      	cbz	r0, 8004464 <_svfiprintf_r+0x150>
 8004454:	2240      	movs	r2, #64	@ 0x40
 8004456:	9b04      	ldr	r3, [sp, #16]
 8004458:	eba0 000a 	sub.w	r0, r0, sl
 800445c:	4082      	lsls	r2, r0
 800445e:	4313      	orrs	r3, r2
 8004460:	3401      	adds	r4, #1
 8004462:	9304      	str	r3, [sp, #16]
 8004464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004468:	2206      	movs	r2, #6
 800446a:	4825      	ldr	r0, [pc, #148]	@ (8004500 <_svfiprintf_r+0x1ec>)
 800446c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004470:	f000 fa08 	bl	8004884 <memchr>
 8004474:	2800      	cmp	r0, #0
 8004476:	d036      	beq.n	80044e6 <_svfiprintf_r+0x1d2>
 8004478:	4b22      	ldr	r3, [pc, #136]	@ (8004504 <_svfiprintf_r+0x1f0>)
 800447a:	bb1b      	cbnz	r3, 80044c4 <_svfiprintf_r+0x1b0>
 800447c:	9b03      	ldr	r3, [sp, #12]
 800447e:	3307      	adds	r3, #7
 8004480:	f023 0307 	bic.w	r3, r3, #7
 8004484:	3308      	adds	r3, #8
 8004486:	9303      	str	r3, [sp, #12]
 8004488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800448a:	4433      	add	r3, r6
 800448c:	9309      	str	r3, [sp, #36]	@ 0x24
 800448e:	e76a      	b.n	8004366 <_svfiprintf_r+0x52>
 8004490:	460c      	mov	r4, r1
 8004492:	2001      	movs	r0, #1
 8004494:	fb0c 3202 	mla	r2, ip, r2, r3
 8004498:	e7a8      	b.n	80043ec <_svfiprintf_r+0xd8>
 800449a:	2300      	movs	r3, #0
 800449c:	f04f 0c0a 	mov.w	ip, #10
 80044a0:	4619      	mov	r1, r3
 80044a2:	3401      	adds	r4, #1
 80044a4:	9305      	str	r3, [sp, #20]
 80044a6:	4620      	mov	r0, r4
 80044a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044ac:	3a30      	subs	r2, #48	@ 0x30
 80044ae:	2a09      	cmp	r2, #9
 80044b0:	d903      	bls.n	80044ba <_svfiprintf_r+0x1a6>
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0c6      	beq.n	8004444 <_svfiprintf_r+0x130>
 80044b6:	9105      	str	r1, [sp, #20]
 80044b8:	e7c4      	b.n	8004444 <_svfiprintf_r+0x130>
 80044ba:	4604      	mov	r4, r0
 80044bc:	2301      	movs	r3, #1
 80044be:	fb0c 2101 	mla	r1, ip, r1, r2
 80044c2:	e7f0      	b.n	80044a6 <_svfiprintf_r+0x192>
 80044c4:	ab03      	add	r3, sp, #12
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	462a      	mov	r2, r5
 80044ca:	4638      	mov	r0, r7
 80044cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004508 <_svfiprintf_r+0x1f4>)
 80044ce:	a904      	add	r1, sp, #16
 80044d0:	f3af 8000 	nop.w
 80044d4:	1c42      	adds	r2, r0, #1
 80044d6:	4606      	mov	r6, r0
 80044d8:	d1d6      	bne.n	8004488 <_svfiprintf_r+0x174>
 80044da:	89ab      	ldrh	r3, [r5, #12]
 80044dc:	065b      	lsls	r3, r3, #25
 80044de:	f53f af2d 	bmi.w	800433c <_svfiprintf_r+0x28>
 80044e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80044e4:	e72c      	b.n	8004340 <_svfiprintf_r+0x2c>
 80044e6:	ab03      	add	r3, sp, #12
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	462a      	mov	r2, r5
 80044ec:	4638      	mov	r0, r7
 80044ee:	4b06      	ldr	r3, [pc, #24]	@ (8004508 <_svfiprintf_r+0x1f4>)
 80044f0:	a904      	add	r1, sp, #16
 80044f2:	f000 f87d 	bl	80045f0 <_printf_i>
 80044f6:	e7ed      	b.n	80044d4 <_svfiprintf_r+0x1c0>
 80044f8:	08004ad2 	.word	0x08004ad2
 80044fc:	08004ad8 	.word	0x08004ad8
 8004500:	08004adc 	.word	0x08004adc
 8004504:	00000000 	.word	0x00000000
 8004508:	0800425d 	.word	0x0800425d

0800450c <_printf_common>:
 800450c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004510:	4616      	mov	r6, r2
 8004512:	4698      	mov	r8, r3
 8004514:	688a      	ldr	r2, [r1, #8]
 8004516:	690b      	ldr	r3, [r1, #16]
 8004518:	4607      	mov	r7, r0
 800451a:	4293      	cmp	r3, r2
 800451c:	bfb8      	it	lt
 800451e:	4613      	movlt	r3, r2
 8004520:	6033      	str	r3, [r6, #0]
 8004522:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004526:	460c      	mov	r4, r1
 8004528:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800452c:	b10a      	cbz	r2, 8004532 <_printf_common+0x26>
 800452e:	3301      	adds	r3, #1
 8004530:	6033      	str	r3, [r6, #0]
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	0699      	lsls	r1, r3, #26
 8004536:	bf42      	ittt	mi
 8004538:	6833      	ldrmi	r3, [r6, #0]
 800453a:	3302      	addmi	r3, #2
 800453c:	6033      	strmi	r3, [r6, #0]
 800453e:	6825      	ldr	r5, [r4, #0]
 8004540:	f015 0506 	ands.w	r5, r5, #6
 8004544:	d106      	bne.n	8004554 <_printf_common+0x48>
 8004546:	f104 0a19 	add.w	sl, r4, #25
 800454a:	68e3      	ldr	r3, [r4, #12]
 800454c:	6832      	ldr	r2, [r6, #0]
 800454e:	1a9b      	subs	r3, r3, r2
 8004550:	42ab      	cmp	r3, r5
 8004552:	dc2b      	bgt.n	80045ac <_printf_common+0xa0>
 8004554:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004558:	6822      	ldr	r2, [r4, #0]
 800455a:	3b00      	subs	r3, #0
 800455c:	bf18      	it	ne
 800455e:	2301      	movne	r3, #1
 8004560:	0692      	lsls	r2, r2, #26
 8004562:	d430      	bmi.n	80045c6 <_printf_common+0xba>
 8004564:	4641      	mov	r1, r8
 8004566:	4638      	mov	r0, r7
 8004568:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800456c:	47c8      	blx	r9
 800456e:	3001      	adds	r0, #1
 8004570:	d023      	beq.n	80045ba <_printf_common+0xae>
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	6922      	ldr	r2, [r4, #16]
 8004576:	f003 0306 	and.w	r3, r3, #6
 800457a:	2b04      	cmp	r3, #4
 800457c:	bf14      	ite	ne
 800457e:	2500      	movne	r5, #0
 8004580:	6833      	ldreq	r3, [r6, #0]
 8004582:	f04f 0600 	mov.w	r6, #0
 8004586:	bf08      	it	eq
 8004588:	68e5      	ldreq	r5, [r4, #12]
 800458a:	f104 041a 	add.w	r4, r4, #26
 800458e:	bf08      	it	eq
 8004590:	1aed      	subeq	r5, r5, r3
 8004592:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004596:	bf08      	it	eq
 8004598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800459c:	4293      	cmp	r3, r2
 800459e:	bfc4      	itt	gt
 80045a0:	1a9b      	subgt	r3, r3, r2
 80045a2:	18ed      	addgt	r5, r5, r3
 80045a4:	42b5      	cmp	r5, r6
 80045a6:	d11a      	bne.n	80045de <_printf_common+0xd2>
 80045a8:	2000      	movs	r0, #0
 80045aa:	e008      	b.n	80045be <_printf_common+0xb2>
 80045ac:	2301      	movs	r3, #1
 80045ae:	4652      	mov	r2, sl
 80045b0:	4641      	mov	r1, r8
 80045b2:	4638      	mov	r0, r7
 80045b4:	47c8      	blx	r9
 80045b6:	3001      	adds	r0, #1
 80045b8:	d103      	bne.n	80045c2 <_printf_common+0xb6>
 80045ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045c2:	3501      	adds	r5, #1
 80045c4:	e7c1      	b.n	800454a <_printf_common+0x3e>
 80045c6:	2030      	movs	r0, #48	@ 0x30
 80045c8:	18e1      	adds	r1, r4, r3
 80045ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80045d4:	4422      	add	r2, r4
 80045d6:	3302      	adds	r3, #2
 80045d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80045dc:	e7c2      	b.n	8004564 <_printf_common+0x58>
 80045de:	2301      	movs	r3, #1
 80045e0:	4622      	mov	r2, r4
 80045e2:	4641      	mov	r1, r8
 80045e4:	4638      	mov	r0, r7
 80045e6:	47c8      	blx	r9
 80045e8:	3001      	adds	r0, #1
 80045ea:	d0e6      	beq.n	80045ba <_printf_common+0xae>
 80045ec:	3601      	adds	r6, #1
 80045ee:	e7d9      	b.n	80045a4 <_printf_common+0x98>

080045f0 <_printf_i>:
 80045f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80045f4:	7e0f      	ldrb	r7, [r1, #24]
 80045f6:	4691      	mov	r9, r2
 80045f8:	2f78      	cmp	r7, #120	@ 0x78
 80045fa:	4680      	mov	r8, r0
 80045fc:	460c      	mov	r4, r1
 80045fe:	469a      	mov	sl, r3
 8004600:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004602:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004606:	d807      	bhi.n	8004618 <_printf_i+0x28>
 8004608:	2f62      	cmp	r7, #98	@ 0x62
 800460a:	d80a      	bhi.n	8004622 <_printf_i+0x32>
 800460c:	2f00      	cmp	r7, #0
 800460e:	f000 80d3 	beq.w	80047b8 <_printf_i+0x1c8>
 8004612:	2f58      	cmp	r7, #88	@ 0x58
 8004614:	f000 80ba 	beq.w	800478c <_printf_i+0x19c>
 8004618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800461c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004620:	e03a      	b.n	8004698 <_printf_i+0xa8>
 8004622:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004626:	2b15      	cmp	r3, #21
 8004628:	d8f6      	bhi.n	8004618 <_printf_i+0x28>
 800462a:	a101      	add	r1, pc, #4	@ (adr r1, 8004630 <_printf_i+0x40>)
 800462c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004630:	08004689 	.word	0x08004689
 8004634:	0800469d 	.word	0x0800469d
 8004638:	08004619 	.word	0x08004619
 800463c:	08004619 	.word	0x08004619
 8004640:	08004619 	.word	0x08004619
 8004644:	08004619 	.word	0x08004619
 8004648:	0800469d 	.word	0x0800469d
 800464c:	08004619 	.word	0x08004619
 8004650:	08004619 	.word	0x08004619
 8004654:	08004619 	.word	0x08004619
 8004658:	08004619 	.word	0x08004619
 800465c:	0800479f 	.word	0x0800479f
 8004660:	080046c7 	.word	0x080046c7
 8004664:	08004759 	.word	0x08004759
 8004668:	08004619 	.word	0x08004619
 800466c:	08004619 	.word	0x08004619
 8004670:	080047c1 	.word	0x080047c1
 8004674:	08004619 	.word	0x08004619
 8004678:	080046c7 	.word	0x080046c7
 800467c:	08004619 	.word	0x08004619
 8004680:	08004619 	.word	0x08004619
 8004684:	08004761 	.word	0x08004761
 8004688:	6833      	ldr	r3, [r6, #0]
 800468a:	1d1a      	adds	r2, r3, #4
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6032      	str	r2, [r6, #0]
 8004690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004694:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004698:	2301      	movs	r3, #1
 800469a:	e09e      	b.n	80047da <_printf_i+0x1ea>
 800469c:	6833      	ldr	r3, [r6, #0]
 800469e:	6820      	ldr	r0, [r4, #0]
 80046a0:	1d19      	adds	r1, r3, #4
 80046a2:	6031      	str	r1, [r6, #0]
 80046a4:	0606      	lsls	r6, r0, #24
 80046a6:	d501      	bpl.n	80046ac <_printf_i+0xbc>
 80046a8:	681d      	ldr	r5, [r3, #0]
 80046aa:	e003      	b.n	80046b4 <_printf_i+0xc4>
 80046ac:	0645      	lsls	r5, r0, #25
 80046ae:	d5fb      	bpl.n	80046a8 <_printf_i+0xb8>
 80046b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80046b4:	2d00      	cmp	r5, #0
 80046b6:	da03      	bge.n	80046c0 <_printf_i+0xd0>
 80046b8:	232d      	movs	r3, #45	@ 0x2d
 80046ba:	426d      	negs	r5, r5
 80046bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046c0:	230a      	movs	r3, #10
 80046c2:	4859      	ldr	r0, [pc, #356]	@ (8004828 <_printf_i+0x238>)
 80046c4:	e011      	b.n	80046ea <_printf_i+0xfa>
 80046c6:	6821      	ldr	r1, [r4, #0]
 80046c8:	6833      	ldr	r3, [r6, #0]
 80046ca:	0608      	lsls	r0, r1, #24
 80046cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80046d0:	d402      	bmi.n	80046d8 <_printf_i+0xe8>
 80046d2:	0649      	lsls	r1, r1, #25
 80046d4:	bf48      	it	mi
 80046d6:	b2ad      	uxthmi	r5, r5
 80046d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80046da:	6033      	str	r3, [r6, #0]
 80046dc:	bf14      	ite	ne
 80046de:	230a      	movne	r3, #10
 80046e0:	2308      	moveq	r3, #8
 80046e2:	4851      	ldr	r0, [pc, #324]	@ (8004828 <_printf_i+0x238>)
 80046e4:	2100      	movs	r1, #0
 80046e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80046ea:	6866      	ldr	r6, [r4, #4]
 80046ec:	2e00      	cmp	r6, #0
 80046ee:	bfa8      	it	ge
 80046f0:	6821      	ldrge	r1, [r4, #0]
 80046f2:	60a6      	str	r6, [r4, #8]
 80046f4:	bfa4      	itt	ge
 80046f6:	f021 0104 	bicge.w	r1, r1, #4
 80046fa:	6021      	strge	r1, [r4, #0]
 80046fc:	b90d      	cbnz	r5, 8004702 <_printf_i+0x112>
 80046fe:	2e00      	cmp	r6, #0
 8004700:	d04b      	beq.n	800479a <_printf_i+0x1aa>
 8004702:	4616      	mov	r6, r2
 8004704:	fbb5 f1f3 	udiv	r1, r5, r3
 8004708:	fb03 5711 	mls	r7, r3, r1, r5
 800470c:	5dc7      	ldrb	r7, [r0, r7]
 800470e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004712:	462f      	mov	r7, r5
 8004714:	42bb      	cmp	r3, r7
 8004716:	460d      	mov	r5, r1
 8004718:	d9f4      	bls.n	8004704 <_printf_i+0x114>
 800471a:	2b08      	cmp	r3, #8
 800471c:	d10b      	bne.n	8004736 <_printf_i+0x146>
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	07df      	lsls	r7, r3, #31
 8004722:	d508      	bpl.n	8004736 <_printf_i+0x146>
 8004724:	6923      	ldr	r3, [r4, #16]
 8004726:	6861      	ldr	r1, [r4, #4]
 8004728:	4299      	cmp	r1, r3
 800472a:	bfde      	ittt	le
 800472c:	2330      	movle	r3, #48	@ 0x30
 800472e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004732:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004736:	1b92      	subs	r2, r2, r6
 8004738:	6122      	str	r2, [r4, #16]
 800473a:	464b      	mov	r3, r9
 800473c:	4621      	mov	r1, r4
 800473e:	4640      	mov	r0, r8
 8004740:	f8cd a000 	str.w	sl, [sp]
 8004744:	aa03      	add	r2, sp, #12
 8004746:	f7ff fee1 	bl	800450c <_printf_common>
 800474a:	3001      	adds	r0, #1
 800474c:	d14a      	bne.n	80047e4 <_printf_i+0x1f4>
 800474e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004752:	b004      	add	sp, #16
 8004754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	f043 0320 	orr.w	r3, r3, #32
 800475e:	6023      	str	r3, [r4, #0]
 8004760:	2778      	movs	r7, #120	@ 0x78
 8004762:	4832      	ldr	r0, [pc, #200]	@ (800482c <_printf_i+0x23c>)
 8004764:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	6831      	ldr	r1, [r6, #0]
 800476c:	061f      	lsls	r7, r3, #24
 800476e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004772:	d402      	bmi.n	800477a <_printf_i+0x18a>
 8004774:	065f      	lsls	r7, r3, #25
 8004776:	bf48      	it	mi
 8004778:	b2ad      	uxthmi	r5, r5
 800477a:	6031      	str	r1, [r6, #0]
 800477c:	07d9      	lsls	r1, r3, #31
 800477e:	bf44      	itt	mi
 8004780:	f043 0320 	orrmi.w	r3, r3, #32
 8004784:	6023      	strmi	r3, [r4, #0]
 8004786:	b11d      	cbz	r5, 8004790 <_printf_i+0x1a0>
 8004788:	2310      	movs	r3, #16
 800478a:	e7ab      	b.n	80046e4 <_printf_i+0xf4>
 800478c:	4826      	ldr	r0, [pc, #152]	@ (8004828 <_printf_i+0x238>)
 800478e:	e7e9      	b.n	8004764 <_printf_i+0x174>
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	f023 0320 	bic.w	r3, r3, #32
 8004796:	6023      	str	r3, [r4, #0]
 8004798:	e7f6      	b.n	8004788 <_printf_i+0x198>
 800479a:	4616      	mov	r6, r2
 800479c:	e7bd      	b.n	800471a <_printf_i+0x12a>
 800479e:	6833      	ldr	r3, [r6, #0]
 80047a0:	6825      	ldr	r5, [r4, #0]
 80047a2:	1d18      	adds	r0, r3, #4
 80047a4:	6961      	ldr	r1, [r4, #20]
 80047a6:	6030      	str	r0, [r6, #0]
 80047a8:	062e      	lsls	r6, r5, #24
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	d501      	bpl.n	80047b2 <_printf_i+0x1c2>
 80047ae:	6019      	str	r1, [r3, #0]
 80047b0:	e002      	b.n	80047b8 <_printf_i+0x1c8>
 80047b2:	0668      	lsls	r0, r5, #25
 80047b4:	d5fb      	bpl.n	80047ae <_printf_i+0x1be>
 80047b6:	8019      	strh	r1, [r3, #0]
 80047b8:	2300      	movs	r3, #0
 80047ba:	4616      	mov	r6, r2
 80047bc:	6123      	str	r3, [r4, #16]
 80047be:	e7bc      	b.n	800473a <_printf_i+0x14a>
 80047c0:	6833      	ldr	r3, [r6, #0]
 80047c2:	2100      	movs	r1, #0
 80047c4:	1d1a      	adds	r2, r3, #4
 80047c6:	6032      	str	r2, [r6, #0]
 80047c8:	681e      	ldr	r6, [r3, #0]
 80047ca:	6862      	ldr	r2, [r4, #4]
 80047cc:	4630      	mov	r0, r6
 80047ce:	f000 f859 	bl	8004884 <memchr>
 80047d2:	b108      	cbz	r0, 80047d8 <_printf_i+0x1e8>
 80047d4:	1b80      	subs	r0, r0, r6
 80047d6:	6060      	str	r0, [r4, #4]
 80047d8:	6863      	ldr	r3, [r4, #4]
 80047da:	6123      	str	r3, [r4, #16]
 80047dc:	2300      	movs	r3, #0
 80047de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047e2:	e7aa      	b.n	800473a <_printf_i+0x14a>
 80047e4:	4632      	mov	r2, r6
 80047e6:	4649      	mov	r1, r9
 80047e8:	4640      	mov	r0, r8
 80047ea:	6923      	ldr	r3, [r4, #16]
 80047ec:	47d0      	blx	sl
 80047ee:	3001      	adds	r0, #1
 80047f0:	d0ad      	beq.n	800474e <_printf_i+0x15e>
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	079b      	lsls	r3, r3, #30
 80047f6:	d413      	bmi.n	8004820 <_printf_i+0x230>
 80047f8:	68e0      	ldr	r0, [r4, #12]
 80047fa:	9b03      	ldr	r3, [sp, #12]
 80047fc:	4298      	cmp	r0, r3
 80047fe:	bfb8      	it	lt
 8004800:	4618      	movlt	r0, r3
 8004802:	e7a6      	b.n	8004752 <_printf_i+0x162>
 8004804:	2301      	movs	r3, #1
 8004806:	4632      	mov	r2, r6
 8004808:	4649      	mov	r1, r9
 800480a:	4640      	mov	r0, r8
 800480c:	47d0      	blx	sl
 800480e:	3001      	adds	r0, #1
 8004810:	d09d      	beq.n	800474e <_printf_i+0x15e>
 8004812:	3501      	adds	r5, #1
 8004814:	68e3      	ldr	r3, [r4, #12]
 8004816:	9903      	ldr	r1, [sp, #12]
 8004818:	1a5b      	subs	r3, r3, r1
 800481a:	42ab      	cmp	r3, r5
 800481c:	dcf2      	bgt.n	8004804 <_printf_i+0x214>
 800481e:	e7eb      	b.n	80047f8 <_printf_i+0x208>
 8004820:	2500      	movs	r5, #0
 8004822:	f104 0619 	add.w	r6, r4, #25
 8004826:	e7f5      	b.n	8004814 <_printf_i+0x224>
 8004828:	08004ae3 	.word	0x08004ae3
 800482c:	08004af4 	.word	0x08004af4

08004830 <memmove>:
 8004830:	4288      	cmp	r0, r1
 8004832:	b510      	push	{r4, lr}
 8004834:	eb01 0402 	add.w	r4, r1, r2
 8004838:	d902      	bls.n	8004840 <memmove+0x10>
 800483a:	4284      	cmp	r4, r0
 800483c:	4623      	mov	r3, r4
 800483e:	d807      	bhi.n	8004850 <memmove+0x20>
 8004840:	1e43      	subs	r3, r0, #1
 8004842:	42a1      	cmp	r1, r4
 8004844:	d008      	beq.n	8004858 <memmove+0x28>
 8004846:	f811 2b01 	ldrb.w	r2, [r1], #1
 800484a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800484e:	e7f8      	b.n	8004842 <memmove+0x12>
 8004850:	4601      	mov	r1, r0
 8004852:	4402      	add	r2, r0
 8004854:	428a      	cmp	r2, r1
 8004856:	d100      	bne.n	800485a <memmove+0x2a>
 8004858:	bd10      	pop	{r4, pc}
 800485a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800485e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004862:	e7f7      	b.n	8004854 <memmove+0x24>

08004864 <_sbrk_r>:
 8004864:	b538      	push	{r3, r4, r5, lr}
 8004866:	2300      	movs	r3, #0
 8004868:	4d05      	ldr	r5, [pc, #20]	@ (8004880 <_sbrk_r+0x1c>)
 800486a:	4604      	mov	r4, r0
 800486c:	4608      	mov	r0, r1
 800486e:	602b      	str	r3, [r5, #0]
 8004870:	f7fc f8ac 	bl	80009cc <_sbrk>
 8004874:	1c43      	adds	r3, r0, #1
 8004876:	d102      	bne.n	800487e <_sbrk_r+0x1a>
 8004878:	682b      	ldr	r3, [r5, #0]
 800487a:	b103      	cbz	r3, 800487e <_sbrk_r+0x1a>
 800487c:	6023      	str	r3, [r4, #0]
 800487e:	bd38      	pop	{r3, r4, r5, pc}
 8004880:	20000290 	.word	0x20000290

08004884 <memchr>:
 8004884:	4603      	mov	r3, r0
 8004886:	b510      	push	{r4, lr}
 8004888:	b2c9      	uxtb	r1, r1
 800488a:	4402      	add	r2, r0
 800488c:	4293      	cmp	r3, r2
 800488e:	4618      	mov	r0, r3
 8004890:	d101      	bne.n	8004896 <memchr+0x12>
 8004892:	2000      	movs	r0, #0
 8004894:	e003      	b.n	800489e <memchr+0x1a>
 8004896:	7804      	ldrb	r4, [r0, #0]
 8004898:	3301      	adds	r3, #1
 800489a:	428c      	cmp	r4, r1
 800489c:	d1f6      	bne.n	800488c <memchr+0x8>
 800489e:	bd10      	pop	{r4, pc}

080048a0 <memcpy>:
 80048a0:	440a      	add	r2, r1
 80048a2:	4291      	cmp	r1, r2
 80048a4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80048a8:	d100      	bne.n	80048ac <memcpy+0xc>
 80048aa:	4770      	bx	lr
 80048ac:	b510      	push	{r4, lr}
 80048ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048b2:	4291      	cmp	r1, r2
 80048b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048b8:	d1f9      	bne.n	80048ae <memcpy+0xe>
 80048ba:	bd10      	pop	{r4, pc}

080048bc <_realloc_r>:
 80048bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c0:	4680      	mov	r8, r0
 80048c2:	4615      	mov	r5, r2
 80048c4:	460c      	mov	r4, r1
 80048c6:	b921      	cbnz	r1, 80048d2 <_realloc_r+0x16>
 80048c8:	4611      	mov	r1, r2
 80048ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048ce:	f7ff bc39 	b.w	8004144 <_malloc_r>
 80048d2:	b92a      	cbnz	r2, 80048e0 <_realloc_r+0x24>
 80048d4:	f7ff fbcc 	bl	8004070 <_free_r>
 80048d8:	2400      	movs	r4, #0
 80048da:	4620      	mov	r0, r4
 80048dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048e0:	f000 f81a 	bl	8004918 <_malloc_usable_size_r>
 80048e4:	4285      	cmp	r5, r0
 80048e6:	4606      	mov	r6, r0
 80048e8:	d802      	bhi.n	80048f0 <_realloc_r+0x34>
 80048ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80048ee:	d8f4      	bhi.n	80048da <_realloc_r+0x1e>
 80048f0:	4629      	mov	r1, r5
 80048f2:	4640      	mov	r0, r8
 80048f4:	f7ff fc26 	bl	8004144 <_malloc_r>
 80048f8:	4607      	mov	r7, r0
 80048fa:	2800      	cmp	r0, #0
 80048fc:	d0ec      	beq.n	80048d8 <_realloc_r+0x1c>
 80048fe:	42b5      	cmp	r5, r6
 8004900:	462a      	mov	r2, r5
 8004902:	4621      	mov	r1, r4
 8004904:	bf28      	it	cs
 8004906:	4632      	movcs	r2, r6
 8004908:	f7ff ffca 	bl	80048a0 <memcpy>
 800490c:	4621      	mov	r1, r4
 800490e:	4640      	mov	r0, r8
 8004910:	f7ff fbae 	bl	8004070 <_free_r>
 8004914:	463c      	mov	r4, r7
 8004916:	e7e0      	b.n	80048da <_realloc_r+0x1e>

08004918 <_malloc_usable_size_r>:
 8004918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800491c:	1f18      	subs	r0, r3, #4
 800491e:	2b00      	cmp	r3, #0
 8004920:	bfbc      	itt	lt
 8004922:	580b      	ldrlt	r3, [r1, r0]
 8004924:	18c0      	addlt	r0, r0, r3
 8004926:	4770      	bx	lr

08004928 <_init>:
 8004928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492a:	bf00      	nop
 800492c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800492e:	bc08      	pop	{r3}
 8004930:	469e      	mov	lr, r3
 8004932:	4770      	bx	lr

08004934 <_fini>:
 8004934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004936:	bf00      	nop
 8004938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800493a:	bc08      	pop	{r3}
 800493c:	469e      	mov	lr, r3
 800493e:	4770      	bx	lr
